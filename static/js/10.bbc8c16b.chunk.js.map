{"version":3,"sources":["services/devicesOptions.js","hooks/useNotification.js","../node_modules/delay/index.js","../node_modules/legoino-navigator-serial/src/Action.js","../node_modules/legoino-navigator-serial/src/Device.js","../node_modules/legoino-navigator-serial/src/util/checkSerial.js","../node_modules/legoino-navigator-serial/src/DevicesManager.js","assets/icons/treeDots.svg","services/localDeviceService.js","../node_modules/legoino-navigator-serial/src/util/EventEmitter.js","pages/LocalDevices/SelectDeviceComponent.jsx","pages/LocalDevices/GeneralTab.jsx","pages/LocalDevices/HistoryTab.jsx","pages/LocalDevices/ConfigTab.jsx","pages/LocalDevices/AdvancedTab.jsx","pages/LocalDevices/index.jsx"],"names":["DEVICES_DB","DEFAULT_PORT","DEFAULT_PROTOCOL","DEVICE_PROTOCOLS","DEVICE_KINDS","Object","keys","legoinoDeviceInformation","map","key","kind","COMMANDS","compactSettings","runExperiment","kinetic","reset","sleep","setParameter","label","value","useNotification","notificationContext","useNotificationCenter","addNotification","title","message","textColor","Icon","timeout","className","clsx","content","icon","addErrorNotification","SvgSolidExclamation","addWarningNotification","addInfoNotification","SvgOutlineExclamationCircle","createAbortError","error","Error","name","createDelay","defaultClear","clearTimeout","set","setTimeout","willResolve","ms","timeoutId","settle","rejectFn","signal","aborted","Promise","reject","clear","signalListener","cleanup","removeEventListener","delayPromise","resolve","addEventListener","once","delay","range","minimum","maximum","options","Math","floor","random","randomInteger","createWithTimers","module","exports","default","Action","command","this","currentTimeout","undefined","answer","status","creationTimestamp","Date","now","promise","finishedPromise","finished","startTimestamp","buffer","string","TextDecoder","decode","replace","endsWith","lines","split","length","filter","line","join","Device","serialPort","id","baudRate","queue","action","interCommandDelay","defaultCommandExpirationDelay","encoder","TextEncoder","decoder","a","currentProcessQueue","runProcessQueue","shift","start","write","read","open","reader","readable","getReader","writer","writable","getWriter","get","commandExpirationDelay","push","ensureProcessQueue","port","path","emit","event","data","dataArrayBuffer","encode","isFinished","appendAnswer","checkSerial","serial","console","_path","devicesManager","devices","portFilter","usbProductId","usbVendorId","requestPort","filters","updateDevices","getPorts","serialPorts","missingDevicesSerialPort","device","includes","close","ensureOpen","newDevice","scanInterval","callback","ready","isReady","queueLength","findDevice","callbacks","cb","cbs","forEach","navigator","requestDevices","getConnectedDevices","getDevicesList","connectedDevices","continuousUpdateDevices","interval","setInterval","isFunction","sendCommand","deviceId","typeOptions","type","SelectDeviceComponent","deviceType","o","onSelectDevice","onSelectType","useState","setDevices","useEffect","updateConnectedDevices","cleanUp","newList","handleDevicesListChange","then","intervalId","clearInterval","renderOptions","onRequest","document","activeElement","blur","list","onSelect","onClick","GeneralTab","onSendCommand","resultMsg","log","epoch","parametersArray","param","index","factor","unit","info","description","HistoryTab","headers","setHeaders","heads","h","Row","useCallback","val","classnames","compact","p","headerValues","useTable","itemsPerPage","withText","pagination","sliceData","d","Header","Tr","intervals","v","ConfigTab","refreshInterval","setRefreshInterval","refreshData","writableParams","setWritableParams","_refreshInterval","_setRefreshInterval","parameters","values","onSaveValue","onReset","onSleep","option","variant","initialValue","placeholder","onSave","_excluded","_extends","assign","target","i","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgTreeDots","_ref","svgRef","titleId","props","viewBox","ref","ForwardRef","AdvancedTab","size","fill","tabs","LocalDevices","currentData","setCurrentData","allData","setAllData","selectedDevice","setSelectedDevice","selectedType","setSelectedType","selectedTab","setSelectedTab","getData","compressedResults","results","parseCurrentSettings","parameterInfo","selected","tab","renderTabContent"],"mappings":"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","file":"static/js/10.bbc8c16b.chunk.js","sourcesContent":["import legoinoDeviceInformation from 'legoino-device-information';\n\n// Default Values\n\nexport const DEVICES_DB = 'BIOREACTOR_devices';\nexport const DEFAULT_PORT = '80'; // old '8080'\nexport const DEFAULT_PROTOCOL = 'http'; // old tcp\n\n// Static Values\n\nexport const DEVICE_TYPE = {\n  broadcast: 'broadcast',\n  interactive: 'interactive',\n  local: 'local',\n};\n\nexport const DEVICE_PROTOCOLS = ['http', 'tcp', 'wss'];\n\nexport const DEVICE_KINDS = Object.keys(legoinoDeviceInformation).map(\n  (key) => legoinoDeviceInformation[key].kind,\n);\n\nexport const DEVICE_STATUS = {\n  opening: 1,\n  opened: 2,\n  closed: 3,\n  missing: 9,\n  error: 10,\n};\n\nexport const COMMANDS = {\n  compactSettings: 'uc',\n  runExperiment: 'r',\n  kinetic: 'k',\n  reset: 'ur1234',\n  sleep: 'l',\n  setParameter: (label, value) => `${label}${value}`,\n};\n","import clsx from 'clsx';\nimport {\n  SvgOutlineExclamationCircle,\n  SvgSolidExclamation,\n  useNotificationCenter,\n} from '../components/tailwind-ui';\n\nexport default function useNotification() {\n  const notificationContext = useNotificationCenter();\n\n  const addNotification = (title, message, { textColor, Icon, timeout }) => {\n    notificationContext.addNotification(\n      {\n        title: (\n          <span className={clsx('text-base font-semibold', textColor + '500')}>\n            {title}\n          </span>\n        ),\n        content: <span className=\"text-sm text-neutral-500\">{message}</span>,\n        icon: <Icon className={clsx('w-8 h-8', textColor + '600')} />,\n      },\n      timeout,\n    );\n  };\n\n  const addInfoNotification = (title, message, timeout = 1000) => {\n    addNotification(title, message, {\n      textColor: 'text-primary-',\n      Icon: SvgOutlineExclamationCircle,\n      timeout: timeout,\n    });\n  };\n\n  const addWarningNotification = (title, message, timeout = 2500) => {\n    addNotification(title, message, {\n      textColor: 'text-warning-',\n      Icon: SvgSolidExclamation,\n      timeout: timeout,\n    });\n  };\n\n  const addErrorNotification = (title, message, timeout = 5000) => {\n    addNotification(title, message, {\n      textColor: 'text-danger-',\n      Icon: SvgSolidExclamation,\n      timeout: timeout,\n    });\n  };\n\n  return { addErrorNotification, addWarningNotification, addInfoNotification };\n}\n","'use strict';\n\n// From https://github.com/sindresorhus/random-int/blob/c37741b56f76b9160b0b63dae4e9c64875128146/index.js#L13-L15\nconst randomInteger = (minimum, maximum) => Math.floor((Math.random() * (maximum - minimum + 1)) + minimum);\n\nconst createAbortError = () => {\n\tconst error = new Error('Delay aborted');\n\terror.name = 'AbortError';\n\treturn error;\n};\n\nconst createDelay = ({clearTimeout: defaultClear, setTimeout: set, willResolve}) => (ms, {value, signal} = {}) => {\n\tif (signal && signal.aborted) {\n\t\treturn Promise.reject(createAbortError());\n\t}\n\n\tlet timeoutId;\n\tlet settle;\n\tlet rejectFn;\n\tconst clear = defaultClear || clearTimeout;\n\n\tconst signalListener = () => {\n\t\tclear(timeoutId);\n\t\trejectFn(createAbortError());\n\t};\n\n\tconst cleanup = () => {\n\t\tif (signal) {\n\t\t\tsignal.removeEventListener('abort', signalListener);\n\t\t}\n\t};\n\n\tconst delayPromise = new Promise((resolve, reject) => {\n\t\tsettle = () => {\n\t\t\tcleanup();\n\t\t\tif (willResolve) {\n\t\t\t\tresolve(value);\n\t\t\t} else {\n\t\t\t\treject(value);\n\t\t\t}\n\t\t};\n\n\t\trejectFn = reject;\n\t\ttimeoutId = (set || setTimeout)(settle, ms);\n\t});\n\n\tif (signal) {\n\t\tsignal.addEventListener('abort', signalListener, {once: true});\n\t}\n\n\tdelayPromise.clear = () => {\n\t\tclear(timeoutId);\n\t\ttimeoutId = null;\n\t\tsettle();\n\t};\n\n\treturn delayPromise;\n};\n\nconst delay = createDelay({willResolve: true});\ndelay.reject = createDelay({willResolve: false});\ndelay.range = (minimum, maximum, options) => delay(randomInteger(minimum, maximum), options);\ndelay.createWithTimers = ({clearTimeout, setTimeout}) => {\n\tconst delay = createDelay({clearTimeout, setTimeout, willResolve: true});\n\tdelay.reject = createDelay({clearTimeout, setTimeout, willResolve: false});\n\treturn delay;\n};\n\nmodule.exports = delay;\n// TODO: Remove this for the next major release\nmodule.exports.default = delay;\n","const STATUS_CREATED = 0;\nconst STATUS_COMMAND_SENT = 1;\nconst STATUS_ANSWER_PARTIALLY_RECEIVED = 2;\nconst STATUS_ANSWER_RECEIVED = 3;\nconst STATUS_RESOLVED = 4;\nconst STATUS_ERROR = 5;\n\nexport class Action {\n  constructor(command, options = {}) {\n    this.currentTimeout = undefined;\n    this.command = command;\n    this.timeout = options.timeout === undefined ? 1000 : options.timeout;\n    this.answer = '';\n    this.status = STATUS_CREATED;\n    this.creationTimestamp = Date.now();\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n    this.finishedPromise = new Promise((resolve) => {\n      this.finished = resolve;\n    });\n  }\n\n  isFinished() {\n    return this.status === STATUS_RESOLVED || this.status === STATUS_ERROR;\n  }\n\n  setTimeout() {\n    if (this.currentTimeout) {\n      clearTimeout(this.currentTimeout);\n    }\n    this.currentTimeout = setTimeout(() => {\n      if (this.status === STATUS_RESOLVED || this.status === STATUS_ERROR) {\n        return;\n      }\n      this.status = STATUS_ERROR;\n      this.reject('Timeout');\n      this.finished();\n    }, this.timeout);\n  }\n\n  start() {\n    this.startTimestamp = Date.now();\n    this.status = STATUS_COMMAND_SENT;\n    this.setTimeout();\n  }\n\n  appendAnswer(buffer) {\n    let string = new TextDecoder().decode(buffer);\n    this.status = STATUS_ANSWER_PARTIALLY_RECEIVED;\n    this.answer += string;\n    if (!this.answer.replace(/\\r/g, '').endsWith('\\n\\n')) return;\n    let lines = this.answer.split(/\\r?\\n/);\n    if (lines.length > 0 && lines[lines.length - 1] === '') {\n      lines = lines.filter((line) => line);\n      this.status = STATUS_ANSWER_RECEIVED;\n      this.resolve(lines.join('\\n'));\n      this.finished();\n      this.status = STATUS_RESOLVED;\n    }\n  }\n}\n","/* eslint-disable no-await-in-loop */\n\nimport delay from 'delay';\n\nimport { Action } from './Action';\n\nconst debug = () => {};\n\nexport const STATUS_OPENING = 1;\nexport const STATUS_OPENED = 2;\nexport const STATUS_CLOSED = 3;\nexport const STATUS_MISSING = 9;\nexport const STATUS_ERROR = 10;\n\nexport class Device {\n  constructor(serialPort, options = {}) {\n    this.status = STATUS_OPENING;\n    this.id = undefined;\n    this.serialPort = serialPort;\n    this.baudRate = options.baudRate || 115200;\n    this.queue = [];\n    this.action = undefined;\n    this.interCommandDelay = options.interCommandDelay;\n    this.defaultCommandExpirationDelay = 2000;\n    this.encoder = new TextEncoder();\n    this.decoder = new TextDecoder();\n  }\n\n  isReady() {\n    return this.status === STATUS_OPENED;\n  }\n\n  /** restart process queue if the previous one was finished */\n  async ensureProcessQueue() {\n    debug('ensureProcessQueue');\n    if (!this.currentProcessQueue) {\n      this.currentProcessQueue = this.runProcessQueue();\n    }\n    return this.currentProcessQueue;\n  }\n\n  async runProcessQueue() {\n    while (this.queue.length > 0) {\n      this.action = this.queue.shift();\n\n      if (this.action) {\n        this.action.start();\n        await this.write(`${this.action.command}\\n`);\n        await this.read(this.action);\n        await this.action.finishedPromise;\n        this.action = undefined;\n        await delay(this.interCommandDelay);\n      }\n    }\n    this.currentProcessQueue = undefined;\n  }\n\n  async getStatus() {\n    return {\n      value: this.status,\n    };\n  }\n\n  async ensureOpen() {\n    debug(`Ensure open`);\n    if (this.status !== STATUS_OPENED) {\n      return this.open();\n    }\n  }\n\n  async open() {\n    debug(`Opening`);\n    await this.serialPort.open({\n      baudRate: this.baudRate,\n    });\n    this.reader = this.serialPort.readable.getReader();\n    this.writer = this.serialPort.writable.getWriter();\n    this.id = await this.get('uq');\n    this.status = STATUS_OPENED;\n  }\n\n  /*\n   We need to add this command in the queue and wait it resolves or rejects\n  */\n  async get(command, options = {}) {\n    const {\n      commandExpirationDelay = this.defaultCommandExpirationDelay,\n    } = options;\n\n    const action = new Action(command, {\n      timeout: commandExpirationDelay,\n    });\n\n    this.queue.push(action);\n    this.ensureProcessQueue();\n    return action.promise;\n  }\n\n  error(error) {\n    debug(`Error ${this.port.path}`);\n    debug(error);\n    this.status = STATUS_ERROR;\n    this.emit('adapter', {\n      event: 'Error',\n      value: error,\n    });\n  }\n\n  close() {\n    debug(`Close`);\n    this.status = STATUS_CLOSED;\n  }\n\n  async write(data) {\n    const dataArrayBuffer = this.encoder.encode(`${data}\\n`);\n    return this.writer.write(dataArrayBuffer);\n  }\n\n  async read(action) {\n    while (!action.isFinished()) {\n      action.appendAnswer((await this.reader.read()).value);\n      delay(10);\n    }\n  }\n}\n","/* eslint-disable no-console */\nexport default function checkSerial(serial) {\n  if (!serial) {\n    console.error(\n      \"Web serial doesn't seem to be enabled in your browser. Try enabling it by visiting:\",\n    );\n    console.error('chrome://flags/#enable-experimental-web-platform-features');\n    console.error('opera://flags/#enable-experimental-web-platform-features');\n    console.error('edge://flags/#enable-experimental-web-platform-features');\n  }\n}\n","/* eslint-disable no-await-in-loop */\nimport delay from 'delay';\n\nimport { Device, STATUS_MISSING, STATUS_OPENED, STATUS_CLOSED } from './Device';\nimport EventEmitter from './util/EventEmitter';\nimport checkSerial from './util/checkSerial';\n\nconst debug = () => {};\n\n/**\n * Class creating a new serial bridge to manage serial ports.\n * @param {object} [options={}]\n * @param {function} [options.portFilter=[{usbProductId:37384, usbVendorId:6991}]] Filter the serial ports to address.\n * @param {number} [options.baudRate=57200] Baud rate\n * @param {number} [options.interCommandDelay=100] Time to wait between commands in [ms]\n * @param {number} [options.defaultCommandExpirationDelay=100] Time to wait for answer before timeout\n */\nexport class DevicesManager extends EventEmitter {\n  constructor(serial, options = {}) {\n    super();\n    checkSerial(serial);\n    this.serial = serial;\n    this.devices = [];\n    this.portFilter =\n      options.portFilter === undefined\n        ? [{ usbProductId: 37384, usbVendorId: 6991 }]\n        : options.portFilter;\n    this.baudRate = options.baudRate || 115200;\n    this.interCommandDelay =\n      options.interCommandDelay === undefined ? 100 : options.interCommandDelay;\n    this.defaultCommandExpirationDelay =\n      options.defaultCommandExpirationDelay === undefined\n        ? 100\n        : options.defaultCommandExpirationDelay;\n  }\n\n  /**\n   * By calling this method from a click you give users the possibility to allow access to some devices\n   */\n  async requestDevices() {\n    await this.serial.requestPort({\n      filters: this.portFilter,\n    });\n    return this.updateDevices();\n  }\n\n  /**\n   * Update this.devices\n   */\n  async updateDevices() {\n    const serialPorts = await this.serial.getPorts();\n\n    debug('updateDevices');\n\n    const missingDevicesSerialPort = this.devices.filter(\n      (device) => !serialPorts.includes(device.serialPort),\n    );\n    for (let device of missingDevicesSerialPort) {\n      if (device.status !== STATUS_MISSING && device.status !== STATUS_CLOSED) {\n        device.close();\n      }\n      device.status = STATUS_MISSING;\n    }\n\n    for (let serialPort of serialPorts) {\n      let device = this.devices.filter(\n        (device) => device.serialPort === serialPort,\n      )[0];\n      if (device) {\n        await device.ensureOpen();\n      } else {\n        let newDevice = new Device(serialPort, {\n          baudRate: this.baudRate,\n          interCommandDelay: this.interCommandDelay,\n          defaultCommandExpirationDelay: this.defaultCommandExpirationDelay,\n        });\n        this.devices.push(newDevice);\n        await newDevice.open();\n      }\n    }\n    // check if there are any new ports\n  }\n\n  /**\n   * Update this.devices every `scanInterval` [ms].\n   * @param {object} [options={}]\n   * @param {number} [options.scanInterval=1000] Delay between `updateDevices()` calls\n   * @param {number} [options.callback] Callback to execute on each update\n   */\n  async continuousUpdateDevices(options = {}) {\n    const { scanInterval = 1000, callback } = options;\n    while (true) {\n      await this.updateDevices();\n      if (callback) {\n        callback(this.devices);\n      }\n      await delay(scanInterval);\n    }\n  }\n\n  /**\n   * Returns this.devices\n   * @param {object} [options={}]\n   * @param {bool} [options.ready=false] If `true` returns only currently connected device. If `false` returns all devices ever connected.\n   * @returns {Array<object>}\n   */\n  getDevicesList(options = {}) {\n    let { ready = false } = options;\n    return this.devices\n      .filter((device) => !ready || device.isReady())\n      .map((device) => ({\n        status: device.status,\n        id: device.id,\n        queueLength: device.queue.length,\n      }));\n  }\n\n  // private function\n  findDevice(id) {\n    if (id === undefined) return undefined;\n    let devices = this.devices.filter(\n      (device) => device.id === id && device.status === STATUS_OPENED,\n    );\n    if (devices.length === 0) return undefined;\n    if (devices.length > 1) {\n      throw new Error(`Many devices have the same id: ${id}`);\n    }\n    return devices[0];\n  }\n\n  /**\n   * Send a serial command to a device.\n   * @param {number} id ID of the device\n   * @param {string} command Command to send\n   */\n  async sendCommand(id, command) {\n    const device = this.findDevice(id);\n    if (!device) {\n      throw Error(`Device ${id} not found`);\n    }\n    if (device && device.isReady()) return device.get(command);\n    throw Error(`Device ${id} not ready: ${device.port.path}`);\n  }\n}\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgTreeDots(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 20 20\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgTreeDots);\nexport default __webpack_public_path__ + \"static/media/treeDots.68360f32.svg\";\nexport { ForwardRef as ReactComponent };","import { isFunction } from 'lodash';\nimport { DevicesManager } from 'legoino-navigator-serial';\n\nconst SCAN_INTERVAL = 3000;\n\nconst devicesManager = new DevicesManager(navigator.serial);\n\n/**\n * By calling this method from a click you give users the possibility to allow access to some devices\n */\nconst requestDevices = async () => {\n  await devicesManager.requestDevices();\n};\n\n/**\n * @returns {Array<object>}\n */\nconst getConnectedDevices = async () => {\n  await devicesManager.updateDevices();\n  const connectedDevices = await devicesManager.getDevicesList({\n    ready: true, // If ready==`true` returns only currently connected device, else returns all devices ever connected.\n  });\n  return connectedDevices;\n};\n\n/**\n * Update updated devices list every `scanInterval` [ms].\n * @param {Function} callback(devicesList): Callback to execute on each update\n * @param {number} scanInterval Delay between calls\n */\nconst continuousUpdateDevices = async (\n  callback,\n  scanInterval = SCAN_INTERVAL,\n) => {\n  const interval = setInterval(async () => {\n    const connectedDevices = await getConnectedDevices();\n    isFunction(callback) && callback(connectedDevices);\n  }, scanInterval);\n  return interval;\n};\n\n/**\n * Send a serial command to a device.\n * @param {number} id ID of the device\n * @param {string} command Command to send\n * @returns ??????\n */\nconst sendCommand = async (deviceId, command) => {\n  return await devicesManager.sendCommand(deviceId, command);\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  requestDevices,\n  getConnectedDevices,\n  continuousUpdateDevices,\n  sendCommand,\n};\n","export default class EventEmitter {\n  constructor() {\n    this.callbacks = {};\n  }\n\n  on(event, cb) {\n    if (!this.callbacks[event]) this.callbacks[event] = [];\n    this.callbacks[event].push(cb);\n  }\n\n  emit(event, data) {\n    let cbs = this.callbacks[event];\n    if (cbs) {\n      cbs.forEach((cb) => cb(data));\n    }\n  }\n}\n","import { useEffect, useState } from 'react';\n\nimport { Dropdown, Button } from '../../components/tailwind-ui';\nimport useNotification from '../../hooks/useNotification';\nimport devicesManager from '../../services/localDeviceService';\nimport { DEVICE_KINDS } from '../../services/devicesOptions';\n\nconst typeOptions = DEVICE_KINDS.map((type) => ({\n  label: type,\n  type: 'option',\n}));\n\nconst SelectDeviceComponent = ({\n  device = { label: '--' },\n  deviceType = typeOptions.filter((o) => o.label === 'SimpleSpectro')[0],\n  onSelectDevice,\n  onSelectType,\n}) => {\n  const { addInfoNotification, addWarningNotification } = useNotification();\n  const [devices, setDevices] = useState([]);\n\n  useEffect(() => {\n    onSelectType(deviceType);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // continuous update of devices list\n  useEffect(() => {\n    updateConnectedDevices();\n    const cleanUp = devicesManager.continuousUpdateDevices((newList) => {\n      handleDevicesListChange(newList);\n    });\n    return () => cleanUp.then((intervalId) => clearInterval(intervalId));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [devices.length]);\n\n  const updateConnectedDevices = async () => {\n    const newList = await devicesManager.getConnectedDevices();\n    if (newList.length > 0) {\n      if (!device?.id) onSelectDevice(renderOptions(newList)[0]);\n      setDevices(newList);\n    }\n  };\n\n  // When connected devices are changed : show notification + set selected + set devicesList\n  const handleDevicesListChange = (newList) => {\n    if (newList.length > devices.length) {\n      addInfoNotification('New device connected');\n      if (!device?.id) onSelectDevice(renderOptions(newList)[0]);\n    } else if (newList.length < devices.length) {\n      addWarningNotification('Device disconnected');\n      if (newList.length === 0) onSelectDevice({ label: '--' });\n    }\n    setDevices(newList);\n  };\n\n  const onRequest = async () => {\n    document.activeElement.blur();\n    await devicesManager.requestDevices();\n    const newList = await devicesManager.getConnectedDevices();\n    handleDevicesListChange(newList);\n  };\n\n  const renderOptions = (list) =>\n    list.map((device) => ({\n      id: device.id,\n      label: 'Device-' + device.id,\n      type: 'option',\n    }));\n\n  return (\n    <div className=\"m-4 py-3 px-4 flex flex-col-reverse sm:flex-row sm:justify-between sm:items-center rounded-md bg-white shadow \">\n      <div className=\"flex flex-row flex-wrap justify-between\">\n        <div className=\"my-1 mx-2 w-full sm:w-max flex items-center justify-end flex-nowrap\">\n          <h3 className=\"mr-2 text-base font-medium text-neutral-800 \">\n            Device Type :\n          </h3>\n          <Dropdown\n            title={deviceType.label}\n            options={[typeOptions]}\n            onSelect={onSelectType}\n          />\n        </div>\n        <div className=\"my-1 mx-2 w-full sm:w-max flex items-center justify-end flex-nowrap\">\n          <h3 className=\"mr-2 text-base font-medium text-neutral-800\">\n            Select device :\n          </h3>\n          <Dropdown\n            title={device.label}\n            options={[renderOptions(devices)]}\n            onSelect={onSelectDevice}\n          />\n        </div>\n      </div>\n      <Button className=\"mb-3 sm:mb-0\" onClick={onRequest}>\n        Request device\n      </Button>\n    </div>\n  );\n};\n\nexport default SelectDeviceComponent;\n","import useNotification from '../../hooks/useNotification';\nimport devicesManager from '../../services/localDeviceService';\nimport { COMMANDS } from './../../services/devicesOptions';\n\nimport { DividerCustom, CardValue } from '../../components';\nimport { Button } from '../../components/tailwind-ui';\n\nconst GeneralTab = ({ data, device }) => {\n  const { addInfoNotification, addErrorNotification } = useNotification();\n\n  const onSendCommand = async (command) => {\n    try {\n      const resultMsg = await devicesManager.sendCommand(device.id, command);\n      console.log('runExperiment');\n      console.log(resultMsg);\n      addInfoNotification(resultMsg);\n    } catch (e) {\n      console.log('runExperiment error');\n      console.log(e);\n      addErrorNotification(e);\n    }\n    document.activeElement.blur();\n  };\n\n  return (\n    <div className=\"flex flex-col mt-2\">\n      <div className=\"flex flex-row justify-end\">\n        <Button\n          className=\"mx-2\"\n          onClick={() => onSendCommand(COMMANDS.runExperiment)}\n        >\n          Run experiment\n        </Button>\n        <Button\n          className=\"mx-2\"\n          onClick={() => onSendCommand(COMMANDS.kinetic)}\n        >\n          Run Kinetic\n        </Button>\n      </div>\n      {data?.epoch && (\n        <DividerCustom\n          title={\n            <p className=\" text-base font-medium text-black self-start\">\n              Awake time:\n              <span className=\"mx-1 text-sm text-neutral-500\">\n                {data?.epoch / 1000 + 's'}\n              </span>\n            </p>\n          }\n        />\n      )}\n      <div className=\" flex flex-row justify-around flex-wrap\">\n        {data?.parametersArray?.map((param, index) => (\n          <CardValue\n            key={index}\n            title={param.name || param.label}\n            value={param.value * param.factor}\n            unit={param.unit}\n            info={param.description}\n            className=\"w-full sm:w-1/2  md:w-1/3 lg:w-1/4 flex\"\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default GeneralTab;\n","import { useCallback, useState, useEffect } from 'react';\nimport { Table, Td, Th, useTable } from '../../components/tailwind-ui';\n\nconst HistoryTab = ({ data, deviceType }) => {\n  const [headers, setHeaders] = useState([]);\n\n  // extract headers from the first element on data (just one time whenever deviceType is changed)\n  useEffect(() => {\n    const heads =\n      data && data.length > 0\n        ? data[0].parametersArray?.map((h) => h.name || h.label)\n        : [];\n    setHeaders(['Epoch', ...heads]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [deviceType]);\n\n  const Row = useCallback((val) => {\n    const classnames = 'text-xs text-center p-2';\n    return (\n      <tr>\n        <Td compact={true} className={classnames + ' font-medium'}>\n          {val.value.epoch}\n        </Td>\n        {val.value.parametersArray?.map((p, index) => (\n          <Td key={index} compact={true} className={classnames}>\n            {p.value}\n          </Td>\n        ))}\n      </tr>\n    );\n  }, []);\n\n  const headerValues = useCallback(() => {\n    return (\n      <tr>\n        {headers?.map((h) => (\n          <Th\n            key={h}\n            className=\"p-2 text-center font-normal normal-case\"\n            compact={true}\n          >\n            {h}\n          </Th>\n        ))}\n      </tr>\n    );\n  }, [headers]);\n\n  const { pagination, data: sliceData } = useTable(data, {\n    itemsPerPage: 10,\n    withText: true,\n  });\n\n  return (\n    <div className=\"w-full p-1 overflow-x-auto\">\n      <Table\n        pagination={pagination}\n        data={sliceData.map((d) => ({ ...d, id: d.epoch }))}\n        Header={headerValues}\n        Tr={Row}\n      />\n    </div>\n  );\n};\n\nexport default HistoryTab;\n","import { useState, useEffect } from 'react';\n\nimport { Button, Dropdown } from '../../components/tailwind-ui';\nimport { CardInput, DividerCustom } from '../../components';\nimport useNotification from '../../hooks/useNotification';\nimport devicesManager from '../../services/localDeviceService';\nimport { COMMANDS } from '../../services/devicesOptions';\n\nconst intervals = [1, 2, 5, 10, 30, 60, 120, 300].map((v) => ({\n  label: v > 59 ? `${v / 60} m` : `${v} s`,\n  value: v * 1000,\n  type: 'option',\n}));\n\n/**\n *\n * @param {Object} device\n * @param {number} refreshInterval\n * @param {function} setRefreshInterval\n * @param {Object} data\n * @param {function} refreshData\n */\n\nconst ConfigTab = ({\n  device,\n  refreshInterval,\n  setRefreshInterval,\n  data,\n  refreshData,\n}) => {\n  const [writableParams, setWritableParams] = useState([]);\n  const [_refreshInterval, _setRefreshInterval] = useState({\n    label: refreshInterval / 1000 + ' s',\n    value: refreshInterval,\n    type: 'option',\n  });\n\n  const { addInfoNotification, addErrorNotification } = useNotification();\n\n  // get Writable params from data\n  useEffect(() => {\n    const parameters = data?.parameters;\n    const values =\n      parameters &&\n      Object.keys(parameters)\n        .filter((key) => parameters[key].writable)\n        .map((key) => ({ ...parameters[key], key })); // the key is used to send the update command\n    setWritableParams(values);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  const onSaveValue = async (key, value) => {\n    try {\n      console.log(key + ' is set to: ' + value);\n      await devicesManager.sendCommand(\n        device.id,\n        COMMANDS.setParameter(key, value),\n      );\n      refreshData();\n      addInfoNotification('saved', '', 1000);\n    } catch (e) {\n      addErrorNotification(e.message);\n    }\n  };\n\n  const OnRefreshIntervalChanged = (option) => {\n    _setRefreshInterval(option);\n    setRefreshInterval(option.value);\n    document.activeElement.blur();\n  };\n\n  const onReset = async () => {\n    try {\n      const resultMsg = await devicesManager.sendCommand(\n        device.id,\n        COMMANDS.reset,\n      );\n      addInfoNotification(resultMsg);\n      refreshData();\n    } catch (e) {\n      addErrorNotification(e.message);\n    }\n    document.activeElement.blur();\n  };\n\n  const onSleep = async () => {\n    try {\n      await devicesManager.sendCommand(device.id, COMMANDS.sleep);\n    } catch (e) {\n      addErrorNotification(e.message);\n    }\n    document.activeElement.blur();\n  };\n\n  return (\n    <div className=\"w-full flex flex-col \">\n      <div className=\"mt-2 flex flex-col sm:flex-row justify-between\">\n        <div className=\"my-1 mx-2 flex flex-row items-center justify-end\">\n          <p className=\"mx-1 text-sm font-medium text-neutral-700\">\n            Refresh interval :\n          </p>\n          <Dropdown\n            title={_refreshInterval.label}\n            options={[intervals]}\n            onSelect={OnRefreshIntervalChanged}\n          />\n        </div>\n        <div className=\"my-1 flex flex-row justify-end\">\n          <Button className=\"mx-2\" variant=\"white\" onClick={onSleep}>\n            Sleep\n          </Button>\n          <Button className=\"mx-2 \" variant=\"white\" onClick={onReset}>\n            Reset Device\n          </Button>\n        </div>\n      </div>\n\n      {writableParams?.length > 0 && (\n        <>\n          <DividerCustom title=\"Edit parameters\" />\n          <div className=\"flex flex-row justify-start flex-wrap\">\n            {writableParams.map((p, index) => (\n              <CardInput\n                key={index}\n                id={p.key}\n                title={p.name || p.label}\n                initialValue={p.value * p.factor}\n                placeholder={p.name}\n                unit={p.unit}\n                info={p.description}\n                onSave={onSaveValue}\n                className=\"w-full sm:w-1/2  md:w-1/3 lg:w-1/4 flex\"\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ConfigTab;\n","import React from 'react';\nimport { Button, Dropdown } from '../../components/tailwind-ui';\nimport { ReactComponent as TreeDotsIcon } from '../../assets/icons/treeDots.svg';\n\nconst AdvancedTab = () => {\n  return (\n    <div className=\"w-full   \">\n      <div className=\"flex flex-col\">\n        <div className=\"w-full my-1 md:max-w-md flex flex-row\">\n          <input\n            className=\"w-full py-1 px-2 border rounded-md\"\n            placeholder=\"h (for help)\"\n          />\n          <Button className=\"mx-2 md:mr-0\" variant=\"primary\" size=\"small\">\n            Send\n          </Button>\n          {/* display just in small screens */}\n          <div className=\"flex ml-4 self-center md:hidden\">\n            <Dropdown\n              options={[\n                [\n                  { label: 'Reset', type: 'option' },\n                  { label: 'Sleep', type: 'option' },\n                  { label: 'Refresh', type: 'option' },\n                ],\n              ]}\n            >\n              <TreeDotsIcon className=\"w-5 h-5\" fill=\"currentColor\" />\n            </Dropdown>\n          </div>\n        </div>\n        <div className=\"w-full mt-2 flex flex-col md:flex-row md:max-w-2xl\">\n          <div className=\"w-full h-96 md:mr-2 flex md:flex-1 border rounded-md overflow-auto overflow-x-auto\"></div>\n          <div className=\"hidden flex-col md:flex\">\n            <Button className=\"m-1\" variant=\"white\" size=\"xSmall\">\n              Reset\n            </Button>\n            <Button className=\"m-1\" variant=\"white\" size=\"xSmall\">\n              Sleep\n            </Button>\n            <Button className=\"m-1\" variant=\"white\" size=\"xSmall\">\n              Refresh\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdvancedTab;\n","import { useState, useEffect, useCallback } from 'react';\nimport { parseCurrentSettings } from 'legoino-util';\n\nimport { HorizontalNavigation } from '../../components/tailwind-ui';\nimport useNotification from '../../hooks/useNotification';\nimport devicesManager from '../../services/localDeviceService';\nimport { COMMANDS } from './../../services/devicesOptions';\nimport SelectDeviceComponent from './SelectDeviceComponent';\nimport GeneralTab from './GeneralTab';\nimport HistoryTab from './HistoryTab';\nimport ConfigTab from './ConfigTab';\nimport AdvancedTab from './AdvancedTab';\n\nconst tabs = ['General', 'History', 'Advanced', 'Configuration'].map((v) => ({\n  value: v,\n  label: v,\n}));\n\nconst LocalDevices = () => {\n  const [currentData, setCurrentData] = useState({}); // data to display\n  const [allData, setAllData] = useState([]); // data history\n  const [refreshInterval, setRefreshInterval] = useState(10000);\n\n  const [selectedDevice, setSelectedDevice] = useState();\n  const [selectedType, setSelectedType] = useState();\n  const [selectedTab, setSelectedTab] = useState(tabs[0]);\n\n  const { addErrorNotification } = useNotification();\n\n  // get data from device\n  const getData = useCallback(\n    async (deviceId) => {\n      if (deviceId) {\n        try {\n          const compressedResults = await devicesManager.sendCommand(\n            deviceId,\n            COMMANDS.compactSettings,\n          );\n          const results = parseCurrentSettings(compressedResults, {\n            kind: selectedType?.label,\n            parameterInfo: true,\n            parametersArray: true,\n          });\n          setCurrentData(results);\n          setAllData([results, ...allData]);\n        } catch (e) {\n          addErrorNotification(e.message);\n        }\n      } else {\n        setCurrentData({}); // Hide tabs (no data to display)\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [allData, selectedType?.label],\n  );\n\n  // Listen to data from device every {refreshInterval}\n  useEffect(() => {\n    if (selectedDevice?.id) {\n      const timeout = setInterval(\n        () => getData(selectedDevice?.id),\n        refreshInterval,\n      );\n      return () => {\n        clearInterval(timeout);\n      };\n    }\n  }, [selectedDevice?.id, refreshInterval, getData]);\n\n  // if selectedType or selectedDevice changed: delete HistoryData + get the new data\n  useEffect(() => {\n    setAllData([]);\n    getData(selectedDevice?.id);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedType?.label, selectedDevice?.id]);\n\n  const renderTabContent = (tab) => {\n    switch (tab.value) {\n      case 'General':\n        return <GeneralTab data={currentData} device={selectedDevice} />;\n      case 'History':\n        return <HistoryTab data={allData} deviceType={selectedType?.label} />;\n      case 'Advanced':\n        return <AdvancedTab />;\n      case 'Configuration':\n        return (\n          <ConfigTab\n            device={selectedDevice}\n            refreshInterval={refreshInterval}\n            setRefreshInterval={setRefreshInterval}\n            data={currentData}\n            refreshData={() => getData(selectedDevice?.id)}\n          />\n        );\n      default:\n        return <div />;\n    }\n  };\n\n  return (\n    <>\n      <SelectDeviceComponent\n        deviceType={selectedType}\n        onSelectType={setSelectedType}\n        device={selectedDevice}\n        onSelectDevice={setSelectedDevice}\n      />\n      {selectedDevice?.id ? (\n        <div className=\"mx-4 pb-4\">\n          <HorizontalNavigation\n            onSelect={setSelectedTab}\n            selected={selectedTab}\n            options={tabs}\n          />\n          <div className=\"p-3 mt-4 sm:m-0 flex flex-col items-center rounded-md sm:rounded-t-none bg-white shadow \">\n            {renderTabContent(selectedTab)}\n          </div>\n        </div>\n      ) : (\n        <div className=\"mx-5 mt-16 flex flex-col items-center\">\n          <h3 className=\"text-base font-bold text-gray-300 leading-loose\">\n            No connected Device\n          </h3>\n          <h3 className=\"text-sm font-base text-gray-300\">\n            Please plug your device into the computer\n          </h3>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default LocalDevices;\n"],"sourceRoot":""}