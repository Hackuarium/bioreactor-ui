{"version":3,"sources":["services/devicesOptions.js","services/mqttService.js","services/db.js","services/broadCastDeviceService.js","pages/BroadcastDeviceDetails/deviceParameters.jsx","pages/BroadcastDeviceDetails/DataTable.jsx","pages/BroadcastDeviceDetails/ActualDetails.jsx","pages/BroadcastDeviceDetails/DetailsPlot.jsx","pages/BroadcastDeviceDetails/Details.jsx","pages/BroadcastDeviceDetails/index.jsx"],"names":["DEVICES_DB","DEFAULT_PORT","DEFAULT_PROTOCOL","DEVICE_PROTOCOLS","DEVICE_KINDS","Object","keys","legoinoDeviceInformation","map","key","kind","COMMANDS","compactSettings","runExperiment","kinetic","reset","sleep","setParameter","label","value","client","DB","dbName","connect","PouchDB","getInfo","Promise","resolve","reject","db","info","then","res","close","catch","err","getAll","options","a","allDocs","include_docs","get","docId","Error","put","doc","update","_id","resGet","_rev","resPut","errPut","remove","resRm","errRm","url","protocol","port","username","password","onSuccess","onError","connected","hostname","isFunction","brokerUrl","mqtt","keepalive","reconnectPeriod","on","console","log","stream","error","name","end","getClientInstance","subscribe","topic","onMessageReceived","qos","payload","data","parseCurrentSettings","toString","unsubscribe","disconnect","callback","throwDbError","additionalMsg","message","getSavedDevices","rows","i","e","getDevice","deviceId","updateDevice","deviceData","deleteDevice","deviceID","addDevice","connectDevice","mqttClient","dbClient","onSubscribe","Date","now","getAllData","getLastData","descending","limit","getPageData","skip","getAllDataCount","total_rows","testDeviceConnection","DEVICES_PARAMETERS","parameters","variable","description","factor","unit","writable","series","color","getParams","type","filter","p","DataTable","props","useState","setParameters","useEffect","DetailType","params","EpochToDate","epoch","_epoch","getTimezoneOffset","className","Header","length","Tr","toLocaleString","previousData","pagination","itemsPerPage","onPageChange","page","setCurrentPage","currentPage","totalCount","count","withText","ActualDetails","index","title","DetailsPlot","setSeries","setData","allData","setAllData","lines","setLines","setType","pr","getSeries","t","forEach","s","table","d","push","x","y","getSeriesLines","dataItems","xAxis","yAxis","lineStyle","stroke","strokeWidth","displayMarker","markerShape","onSelect","width","height","margin","bottom","left","top","right","seriesViewportStyle","id","position","labelSpace","paddingEnd","paddingStart","scale","Details","DeviceDetails","match","setCount","selected","setSelected","setPreviousData","deviceClient","setDeviceClient","deviceInfos","setDeviceInfos","deviceInfo","result","style","backgroundColor","borderRadius","option","String"],"mappings":"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","file":"static/js/9.a44ca20e.chunk.js","sourcesContent":["import legoinoDeviceInformation from 'legoino-device-information';\n\n// Default Values\n\nexport const DEVICES_DB = 'BIOREACTOR_devices';\nexport const DEFAULT_PORT = '80'; // old '8080'\nexport const DEFAULT_PROTOCOL = 'http'; // old tcp\n\n// Static Values\n\nexport const DEVICE_TYPE = {\n  broadcast: 'broadcast',\n  interactive: 'interactive',\n  local: 'local',\n};\n\nexport const DEVICE_PROTOCOLS = ['http', 'tcp', 'wss'];\n\nexport const DEVICE_KINDS = Object.keys(legoinoDeviceInformation).map(\n  (key) => legoinoDeviceInformation[key].kind,\n);\n\nexport const DEVICE_STATUS = {\n  opening: 1,\n  opened: 2,\n  closed: 3,\n  missing: 9,\n  error: 10,\n};\n\nexport const COMMANDS = {\n  compactSettings: 'uc',\n  runExperiment: 'r',\n  kinetic: 'k',\n  reset: 'ur1234',\n  sleep: 'l',\n  setParameter: (label, value) => `${label}${value}`,\n};\n","import mqtt from 'mqtt';\nimport { isFunction } from 'lodash';\nimport { parseCurrentSettings } from 'legoino-util';\n\n// Private Functions\nlet client;\n\nconst getClientInstance = (\n  url,\n  protocol,\n  port,\n  username,\n  password,\n  onSuccess,\n  onError,\n) => {\n  // if client is already connected\n  if (client && client.connected && client.options.hostname === url)\n    isFunction(onSuccess) && onSuccess(client);\n\n  const brokerUrl = `${protocol}://${url}:${port}`;\n  client = mqtt.connect(brokerUrl, {\n    keepalive: 300,\n    reconnectPeriod: 5000,\n  });\n\n  client.on('connect', () => {\n    console.log(`connected to ${brokerUrl} : ${client.connected}`);\n    isFunction(onSuccess) && onSuccess(client);\n  });\n\n  client.stream.on('error', (err) => {\n    console.log(err);\n    const error = new Error(`Couldn't connect to BROKER \"${brokerUrl}\"`);\n    error.name = 'Mqtt Error';\n    client.end();\n    isFunction(onError) && onError(error);\n  });\n};\n\nconst parseToJson = (data) => {\n  return parseCurrentSettings(data.toString(), {});\n};\n\n// Public Functions\n\nexport const connect = (url, protocol, port, username, password) => {\n  const clientPromise = new Promise((resolve, reject) => {\n    getClientInstance(\n      url,\n      protocol,\n      port,\n      username,\n      password,\n      (client) => resolve(client),\n      (error) => reject(error),\n    );\n  });\n  return clientPromise;\n};\n\n// TO DO: update function\n\nexport const subscribe = (client, topic, onMessageReceived, onError) => {\n  client.subscribe(topic, { qos: 2 }, (err) => {\n    err\n      ? isFunction(onError) && onError(err)\n      : client.on('message', (topic, payload) => {\n          isFunction(onMessageReceived) &&\n            onMessageReceived(parseToJson(payload));\n        });\n  });\n\n  const unsubscribe = (onError) => client.unsubscribe(topic, {}, onError);\n\n  return unsubscribe;\n};\n\nexport const disconnect = (client, callback) =>\n  client.end(() => {\n    console.log(`mqtt broker \"${client.options.hostname}\" disconnected`);\n    isFunction(callback) && callback();\n  });\n","import PouchDB from 'pouchdb';\n\n// Wrap Db interface in case of switching to another Db other than \"PouchDb\"\n\nconst DB = (dbName) => {\n  const connect = () => new PouchDB(dbName);\n\n  // DB operations to return\n\n  const getInfo = () =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      db.info()\n        .then((res) => db.close(() => resolve(res)))\n        .catch((err) => db.close(() => reject(err)));\n    });\n\n  const getAll = async (options) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      db.allDocs({\n        include_docs: true,\n        ...options,\n      })\n        .then((res) => db.close(() => resolve(res)))\n        .catch((err) => db.close(() => reject(err)));\n    });\n\n  const get = (docId) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      docId\n        ? db\n            .get(docId)\n            .then((res) => db.close(() => resolve(res)))\n            .catch((err) => db.close(() => reject(err)))\n        : reject(new Error('Doc fetch : docId is required'));\n    });\n\n  const put = (doc) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      !('_id' in doc)\n        ? reject(new Error('Doc create : _id is required in doc'))\n        : db\n            .put(doc)\n            .then((res) => db.close(() => resolve(res)))\n            .catch((err) => db.close(() => reject(err)));\n    });\n\n  const update = (doc) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      !('_id' in doc)\n        ? reject(new Error('Doc update : _id is required in doc'))\n        : db\n            .get(doc._id)\n            .then((resGet) =>\n              db\n                .put({ ...doc, _rev: resGet._rev })\n                .then((resPut) => db.close(() => resolve(resPut)))\n                .catch((errPut) => reject(errPut)),\n            )\n            .catch((err) => db.close(() => reject(err)));\n    });\n\n  const remove = (docId) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      docId\n        ? db\n            .get(docId)\n            .then((resGet) =>\n              db\n                .remove({ _id: docId, _rev: resGet._rev })\n                .then((resRm) => db.close(() => resolve(resRm)))\n                .catch((errRm) => reject(errRm)),\n            )\n            .catch((err) => db.close(() => reject(err)))\n        : reject(new Error('Doc remove : docId is required'));\n    });\n\n  return {\n    getInfo,\n    getAll,\n    get,\n    put,\n    update,\n    remove,\n  };\n};\n\nexport default DB;\n","import DB from './db';\nimport { isFunction } from 'lodash';\nimport { connect, subscribe, disconnect } from './mqttService';\nimport { DEVICES_DB, DEFAULT_PORT, DEFAULT_PROTOCOL } from './devicesOptions';\n\n// Private Functions\n\nconst throwDbError = (error, additionalMsg) => {\n  console.log(error);\n  const err = new Error(`${additionalMsg} \\n${error?.message}`);\n  err.name = 'DATABASE_ERROR';\n  throw err;\n};\n\n// Public Functions\n\n// export const getSavedDevices = async () => {\n//   const dbClient = DB(DEVICES_DB);\n//   const list = await dbClient.getAll();\n//   return list.map((item) => item.doc);\n// };\nexport const getSavedDevices = async () =>\n  DB(DEVICES_DB)\n    .getAll()\n    .then((res) => res.rows.map((i) => i.doc))\n    .catch((e) => throwDbError(e, `Get locally saved devices error`));\n\n// export const getDevice = async (deviceId) => {\n//   const dbClient = db.connect(DEVICES_DB);\n//   const device = await dbClient.get(deviceId);\n//   return device;\n// };\nexport const getDevice = async (deviceId) =>\n  DB(DEVICES_DB)\n    .get(deviceId)\n    .catch((e) => throwDbError(e, `Get device error`));\n\n// export const updateDevice = async (deviceData) => {\n//   const dbClient = db.connect(DEVICES_DB);\n//   return dbClient.update(deviceData);\n// };\nexport const updateDevice = async (deviceData) =>\n  DB(DEVICES_DB)\n    .update(deviceData)\n    .catch((e) => throwDbError(e, `Update device error`));\n\n// export const deleteDevice = (deviceID) => {\n//   const dbClient = db.connect(DEVICES_DB);\n//   return dbClient.remove(deviceID).catch((e) => {\n//     const err = new Error(`Couldn't remove record: ${e.message}`);\n//     err.name = 'Database Error';\n//     throw err;\n//   });\n// };\nexport const deleteDevice = (deviceID) =>\n  DB(DEVICES_DB)\n    .remove(deviceID)\n    .catch((e) => throwDbError(e, `Delete device error`));\n\n// add device to devices DB\n\nexport const addDevice = ({\n  kind,\n  name,\n  url,\n  protocol = DEFAULT_PROTOCOL,\n  port = DEFAULT_PORT,\n  topic,\n  username,\n  password,\n}) =>\n  DB(DEVICES_DB)\n    .put({\n      _id: `${kind}_${name}`,\n      name,\n      url,\n      protocol,\n      port,\n      topic,\n      kind,\n      username,\n      password,\n    })\n    .catch((e) =>\n      e.name === 'conflict'\n        ? throwDbError(e, `Device name must be unique`)\n        : throwDbError(e, `Insert device error`),\n    );\n\n// export const addDevice2 = (props) => {\n//   const dbClient = db.connect(DEVICES_DB);\n//   const { kind, name, url, protocol, port, topic, username, password } = props;\n\n//   // make sure all props are defined\n//   for (let key in props)\n//     if (!props[key]) throw new Error(`Field missing [${key}]`);\n\n//   const id = `${kind}_${name}`;\n\n//   return dbClient\n//     .get(id)\n//     .then((r) => {\n//       // the device already exists in DB\n//       const err = new Error('Another device exists with the same name');\n//       err.payload = { exist: true, payload: r };\n//       throw err;\n//     })\n//     .catch((e) => {\n//       // if the device exists in DB\n//       if (e.payload && e.payload.exist) throw e;\n//       // the device does not exist in DB\n//       return dbClient\n//         .put({\n//           _id: id,\n//           name,\n//           url,\n//           protocol,\n//           port,\n//           topic,\n//           kind,\n//           username,\n//           password,\n//         })\n//         .then((r) => {\n//           // inserted successfully\n//           return { exist: false, inserted: true, payload: r };\n//         })\n//         .catch((e) => {\n//           // DB error\n//           const err = new Error(e.toString());\n//           err.payload = {\n//             exist: false,\n//             inserted: false,\n//             payload: e.toString(),\n//           };\n//           throw err;\n//         });\n//     });\n// };\n\n//\n// connect to broadcast device & return a client instance with {subscribe, disconnect, getAllData, getLastData}\nexport const connectDevice = ({\n  _id,\n  name,\n  kind,\n  deviceId = _id || `${kind}_${name}`,\n  url,\n  protocol = DEFAULT_PROTOCOL,\n  port = DEFAULT_PORT,\n  topic,\n  username,\n  password,\n}) => {\n  const clientPromise = new Promise(async (resolve, reject) => {\n    try {\n      const mqttClient = await connect(url, protocol, port, username, password);\n      const dbClient = DB(deviceId);\n\n      const _subscribe = (onSubscribe, onError) => {\n        const unsubscribe = subscribe(\n          mqttClient,\n          topic,\n          (payload) => {\n            dbClient.put({ _id: Date.now().toString(), ...payload });\n            isFunction(onSubscribe) && onSubscribe(payload);\n          },\n          onError,\n        );\n        return unsubscribe;\n      };\n\n      const _disconnect = () => disconnect(mqttClient);\n\n      const getAllData = () =>\n        dbClient.getAll().then((res) => res.rows.map((i) => i.doc));\n\n      const getLastData = () =>\n        dbClient\n          .getAll({ descending: true, limit: 1 })\n          .then((res) => res.rows.map((i) => i.doc));\n\n      const getPageData = (skip, limit) =>\n        dbClient\n          .getAll({ descending: true, skip: skip, limit: limit })\n          .then((res) => res.rows.map((i) => i.doc));\n\n      const getAllDataCount = () =>\n        dbClient.getAll().then((res) => res.total_rows);\n\n      resolve({\n        subscribe: _subscribe,\n        disconnect: _disconnect,\n        getAllData,\n        getLastData,\n        getPageData,\n        getAllDataCount,\n      });\n    } catch (e) {\n      // connection error\n      reject(e);\n    }\n  });\n\n  return clientPromise;\n};\n\nexport const testDeviceConnection = ({\n  url,\n  protocol = DEFAULT_PROTOCOL,\n  port = DEFAULT_PORT,\n  topic,\n  username,\n  password,\n}) => {\n  const clientPromise = new Promise(async (resolve, reject) => {\n    try {\n      const mqttClient = await connect(url, protocol, port, username, password);\n      const unsubscribe = subscribe(\n        mqttClient,\n        topic,\n        (payload) => {\n          unsubscribe();\n          disconnect(mqttClient, () => resolve(payload));\n        },\n        reject,\n      );\n    } catch (e) {\n      // connection error\n      reject(e);\n    }\n  });\n\n  return clientPromise;\n};\n","export const DEVICES_PARAMETERS = [\n    {\n        label:'Temperature',\n        parameters:[\n            {\n                label: 'Date',\n                variable: 'date',\n                name: 'Date',\n                description: '',\n                factor: 1,\n                unit: '',\n                writable: false,\n                series:false\n            },\n            {\n                label: 'A',\n                variable: 'cpuTemperature',\n                name: 'CPU Temperature',\n                description: '',\n                factor: 1,\n                unit: '°C',\n                writable: false,\n                series:true,\n                color:'red'\n            }\n        ]\n    },\n    {\n        label:'Load',\n        parameters:[\n            {\n                label: 'Date',\n                variable: 'cpuTemperature',\n                name: 'Date',\n                description: '',\n                factor: 1,\n                unit: '',\n                writable: false,\n            },\n            {\n                label: 'H',\n                variable: 'load',\n                name: 'Load',\n                description: 'Total load',\n                factor: 1,\n                unit: '%',\n                writable: false,\n                series:true,\n                color:'red'\n              },\n          \n              {\n                label: 'I',\n                variable: 'userLoad',\n                name: 'User load',\n                description: 'Load from user',\n                factor: 1,\n                unit: '%',\n                writable: false,\n                series:true,\n                color:'blue'\n              },\n          \n              {\n                label: 'J',\n                variable: 'systemLoad',\n                name: 'System load',\n                description: 'Load from system',\n                factor: 1,\n                unit: '%',\n                writable: false,\n                series:true,\n                color:'green'\n              },\n          \n              {\n                label: 'K',\n                variable: 'niceLoad',\n                name: 'Nice load',\n                description: 'Load for Nice',\n                factor: 1,\n                unit: '%',\n                writable: false,\n                series:false,\n                color:'red'\n              },\n          \n              {\n                label: 'L',\n                variable: 'idleLoad',\n                name: 'Idle load',\n                description: 'Idle percent of time',\n                factor: 1,\n                unit: '%',\n                writable: false,\n                series:false,\n                color:'red'\n              },\n          \n              {\n                label: 'M',\n                variable: 'irqLoad',\n                name: 'IRQ load',\n                description: 'Load due to IRQ',\n                factor: 1,\n                unit: '%',\n                writable: false,\n                series:false,\n                color:'red'\n              },\n        ]\n    },\n    {\n        label:'FS',\n        parameters:[\n            {\n                label: 'Date',\n                variable: 'cpuTemperature',\n                name: 'Date',\n                description: '',\n                factor: 1,\n                unit: '',\n                writable: false,\n                series:false,\n                color:'red'\n            },\n            {\n                label: 'N',\n                variable: 'fsMinimalUse',\n                name: 'FS minimal use',\n                description: 'Minimal percent spaced used in a filesystem',\n                factor: 1,\n                unit: '%',\n                writable: false,\n                series:true,\n                color:'green'\n              },\n              {\n                label: 'O',\n                variable: 'fsMaximalUse',\n                name: 'FS maximal use',\n                description: 'Maximal percent spaced used in a filesystem',\n                factor: 1,\n                unit: '%',\n                writable: false,\n                series:true,\n                color:'red'\n              }\n        ]\n    },\n    {\n        label:'I/O',\n        parameters:[\n            {\n                label: 'Date',\n                variable: 'cpuTemperature',\n                name: 'Date',\n                description: '',\n                factor: 1,\n                unit: '',\n                writable: false,\n                series:false,\n                color:'red'\n            },\n            {\n                label: 'D',\n                variable: 'fsRead',\n                name: 'FS Read',\n                description: 'File system read in kb',\n                factor: 1,\n                unit: 'kb',\n                writable: false,\n                series:true,\n                color:'blue'\n              },\n          \n              {\n                label: 'E',\n                variable: 'fsWrite',\n                name: 'FS Write',\n                description: 'File system read in kb',\n                factor: 1,\n                unit: 'kb',\n                writable: false,\n                series:true,\n                color:'black'\n              },\n          \n              {\n                label: 'F',\n                variable: 'networkRead',\n                name: 'Network Read',\n                description: 'File system read in kb',\n                factor: 1,\n                unit: 'kb',\n                writable: false,\n                series:true,\n                color:'red'\n              },\n          \n              {\n                label: 'G',\n                variable: 'networkWrite',\n                name: 'Network Write',\n                description: 'File system read in kb',\n                factor: 1,\n                unit: 'kb',\n                writable: false,\n                series:true,\n                color:'green'\n              },\n        ]\n    }\n];\n\nexport const getParams=(type)=>{\n    return DEVICES_PARAMETERS.filter(p=>p.label===type)[0]? DEVICES_PARAMETERS.filter(p=>p.label===type)[0].parameters:[]\n}\n\nexport const getSeries=(type)=>{\n    return DEVICES_PARAMETERS.filter(p=>p.label===type)[0]? DEVICES_PARAMETERS.filter(p=>p.label===type)[0].parameters.filter(pr=>pr.series===true):[]\n}","import { useState, useEffect } from 'react';\n\nimport { Table } from '../../components/tailwind-ui';\nimport { getParams } from './deviceParameters';\n\nconst DataTable = (props) => {\n  // const [currentPage, setCurrentPage] = useState(1);\n  // const [count, setCount] = useState(50);\n  const [parameters, setParameters] = useState([]);\n\n  useEffect(() => {\n    if (props.DetailType) {\n      const params = getParams(props.DetailType);\n      setParameters(params);\n    }\n    // setCount(props.previousData.length);\n  }, [props]);\n\n  const EpochToDate = (epoch) => {\n    if (epoch < 10000000000) epoch *= 1000; // convert to milliseconds (Epoch is usually expressed in seconds, but Javascript uses Milliseconds)\n    let _epoch = epoch + new Date().getTimezoneOffset() * -1; //for timeZone\n    return new Date(_epoch);\n  };\n\n  return (\n    <div className=\"my-1 overflow-scroll w-24 min-w-full md:min-w-0  bg-white w-full rounded-lg \">\n      <div className=\"flex space-x-100 m-4\">\n        <div className=\"flex-1\">\n          <h2 className=\"text-2xl \">Previous Details</h2>\n          <p className=\"text-sm text-gray-500\">\n            Previous details of the device.\n          </p>\n        </div>\n      </div>\n      <Table\n        className=\"min-w-full table-auto \"\n        Header={() =>\n          parameters.length !== 0 ? (\n            <tr className=\"bg-primary-900\">\n              {parameters.map((p, key) => (\n                <th key={key} className=\"px-4 py-2\">\n                  <span className=\"text-white\">{p.name + ' ' + p.unit}</span>\n                </th>\n              ))}\n            </tr>\n          ) : null\n        }\n        Tr={({ value }) =>\n          value && value.parameters ? (\n            <tr className=\"bg-white border-4 border-gray-200 text-center\">\n              {parameters.map((p, key) => {\n                return p.name === 'Date' ? (\n                  <td className=\"px-4 py-2\" key={key}>\n                    <span>{EpochToDate(value.epoch).toLocaleString()}</span>\n                  </td>\n                ) : (\n                  <td className=\"px-4 py-2\" key={key}>\n                    <span>{value.parameters[p.label]}</span>\n                  </td>\n                );\n              })}\n            </tr>\n          ) : null\n        }\n        data={props.previousData}\n        pagination={{\n          itemsPerPage: 100,\n          onPageChange: (page) => {\n            props.setCurrentPage(page);\n          },\n          page: props.currentPage,\n          totalCount: props.count,\n          withText: true,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default DataTable;\n","import { useState, useEffect } from 'react';\n\nimport { getParams } from './deviceParameters';\nimport { CardValue } from '../../components';\n\nconst ActualDetails = (props) => {\n  const [parameters, setParameters] = useState([]);\n\n  useEffect(() => {\n    if (props.DetailType) {\n      //   console.log(props.data);\n      const params = getParams(props.DetailType);\n      setParameters(params);\n    }\n  }, [props]);\n\n  return (\n    <div>\n      {parameters.length !== 0 ? (\n        <div className=\"flex flex-row justify-start flex-wrap\">\n          {parameters.map((p, index) =>\n            p.name !== 'Date' && props.data[0] ? (\n              <CardValue\n                key={index}\n                title={p.name}\n                value={props.data[0].parameters[p.label]}\n                unit={p.unit}\n                info={p.description}\n                className=\"w-full flex sm:w-1/3 md:w-1/4 lg:w-1/5 \"\n              />\n            ) : null,\n          )}\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default ActualDetails;\n","/* eslint-disable no-unused-vars */\nimport { useState, useEffect } from 'react';\nimport { Axis, LineSeries, Plot, Heading, Legend } from 'react-plot';\nimport { xBoxPlot } from 'ml-spectra-processing';\n\nimport { Dropdown } from '../../components/tailwind-ui';\nimport { getSeries } from './deviceParameters';\n\nconst DetailsPlot = (props) => {\n  const [series, setSeries] = useState([]);\n  const [data, setData] = useState([]);\n  const [allData, setAllData] = useState([]);\n  const [lines, setLines] = useState();\n  const [type, setType] = useState();\n  const [groupedBy, setGroupedBy] = useState('');\n\n  useEffect(() => {\n    setType(props.DetailType);\n  }, [props.DetailType]);\n\n  useEffect(() => {\n    /*var x = xBoxPlot([1,2,3,4,5,6])\n      console.log(x)\n      console.log(type)*/\n    if (type) {\n      setSeries([]);\n      setSeries(getSeries(type));\n    }\n  }, [type]);\n\n  useEffect(() => {\n    if (props.allData.length !== 0) {\n      setAllData(props.allData);\n    }\n  }, [props]);\n\n  const sameHour = (d1, d2) => {\n    console.log(d1.toLocaleString());\n    console.log(d2.toLocaleString());\n    console.log(\n      d1.getFullYear() === d2.getFullYear() &&\n        d1.getMonth() === d2.getMonth() &&\n        d1.getDate() === d2.getDate() &&\n        d1.getHours() === d2.getHours(),\n    );\n    return (\n      d1.getFullYear() === d2.getFullYear() &&\n      d1.getMonth() === d2.getMonth() &&\n      d1.getDate() === d2.getDate() &&\n      d1.getHours() === d2.getHours()\n    );\n  };\n\n  const sameDay = (d1, d2) => {\n    return (\n      d1.getFullYear() === d2.getFullYear() &&\n      d1.getMonth() === d2.getMonth() &&\n      d1.getDate() === d2.getDate()\n    );\n  };\n\n  const sameMonth = (d1, d2) => {\n    return (\n      d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth()\n    );\n  };\n\n  const sameYear = (d1, d2) => {\n    return d1.getFullYear() === d2.getFullYear();\n  };\n\n  const EpochToDate = (epoch) => {\n    if (epoch < 10000000000) epoch *= 1000; // convert to milliseconds (Epoch is usually expressed in seconds, but Javascript uses Milliseconds)\n    let _epoch = epoch + new Date().getTimezoneOffset() * -1; //for timeZone\n    return new Date(_epoch);\n  };\n\n  useEffect(() => {\n    console.log(series);\n    var t = [];\n    if (series && series.length !== 0)\n      series.forEach((s) => {\n        var table = [];\n        allData.forEach((d, key) => {\n          console.log(key /*EpochToDate(d.epoch).toLocaleString()*/);\n          if (d.parameters)\n            table.push({\n              x: key /*EpochToDate(d.epoch)*/,\n              y: d.parameters[s.label],\n            });\n        });\n\n        console.log(table);\n        return t.push({ label: s.name, data: table });\n      });\n    setData(t);\n    console.log(t[0]);\n  }, [series, allData]);\n\n  useEffect(() => {\n    setLines(getSeriesLines());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, type]);\n\n  const getDataOfSeries = (label) => {\n    var seriesData = data.filter((d) => d.label === label)[0]\n      ? data.filter((d) => d.label === label)[0].data\n      : null;\n\n    /*if(seriesData.length!==0){\n        var groupedDataTable=[]\n        var minimalDate = /*EpochToDate(*/ //seriesData[0].x//)\n    /*var maximalDate = /*EpochToDate(*/ //seriesData[seriesData.length-1].x//)\n\n    //if(groupedBy==='Hour'){\n    /*var lastDate = minimalDate\n          var stop = false\n          while( lastDate.getTime()!==maximalDate.getTime() && !stop){\n            console.log('')\n            \n            var dataTable = []\n            seriesData.map(\n              d=>{\n                console.log(sameHour(d.x,lastDate))\n                if(sameHour(d.x,lastDate)) {\n                  dataTable.push(d)\n                }\n              })\n            console.log(dataTable)\n            if(dataTable.length >= 5){\n              var t = dataTable.map(d=>d.y)\n              groupedDataTable.push(xBoxPlot(t))\n            } \n            if(dataTable.length===0){\n              stop=true\n            }\n            console.log(lastDate)\n            var next = seriesData.filter(\n              (d)=>{\n                 return !sameHour(d.x,lastDate) && sameDay(d.x,lastDate)\n              })[0]\n\n              var xd= new Date()\n            if(next){\n              console.log(next.x)\n              lastDate = seriesData.filter(d=>\n                (d.x.getHours()>lastDate.getHours()) && (sameDay(d.x,lastDate) )\n              )[0]?seriesData.filter(d=>\n                (d.x.getHours()>lastDate.getHours()) && (sameDay(d.x,lastDate) )\n              )[0].x:xd\n              console.log(lastDate)\n            }\n              if(lastDate instanceof Date && lastDate===xd){\n                stop=true\n              }\n            //lastDate=new Date(lastDate.getFullYear(),lastDate.getMonth(),lastDate.getDate(),lastDate.getHours()+1)\n          }\n\n          console.log(groupedDataTable)\n          \n        //}\n      }*/\n\n    if (groupedBy === 'Day') {\n    }\n    if (groupedBy === 'Month') {\n    }\n    if (groupedBy === 'Year') {\n    }\n\n    var fullSeries = [\n      {\n        x: '',\n        min: '',\n        max: '',\n        Q1: '',\n        Q2: '',\n        Q3: '',\n      },\n    ];\n    return seriesData;\n  };\n\n  const getSeriesLines = () => {\n    var lines = [];\n\n    if (series && series.length !== 0) {\n      series.forEach((s, key) => {\n        var dataItems = getDataOfSeries(s.name);\n\n        lines.push(\n          <LineSeries\n            key={key}\n            data={dataItems}\n            xAxis=\"x\"\n            yAxis=\"y\"\n            lineStyle={{ stroke: s.color, strokeWidth: 2 }}\n            label={s.name}\n            displayMarker\n            markerShape=\"circle\"\n          />,\n        );\n      });\n    }\n    return lines;\n  };\n\n  //console.log(lines)\n\n  const data1 = [\n    { x: 0, y: 0 },\n    { x: 1, y: 2 },\n    { x: 2, y: 5 },\n    { x: 3, y: 9 },\n    { x: 4, y: 16 },\n    { x: 5, y: 22 },\n    { x: 6, y: 26 },\n    { x: 7, y: 28 },\n    { x: 10, y: 28 },\n  ];\n\n  return (\n    <div>\n      <div className=\"flex space-x-100 m-4\">\n        <div className=\"flex-1\">\n          <h2 className=\"text-2xl \">Variations Chart</h2>\n          <p className=\"text-sm text-gray-500\">\n            Chart of variations of the device.\n          </p>\n        </div>\n        <div className=\"flex-2 object-right\">\n          <Dropdown\n            onSelect={function noRefCheck() {}}\n            options={[\n              [\n                {\n                  label: '1 hour',\n                  type: 'option',\n                },\n                {\n                  label: '1 day',\n                  type: 'option',\n                },\n                {\n                  label: '1 month',\n                  type: 'option',\n                },\n                {\n                  label: '1 year',\n                  type: 'option',\n                },\n              ],\n            ]}\n            title=\"Display per\"\n          />\n        </div>\n      </div>\n\n      <div className=\"h-max flex justify-center items-center rounded-md bg-white shadow\">\n        <Plot\n          width={900}\n          height={500}\n          //margin={{ bottom: 45, left: 90, top: 40, right: 20 }}\n          margin={{ bottom: 50, left: 55, top: 20, right: 20 }}\n          seriesViewportStyle={{\n            stroke: 'black',\n            strokeWidth: 0.4,\n          }}\n        >\n          <Heading title={props.Header} />\n\n          <Axis\n            id=\"x\"\n            position=\"bottom\"\n            label=\"Time\"\n            labelSpace={25}\n            paddingEnd={0.1}\n            paddingStart={0.1}\n          />\n          <Axis\n            id=\"y\"\n            position=\"left\"\n            label=\"%\"\n            scale=\"log\"\n            labelSpace={65}\n            paddingStart={0.1}\n            paddingEnd={0.1}\n          />\n\n          {lines}\n\n          <Legend position=\"embedded\" bottom=\"80\" left=\"0\"></Legend>\n        </Plot>\n      </div>\n    </div>\n  );\n};\n\nexport default DetailsPlot;\n","import { useEffect } from 'react';\nimport DataTable from './DataTable';\nimport ActualDetails from './ActualDetails';\nimport DetailsPlot from './DetailsPlot';\n\nconst Details = (props) => {\n  useEffect(() => {\n    //console.log(props.data)\n  }, [props]);\n\n  return (\n    <div className=\"m-2 \">\n      <ActualDetails DetailType={props.DetailType} data={props.data} />\n\n      <DetailsPlot\n        allData={props.allData}\n        previousData={props.previousData}\n        DetailType={props.DetailType}\n        Header={props.DetailType + ' Variation Chart'}\n      />\n\n      <DataTable\n        currentPage={props.currentPage}\n        setCurrentPage={(p) => props.setCurrentPage(p)}\n        count={props.count}\n        previousData={props.previousData}\n        DetailType={props.DetailType}\n      />\n    </div>\n  );\n};\n\nexport default Details;\n","import { useState, useEffect } from 'react';\nimport { HorizontalNavigation } from '../../components/tailwind-ui';\n\nimport {\n  connectDevice,\n  getDevice,\n} from '../../services/broadCastDeviceService';\nimport Details from './Details';\n\nconst DeviceDetails = ({ match }) => {\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const [count, setCount] = useState(0);\n\n  const [selected, setSelected] = useState({ value: 'Load', label: 'Load' });\n\n  const [data, setData] = useState([]);\n  // const [allData, setAllData] = useState([]);\n  const [previousData, setPreviousData] = useState([]);\n\n  const [deviceClient, setDeviceClient] = useState();\n  const [deviceInfos, setDeviceInfos] = useState();\n  const deviceId = `${match.params.id}`;\n\n  useEffect(() => {\n    if (deviceId) {\n      getDevice(deviceId).then((deviceInfo) => {\n        console.log(deviceInfo);\n        setDeviceInfos(deviceInfo);\n        connectDevice(deviceInfo).then((deviceClient) =>\n          setDeviceClient(deviceClient),\n        );\n      });\n    }\n    return () => deviceClient?.disconnect();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [deviceId]);\n\n  useEffect(() => {\n    if (deviceClient) {\n      //getAllDataCount\n      deviceClient.getAllDataCount().then((result) => {\n        console.log('data count');\n        console.log(result);\n        setCount(result);\n      });\n      deviceClient.subscribe(\n        (message) => setData([message, ...data]),\n        (error) => console.log(error),\n      );\n      //console.log(data);\n      deviceClient.getPageData(currentPage * 10, 10).then((result) => {\n        //console.log(result);\n        setPreviousData(result);\n      });\n      // deviceClient.getAllData().then((result) => {\n      //   //console.log(result);\n      //   setAllData(result);\n      // });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [deviceClient]);\n\n  useEffect(() => {\n    if (deviceClient) {\n      deviceClient.getPageData(currentPage * 10, 10).then((result) => {\n        //console.log(result);\n        setPreviousData(result);\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentPage]);\n\n  return (\n    <div\n      className=\"m-4 p-2 shadow-lg \"\n      style={{ backgroundColor: 'white', borderRadius: '10px' }}\n    >\n      <div className=\"m-4\">\n        <div className=\"p-4 border-b\">\n          <h2 className=\"text-2xl \">Device Information</h2>\n          <p className=\"text-sm text-gray-500\">Device connection details.</p>\n        </div>\n\n        <div>\n          <div className=\"md:grid md:grid-cols-2 hover:bg-gray-50 md:space-y-0 space-y-1 p-4 border-b\">\n            <p className=\"text-gray-600\">Device Name</p>\n            <p>{deviceInfos ? deviceInfos.name : ''}</p>\n          </div>\n        </div>\n        <div>\n          <div className=\"md:grid md:grid-cols-2 hover:bg-gray-50 md:space-y-0 space-y-1 p-4 border-b\">\n            <p className=\"text-gray-600\">Url</p>\n            <p>{deviceInfos ? deviceInfos.url : ''}</p>\n          </div>\n        </div>\n        <div>\n          <div className=\"md:grid md:grid-cols-2 hover:bg-gray-50 md:space-y-0 space-y-1 p-4 border-b\">\n            <p className=\"text-gray-600\">Device kind</p>\n            <p>{deviceInfos ? deviceInfos.kind : ''}</p>\n          </div>\n        </div>\n        <div>\n          <div className=\"md:grid md:grid-cols-2 hover:bg-gray-50 md:space-y-0 space-y-1 p-4 border-b\">\n            <p className=\"text-gray-600\">Topic</p>\n            <p>{deviceInfos ? deviceInfos.topic : ''}</p>\n          </div>\n        </div>\n      </div>\n\n      <HorizontalNavigation\n        onSelect={(option) => {\n          setSelected(option);\n          setCurrentPage(1);\n        }}\n        selected={selected}\n        options={['Load', 'I/O', 'FS', 'Temperature'].map((value) => ({\n          value: String(value),\n          label: String(value) + ' Details',\n        }))}\n      />\n\n      <Details\n        allData={previousData}\n        currentPage={currentPage}\n        count={count}\n        data={data}\n        previousData={previousData}\n        DetailType={selected.value}\n        setCurrentPage={(p) => setCurrentPage(p)}\n      />\n    </div>\n  );\n};\n\nexport default DeviceDetails;\n"],"sourceRoot":""}