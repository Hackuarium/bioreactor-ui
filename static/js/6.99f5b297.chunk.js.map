{"version":3,"sources":["services/devicesOptions.js","services/db.js","services/mqttService.js","services/deviceService.js","pages/deviceDetails.jsx"],"names":["DEVICES_DB","DEFAULT_PORT","DEFAULT_PROTOCOL","DEVICE_PROTOCOLS","DEVICE_KINDS","DB","client","_db","_dbInfo","connect","dbName","db_name","PouchDB","info","then","res","console","log","getInfo","put","doc","Promise","reject","Error","get","docId","getAll","options","a","allDocs","include_docs","docs","rows","update","_id","_rev","remove","removeAll","destroy","JSON","stringify","close","callback","isFunction","url","protocol","port","username","password","resolve","onSuccess","onError","connected","hostname","brokerUrl","mqtt","keepalive","reconnectPeriod","on","stream","err","error","name","end","getClientInstance","subscribe","topic","onMessageReceived","qos","payload","data","parseCurrentSettings","toString","unsubscribe","getSavedDevices","dbClient","db","list","map","item","getDevice","deviceId","device","updateDevice","deviceData","deleteDevice","deviceID","catch","e","message","addDevice","props","kind","key","id","r","exist","inserted","connectDevice","mqttClient","onSubscribe","Date","now","disconnect","getAllData","getLastData","descending","limit","DeviceDetails","match","useState","setData","deviceClient","setDeviceClient","params","useEffect","deviceInfo"],"mappings":"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","file":"static/js/6.99f5b297.chunk.js","sourcesContent":["// Default Values\n\nexport const DEVICES_DB = 'BIOREACTOR_devices';\nexport const DEFAULT_PORT = '9001';\nexport const DEFAULT_PROTOCOL = 'tcp';\n\n// Static Values\n\nexport const DEVICE_TYPE = {\n  broadcast: 'broadcast',\n  interactive: 'interactive',\n  local: 'local',\n};\n\nexport const DEVICE_PROTOCOLS = ['tcp', 'http'];\n\nexport const DEVICE_KINDS = [\n  'computer',\n  'beemos',\n  'openBio',\n  'openBio6',\n  'openSpectro',\n  'simpleSpectro',\n  'solar2015',\n];\n","import PouchDB from 'pouchdb';\nimport { isFunction } from 'lodash';\n\n// Wrap Db interface in case of switching to another Db other than \"PouchDb\"\n\nfunction DB() {\n  let _db = null;\n  let _dbInfo = {};\n\n  const connect = (dbName) => {\n    if (!_db || (_dbInfo && _dbInfo.db_name !== dbName)) {\n      _db = new PouchDB(dbName);\n      _db.info().then((res) => (_dbInfo = res));\n      console.log(`connected to DB \"${dbName}\"`);\n    }\n\n    // DB operations to return\n\n    const getInfo = () => _dbInfo;\n\n    const put = (doc) => {\n      if (!('_id' in doc))\n        return Promise.reject(new Error('doc must include _id'));\n      return _db.put(doc);\n    };\n\n    const get = (docId) => _db.get(docId);\n\n    const getAll = async (options) => {\n      const docs = await _db.allDocs({\n        include_docs: true,\n        ...options,\n      });\n      //console.log(`get ${docs.total_rows} rows`);\n      return docs.rows;\n    };\n\n    const update = (doc) => {\n      if (!('_id' in doc))\n        return Promise.reject(new Error('doc must include _id'));\n      return _db\n        .get(doc._id)\n        .then((res) => _db.put({ ...doc, _rev: res._rev }));\n    };\n\n    const remove = (docId) => {\n      return _db\n        .get(docId)\n        .then((res) => _db.remove({ _id: docId, _rev: res._rev }));\n    };\n\n    const removeAll = () =>\n      _db.destroy().then((res) => {\n        _db = null;\n        console.log(`DB \"${dbName}\" destroyed : ` + JSON.stringify(res));\n      });\n\n    const close = (callback) =>\n      _db.close(() => {\n        _db = null;\n        console.log(`DB \"${dbName}\" closed`);\n        isFunction(callback) && callback();\n      });\n\n    return {\n      getInfo,\n      put,\n      get,\n      getAll,\n      update,\n      remove,\n      removeAll,\n      close,\n    };\n  };\n  return { connect };\n}\n\nexport default DB();\n","import mqtt from 'mqtt';\nimport { isFunction } from 'lodash';\nimport { parseCurrentSettings } from 'legoino-util';\nimport { DEFAULT_PORT, DEFAULT_PROTOCOL } from './devicesOptions';\n\n// Private Functions\nlet client;\n\nconst getClientInstance = (\n  url,\n  protocol = DEFAULT_PROTOCOL,\n  port = DEFAULT_PORT,\n  username,\n  password,\n  onSuccess,\n  onError,\n) => {\n  // if client is already connected\n  if (client && client.connected && client.options.hostname === url)\n    isFunction(onSuccess) && onSuccess(client);\n\n  const brokerUrl = `${protocol}://${url}:${port}`;\n  client = mqtt.connect(brokerUrl, {\n    keepalive: 300,\n    reconnectPeriod: 5000,\n  });\n\n  client.on('connect', () => {\n    console.log(`connected to ${brokerUrl} : ${client.connected}`);\n    isFunction(onSuccess) && onSuccess(client);\n  });\n\n  client.stream.on('error', (err) => {\n    console.log(err);\n    const error = new Error(`Couldn't connect to BROKER \"${brokerUrl}\"`);\n    error.name = 'Mqtt Error';\n    client.end();\n    isFunction(onError) && onError(error);\n  });\n};\n\nconst parseToJson = (data) => {\n  return parseCurrentSettings(data.toString(), {});\n};\n\n// Public Functions\n\nexport const connect = (url, protocol, port, username, password) => {\n  const clientPromise = new Promise((resolve, reject) => {\n    getClientInstance(\n      url,\n      protocol,\n      port,\n      username,\n      password,\n      (client) => resolve(client),\n      (error) => reject(error),\n    );\n  });\n  return clientPromise;\n};\n\n// TO DO: update function\n\nexport const subscribe = (client, topic, onMessageReceived, onError) => {\n  client.subscribe(topic, { qos: 2 }, (err) => {\n    err\n      ? isFunction(onError) && onError(err)\n      : client.on('message', (topic, payload) => {\n          isFunction(onMessageReceived) &&\n            onMessageReceived(parseToJson(payload));\n        });\n  });\n\n  const unsubscribe = (onError) => client.unsubscribe(topic, {}, onError);\n\n  return unsubscribe;\n};\n\nexport const disconnect = (client, callback) =>\n  client.end(() => {\n    console.log(`mqtt broker \"${client.options.hostname}\" disconnected`);\n    isFunction(callback) && callback();\n  });\n","import db from './db';\nimport { isFunction } from 'lodash';\nimport { connect, subscribe, disconnect } from './mqttService';\nimport { DEVICES_DB } from './devicesOptions';\n\n// Public Functions\n\nexport const getSavedDevices = async () => {\n  const dbClient = db.connect(DEVICES_DB);\n  const list = await dbClient.getAll();\n  return list.map((item) => item.doc);\n};\n\nexport const getDevice = async (deviceId) => {\n  const dbClient = db.connect(DEVICES_DB);\n  const device = await dbClient.get(deviceId);\n  return device;\n};\n\nexport const updateDevice = async (deviceData) => {\n  const dbClient = db.connect(DEVICES_DB);\n  return dbClient.update(deviceData);\n};\n\nexport const deleteDevice = (deviceID) => {\n  const dbClient = db.connect(DEVICES_DB);\n  return dbClient.remove(deviceID).catch((e) => {\n    const err = new Error(`Couldn't remove record: ${e.message}`);\n    err.name = 'Database Error';\n    throw err;\n  });\n};\n\n// add device to devices DB\nexport const addDevice = (props) => {\n  const dbClient = db.connect(DEVICES_DB);\n  const { kind, name, url, protocol, port, topic, username, password } = props;\n\n  // make sure all props are defined\n  for (let key in props)\n    if (!props[key]) throw new Error(`Field missing [${key}]`);\n\n  const id = `${kind}_${name}`;\n\n  return dbClient\n    .get(id)\n    .then((r) => {\n      // the device already exists in DB\n      const err = new Error('Another device exists with the same name');\n      err.payload = { exist: true, payload: r };\n      throw err;\n    })\n    .catch((e) => {\n      // if the device exists in DB\n      if (e.payload && e.payload.exist) throw e;\n      // the device does not exist in DB\n      return dbClient\n        .put({\n          _id: id,\n          name,\n          url,\n          protocol,\n          port,\n          topic,\n          kind,\n          username,\n          password,\n        })\n        .then((r) => {\n          // inserted successfully\n          return { exist: false, inserted: true, payload: r };\n        })\n        .catch((e) => {\n          // DB error\n          const err = new Error(e.toString());\n          err.payload = {\n            exist: false,\n            inserted: false,\n            payload: e.toString(),\n          };\n          throw err;\n        });\n    });\n};\n\n//\n// connect to broadcast device & return a client instance with {subscribe, disconnect, getAllData, getLastData}\nexport const connectDevice = ({\n  _id,\n  name,\n  kind,\n  deviceId = _id || `${kind}_${name}`,\n  url,\n  protocol,\n  port,\n  topic,\n  username,\n  password,\n}) => {\n  const clientPromise = new Promise(async (resolve, reject) => {\n    try {\n      const mqttClient = await connect(url, protocol, port, username, password);\n      const dbClient = db.connect(deviceId);\n      const _subscribe = (onSubscribe, onError) => {\n        const unsubscribe = subscribe(\n          mqttClient,\n          topic,\n          (payload) => {\n            dbClient.put({ _id: Date.now().toString(), ...payload });\n            isFunction(onSubscribe) && onSubscribe(payload);\n          },\n          onError,\n        );\n        return unsubscribe;\n      };\n\n      const _disconnect = () => disconnect(mqttClient, () => dbClient.close());\n      const getAllData = () => dbClient.getAll();\n      const getLastData = () => dbClient.getAll({ descending: true, limit: 1 });\n      resolve({\n        subscribe: _subscribe,\n        disconnect: _disconnect,\n        getAllData,\n        getLastData,\n      });\n    } catch (e) {\n      // connection error\n      reject(e);\n    }\n  });\n\n  return clientPromise;\n};\n","import { connectDevice, getDevice } from '../services/deviceService';\nimport { useState, useEffect } from 'react';\n\nconst DeviceDetails = ({ match }) => {\n  const [data, setData] = useState([]);\n  const [deviceClient, setDeviceClient] = useState();\n  const deviceId = `${match.params.id}`;\n  useEffect(() => {\n    if (deviceId) {\n      getDevice(deviceId).then((deviceInfo) => {\n        //console.log(deviceInfo);\n        connectDevice(deviceInfo).then((deviceClient) =>\n          setDeviceClient(deviceClient),\n        );\n      });\n    }\n  }, [deviceId]);\n\n  useEffect(() => {\n    if (deviceClient) {\n      //console.log(deviceClient);\n      deviceClient.subscribe(\n        (message) => setData([message, ...data]),\n        (error) => console.log(error),\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [deviceClient]);\n\n  return (\n    <div>\n      <div>Device Details</div>\n      <p>{deviceId}</p>\n      <p>{JSON.stringify(data[0])}</p>\n    </div>\n  );\n};\n\nexport default DeviceDetails;\n"],"sourceRoot":""}