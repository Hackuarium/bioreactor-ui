{"version":3,"sources":["services/devicesOptions.js","services/devicesService.js","services/db.js","hooks/useNotification.js","services/mqttService.js","services/broadCastDeviceService.js","pages/BroadcastDevices/DeviceModal.jsx","pages/BroadcastDevices/DevicesList.jsx","pages/BroadcastDevices/index.jsx"],"names":["DEVICES_DB","DEFAULT_PORT","window","location","protocol","DEFAULT_PROTOCOL","DEVICE_PROTOCOLS","DEVICE_TYPE","broadcast","interactive","local","COMMANDS","help","settings","compactSettings","runExperiment","kinetic","reset","sleep","setParameter","label","value","DEVICE_KINDS","Object","keys","legoinoDeviceInformation","filter","key","kind","map","events","parameters","throwDbError","error","additionalMsg","console","log","err","Error","message","name","concatDeviceId","type","id","getDeviceKind","deviceId","fromDeviceID","Number","e","mapParameters","params","p","undefined","getDevices","DB","getAll","startkey","endkey","then","res","rows","i","doc","catch","getDevice","get","updateDevice","deviceData","update","deleteDevice","deviceID","remove","addDevice","device","put","saveDataRow","data","_id","Date","now","toString","getSavedData","descending","d","getSavedDataByPage","page","itemsByPage","skip","limit","getSavedDataCount","include_docs","total_rows","getLastSavedData","clearSavedData","destroy","listenToDataChanges","successCallback","errorCallBack","listenToChanges","closeDbConnection","dbName","close","connectedDBs","connect","PouchDB","revs_limit","auto_compaction","getInfo","Promise","resolve","reject","info","options","allDocs","docId","db","resGet","_rev","resPut","errPut","resRm","errRm","changes","since","live","on","useNotification","notificationContext","useNotificationCenter","addNotification","title","textColor","Icon","timeout","className","clsx","content","icon","addErrorNotification","SvgSolidExclamation","addWarningNotification","addInfoNotification","SvgOutlineExclamationCircle","url","port","username","password","onSuccess","onError","brokerUrl","client","mqtt","keepalive","reconnectPeriod","isFunction","stream","end","getClientInstance","subscribe","topic","onMessageReceived","qos","payload","parseCurrentSettings","unsubscribe","disconnect","callback","broadcastDeviceInfo","deviceInfo","connectDevice","mqttClient","dbClient","onSubscribe","epoch","getAllData","getLastData","getPageData","getAllDataCount","testDeviceConnection","continuousListenToDevices","devicesList","scanInterval","testConnection","a","promiseArray","forEach","push","allSettled","interval","setInterval","protocolOptions","val","toUpperCase","kindOptions","option","validationSchema","Yup","shape","max","matches","required","positive","integer","DeviceModal","isOpen","onClose","onSave","onUpdate","initialValues","updateMode","isEmpty","useState","footerMessage","setFooterMessage","formRef","useRef","_initialValues","v","useEffect","setTimeout","onSubmit","values","_kind","k","renderFooterMessage","state","onRequestClose","iconColor","animated","hasCloseButton","requestCloseOnBackdrop","requestCloseOnEsc","fluid","wrapperComponent","Form","wrapperProps","innerRef","Header","Body","placeholder","disabled","inputClassName","leadingInlineAddon","renderOption","o","getValue","Footer","onClick","stopPropagation","current","DevicesList","onSelect","onEdit","onDelete","element","dot","rounded","connected","size","BadgeSize","SMALL","color","BroadcastDevices","history","match","isModalOpen","setIsModalOpen","setDevicesList","onEditValues","setOnEditValues","refreshDevices","cleanup","_devices","isChanged","response","status","reason","intervalId","clearInterval","onAddDevice","onUpdateDevice"],"mappings":"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","file":"static/js/7.ce970172.chunk.js","sourcesContent":["import legoinoDeviceInformation from 'legoino-device-information';\n\n// Default Values\n\nexport const DEVICES_DB = 'BIOREACTOR-UI_devices';\nexport const DEFAULT_PORT =\n  window.location.protocol === 'https:' ? '443' : '80'; // old '8080'\nexport const DEFAULT_PROTOCOL =\n  window.location.protocol === 'https:' ? 'wss' : 'http'; // old tcp\n\n// Static Values\n\nexport const DEVICE_PROTOCOLS = ['http', 'tcp', 'wss'];\n\nexport const DEVICE_TYPE = {\n  broadcast: 'broadcast',\n  interactive: 'interactive',\n  local: 'local',\n};\n\nexport const COMMANDS = {\n  help: 'h',\n  settings: 'u',\n  compactSettings: 'uc',\n  runExperiment: 'r',\n  kinetic: 'k',\n  reset: 'ur1234',\n  sleep: 'l',\n  setParameter: (label, value) => `${label}${value}`,\n};\n\nexport const DEVICE_KINDS = Object.keys(legoinoDeviceInformation)\n  .filter((key) => legoinoDeviceInformation[key].kind)\n  .map((key) => {\n    const { events, parameters, ...info } = legoinoDeviceInformation[key];\n    return info;\n  });\n\nexport const DEVICE_STATUS = {\n  opening: 1,\n  opened: 2,\n  closed: 3,\n  missing: 9,\n  error: 10,\n};\n","import legoinoDeviceInformation from 'legoino-device-information';\nimport DB from './db';\nimport { DEVICES_DB } from './devicesOptions';\n\n// Private Functions\n\nconst throwDbError = (error, additionalMsg) => {\n  console.log(error);\n  const err = new Error(`${additionalMsg} \\n${error?.message}`);\n  err.name = 'DATABASE_ERROR';\n  throw err;\n};\n\n// Public Functions\n\n/**\n * return device _id\n */\nexport const concatDeviceId = (type, kind, id) => `${type}_${kind}_${id}`;\n\n/**\n * Get device Kind from its ID\n */\nexport const getDeviceKind = (deviceId) => {\n  try {\n    if (deviceId) {\n      const selectedDeviceKind = legoinoDeviceInformation.fromDeviceID(\n        Number(deviceId),\n      );\n      return selectedDeviceKind;\n    }\n  } catch (e) {\n    console.log(e);\n    return undefined;\n  }\n};\n\n/**\n * map parameters based on kind\n */\nexport const mapParameters = (kind, params) =>\n  kind && params\n    ? legoinoDeviceInformation[kind]?.parameters?.map((p) => ({\n        ...p,\n        value: params[p.label],\n      }))\n    : undefined;\n\n//=====================================\n/**\n * Devices DB operations\n */\n\nexport const getDevices = async (type) =>\n  DB(DEVICES_DB)\n    .getAll({ startkey: `${type}`, endkey: `${type}\\uffff` })\n    .then((res) => res.rows.map((i) => i.doc))\n    .catch((e) => throwDbError(e, `Get locally saved devices error`));\n\nexport const getDevicesByKind = async (type, kind) =>\n  DB(DEVICES_DB)\n    .getAll({ startkey: `${type}_${kind}`, endkey: `${type}_${kind}\\uffff` })\n    .then((res) => res.rows)\n    .catch((e) => throwDbError(e, `Get locally saved devices error`));\n\nexport const getDevice = async (deviceId) =>\n  DB(DEVICES_DB)\n    .get(deviceId)\n    .catch((e) => throwDbError(e, `Get device error`));\n\nexport const updateDevice = async (deviceData) =>\n  DB(DEVICES_DB)\n    .update(deviceData)\n    .catch((e) => throwDbError(e, `Update device error`));\n\nexport const deleteDevice = (deviceID) =>\n  DB(DEVICES_DB)\n    .remove(deviceID)\n    .catch((e) => throwDbError(e, `Delete device error`));\n\nexport const addDevice = (device) =>\n  DB(DEVICES_DB)\n    .put(device)\n    .catch((e) =>\n      e.name === 'conflict'\n        ? throwDbError(e, `Device name must be unique`)\n        : throwDbError(e, `Insert device error`),\n    );\n\n//=====================================\n/**\n * Device Data operations\n */\n\n// Ps: don't forget to close Db connection in cleanup function\n\nexport const saveDataRow = (deviceId, data) =>\n  DB(deviceId).put({ _id: Date.now().toString(), ...data });\n\nexport const getSavedData = (deviceId) =>\n  DB(deviceId)\n    .getAll({\n      descending: true,\n    })\n    .then((res) => res.rows.map((d) => d.doc));\n\nexport const getSavedDataByPage = (deviceId, page, itemsByPage) =>\n  DB(deviceId)\n    .getAll({\n      descending: true,\n      skip: (page - 1) * itemsByPage,\n      limit: itemsByPage,\n    })\n    .then((res) => res.rows.map((d) => d.doc));\n\nexport const getSavedDataCount = (deviceId) =>\n  DB(deviceId)\n    .getAll({\n      include_docs: false,\n    })\n    .then((res) => res.total_rows);\n\nexport const getLastSavedData = (deviceId) =>\n  DB(deviceId)\n    .getAll({\n      descending: true,\n      limit: 1,\n    })\n    .then((res) => res.rows.map((d) => d.doc));\n\nexport const clearSavedData = (deviceId) => DB(deviceId).destroy();\n\nexport const listenToDataChanges = (deviceId, successCallback, errorCallBack) =>\n  DB(deviceId).listenToChanges(successCallback, errorCallBack);\n\nexport const closeDbConnection = (dbName) => DB(dbName).close();\n","import PouchDB from 'pouchdb';\n\n// Wrap Db interface in case of switching to another Db other than \"PouchDb\"\nlet connectedDBs = {};\n\nconst DB = (dbName) => {\n  const connect = () => {\n    if (!(dbName in connectedDBs)) {\n      connectedDBs[dbName] = new PouchDB(dbName, {\n        revs_limit: 1,\n        auto_compaction: true,\n      });\n    }\n    return connectedDBs[dbName];\n  };\n\n  // DB operations to return\n\n  const getInfo = () =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      db.info()\n        .then((res) => resolve(res))\n        .catch((err) => reject(err));\n    });\n\n  const getAll = async (options) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      db.allDocs({\n        include_docs: true,\n        ...options,\n      })\n        .then((res) => resolve(res))\n        .catch((err) => reject(err));\n    });\n\n  const get = (docId) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      docId\n        ? db\n            .get(docId)\n            .then((res) => resolve(res))\n            .catch((err) => reject(err))\n        : reject(new Error('Doc fetch : docId is required'));\n    });\n\n  const put = (doc) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      !('_id' in doc)\n        ? reject(new Error('Doc create : _id is required in doc'))\n        : db\n            .put(doc)\n            .then((res) => resolve(res))\n            .catch((err) => reject(err));\n    });\n\n  const update = (doc) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      !('_id' in doc)\n        ? reject(new Error('Doc update : _id is required in doc'))\n        : db\n            .get(doc._id)\n            .then((resGet) =>\n              db\n                .put({ ...doc, _rev: resGet._rev })\n                .then((resPut) => resolve(resPut))\n                .catch((errPut) => reject(errPut)),\n            )\n            .catch((err) => reject(err));\n    });\n\n  const remove = (docId) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      docId\n        ? db\n            .get(docId)\n            .then((resGet) =>\n              db\n                .remove({ _id: docId, _rev: resGet._rev })\n                .then((resRm) => resolve(resRm))\n                .catch((errRm) => reject(errRm)),\n            )\n            .catch((err) => reject(err))\n        : reject(new Error('Doc remove : docId is required'));\n    });\n\n  // const removeAll = () => {\n  //   const db = connect();\n  //   return db\n  //     .allDocs()\n  //     .then((result) =>\n  //       Promise.all(result.rows.map((row) => db.remove(row.id, row.value.rev))),\n  //     );\n  // };\n\n  const listenToChanges = (successCallback, errorCallBack, options) => {\n    const db = connect();\n    let unsubscribe = db\n      .changes({\n        since: 'now',\n        live: true,\n        include_docs: true,\n        ...options,\n      })\n      .on('change', successCallback)\n      // .on('complete', successCallback)\n      .on('error', errorCallBack);\n    return unsubscribe;\n  };\n\n  const close = () => {\n    const db = connect();\n    delete connectedDBs[dbName];\n    return db.close();\n  };\n  const destroy = () => {\n    const db = connect();\n    delete connectedDBs[dbName];\n    return db.destroy();\n  };\n\n  return {\n    getInfo,\n    getAll,\n    get,\n    put,\n    update,\n    remove,\n    listenToChanges,\n    close,\n    destroy,\n  };\n};\n\nexport default DB;\n","import clsx from 'clsx';\nimport {\n  SvgOutlineExclamationCircle,\n  SvgSolidExclamation,\n  useNotificationCenter,\n} from '../components/tailwind-ui';\n\nexport default function useNotification() {\n  const notificationContext = useNotificationCenter();\n\n  const addNotification = (title, message, { textColor, Icon, timeout }) => {\n    notificationContext.addNotification(\n      {\n        title: (\n          <span className={clsx('text-base font-semibold', textColor + '500')}>\n            {title}\n          </span>\n        ),\n        content: <span className=\"text-sm text-neutral-500\">{message}</span>,\n        icon: <Icon className={clsx('w-8 h-8', textColor + '600')} />,\n      },\n      timeout,\n    );\n  };\n\n  const addInfoNotification = (title, message, timeout = 1000) => {\n    addNotification(title, message, {\n      textColor: 'text-primary-',\n      Icon: SvgOutlineExclamationCircle,\n      timeout: timeout,\n    });\n  };\n\n  const addWarningNotification = (title, message, timeout = 2500) => {\n    addNotification(title, message, {\n      textColor: 'text-warning-',\n      Icon: SvgSolidExclamation,\n      timeout: timeout,\n    });\n  };\n\n  const addErrorNotification = (title, message, timeout = 5000) => {\n    addNotification(title, message, {\n      textColor: 'text-danger-',\n      Icon: SvgSolidExclamation,\n      timeout: timeout,\n    });\n  };\n\n  return { addErrorNotification, addWarningNotification, addInfoNotification };\n}\n","import mqtt from 'mqtt';\nimport { isFunction } from 'lodash';\nimport { parseCurrentSettings } from 'legoino-util';\n\n// Private Functions\n\nconst getClientInstance = (\n  url,\n  protocol,\n  port,\n  username,\n  password,\n  onSuccess,\n  onError,\n) => {\n  const brokerUrl = `${protocol}://${url}:${port}`;\n  const client = mqtt.connect(brokerUrl, {\n    keepalive: 300,\n    reconnectPeriod: 5000,\n  });\n\n  client.on('connect', () => {\n    // console.log(`connected to ${brokerUrl} : ${client.connected}`);\n    isFunction(onSuccess) && onSuccess(client);\n  });\n\n  client.stream.on('error', (err) => {\n    // console.log(err);\n    const error = new Error(`Couldn't connect to BROKER \"${brokerUrl}\"`);\n    error.name = 'Mqtt Error';\n    client.end();\n    isFunction(onError) && onError(error);\n  });\n};\n\nconst parseToJson = (data) => {\n  return parseCurrentSettings(data.toString(), {});\n};\n\n// Public Functions\n\nexport const connect = (url, protocol, port, username, password) => {\n  const clientPromise = new Promise((resolve, reject) => {\n    getClientInstance(\n      url,\n      protocol,\n      port,\n      username,\n      password,\n      (client) => resolve(client),\n      (error) => reject(error),\n    );\n  });\n  return clientPromise;\n};\n\n// TO DO: update function\n\nexport const subscribe = (client, topic, onMessageReceived, onError) => {\n  client.subscribe(topic, { qos: 2 }, (err) => {\n    err\n      ? isFunction(onError) && onError(err)\n      : client.on('message', (topic, payload) => {\n          isFunction(onMessageReceived) &&\n            onMessageReceived(parseToJson(payload));\n        });\n  });\n\n  const unsubscribe = (onError) => client.unsubscribe(topic, {}, onError);\n\n  return unsubscribe;\n};\n\nexport const disconnect = (client, callback) =>\n  client.end(() => {\n    // console.log(`mqtt broker \"${client.options.hostname}\" disconnected`);\n    isFunction(callback) && callback();\n  });\n","import { isFunction } from 'lodash';\nimport DB from './db';\nimport { connect, subscribe, disconnect } from './mqttService';\nimport { DEFAULT_PORT, DEFAULT_PROTOCOL, DEVICE_TYPE } from './devicesOptions';\nimport { concatDeviceId } from './devicesService';\n\nconst SCAN_INTERVAL_CONNECTED_DEVICES = 10000;\n\n// Public Functions\n\n/**\n * return device information to be stored in DB\n */\nexport const broadcastDeviceInfo = (deviceInfo) => {\n  return {\n    ...deviceInfo,\n    _id: concatDeviceId(\n      DEVICE_TYPE.broadcast,\n      deviceInfo.kind?.kind,\n      deviceInfo.name,\n    ),\n    protocol: deviceInfo?.protocol ? deviceInfo?.protocol : DEFAULT_PROTOCOL,\n    port: deviceInfo?.port ? deviceInfo?.port : DEFAULT_PORT,\n  };\n};\n\n//\n// connect to broadcast device & return a client instance with {subscribe, disconnect, getAllData, getLastData}\nexport const connectDevice = ({\n  _id,\n  name,\n  kind,\n  deviceId = _id || `${kind}_${name}`,\n  url,\n  protocol = DEFAULT_PROTOCOL,\n  port = DEFAULT_PORT,\n  topic,\n  username,\n  password,\n}) => {\n  const clientPromise = new Promise(async (resolve, reject) => {\n    try {\n      // await new Promise((resolve) => setTimeout(resolve, 1000));\n      const mqttClient = await connect(url, protocol, port, username, password);\n      const dbClient = DB(deviceId);\n\n      const _subscribe = (onSubscribe, onError) => {\n        const unsubscribe = subscribe(\n          mqttClient,\n          topic,\n          (payload) => {\n            dbClient\n              .put({ _id: `${Date.now()}_${payload.epoch}`, ...payload })\n              .then(() => onSubscribe(payload))\n              .catch(() => {});\n          },\n          onError,\n        );\n        return unsubscribe;\n      };\n\n      const _disconnect = (callback) => disconnect(mqttClient, callback);\n\n      const getAllData = () =>\n        dbClient.getAll().then((res) => res.rows.map((i) => i.doc));\n\n      const getLastData = () =>\n        dbClient\n          .getAll({ descending: true, limit: 1 })\n          .then((res) => res.rows.map((i) => i.doc));\n\n      const getPageData = (skip, limit) =>\n        dbClient\n          .getAll({ descending: true, skip: skip, limit: limit })\n          .then((res) => res.rows.map((i) => i.doc));\n\n      const getAllDataCount = () =>\n        dbClient.getAll().then((res) => res.total_rows);\n\n      resolve({\n        subscribe: _subscribe,\n        disconnect: _disconnect,\n        getAllData,\n        getLastData,\n        getPageData,\n        getAllDataCount,\n      });\n    } catch (e) {\n      // connection error\n      reject(e);\n    }\n  });\n\n  return clientPromise;\n};\n\nexport const testDeviceConnection = ({\n  url,\n  protocol = DEFAULT_PROTOCOL,\n  port = DEFAULT_PORT,\n  topic,\n  username,\n  password,\n}) => {\n  const clientPromise = new Promise(async (resolve, reject) => {\n    try {\n      const mqttClient = await connect(url, protocol, port, username, password);\n      const unsubscribe = subscribe(\n        mqttClient,\n        topic,\n        (payload) => {\n          unsubscribe();\n          disconnect(mqttClient, () => resolve(payload));\n        },\n        reject,\n      );\n    } catch (e) {\n      // connection error\n      reject(e);\n    }\n  });\n\n  return clientPromise;\n};\n\n/**\n *\n * @param {object[]} devicesList\n * @param {function} callback res=> array of Promise results (fulfilled/rejected)\n * @param {integer} scanInterval in ms\n * @returns {object}  to clear interval later on\n */\nexport const continuousListenToDevices = async (\n  devicesList,\n  callback,\n  scanInterval = SCAN_INTERVAL_CONNECTED_DEVICES,\n) => {\n  const testConnection = async () => {\n    const promiseArray = [];\n    devicesList.forEach((device) =>\n      promiseArray.push(\n        testDeviceConnection(device)\n          .then((res) => ({ device, payload: res }))\n          .catch((err) => {\n            err.device = device;\n            throw err;\n          }),\n      ),\n    );\n    isFunction(callback) && callback(await Promise.allSettled(promiseArray));\n  };\n  // execute it every scanInterval\n  testConnection();\n  const interval = setInterval(\n    async () => await testConnection(),\n    scanInterval,\n  );\n\n  return interval;\n};\n","import { useRef, useState, useEffect } from 'react';\nimport * as Yup from 'yup';\nimport { isEmpty } from 'lodash';\nimport {\n  Form,\n  InputField,\n  Modal,\n  SvgOutlinePlus,\n  FormError,\n  SubmitButton,\n  SvgOutlineUser,\n  SvgOutlineKey,\n  SvgOutlineLink,\n  SvgOutlineX,\n  SelectField,\n  Spinner,\n  SvgOutlineCheck,\n} from '../../components/tailwind-ui';\n\nimport { testDeviceConnection } from '../../services/broadCastDeviceService';\nimport {\n  DEFAULT_PORT,\n  DEFAULT_PROTOCOL,\n  DEVICE_KINDS,\n  DEVICE_PROTOCOLS,\n} from '../../services/devicesOptions';\n\n//\n// Pre-defined variables\nconst protocolOptions = DEVICE_PROTOCOLS.map((val) => {\n  return { label: val.toUpperCase(), value: val };\n});\nconst kindOptions = DEVICE_KINDS.map((option) => {\n  return { ...option, label: option.name, value: option.kind };\n});\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .max(50, 'Name too Long!')\n    .matches(\n      /^[A-z0-9_-]*$/,\n      'Field supports only : letters / numbers / _ / - ',\n    )\n    .required('Required'),\n  url: Yup.string().required('Required'),\n  port: Yup.number().positive().integer(),\n  protocol: Yup.string(),\n  kind: Yup.string().required('Required'),\n  topic: Yup.string().required('Required'),\n  username: Yup.string().required('Required'),\n});\n//\n\nconst DeviceModal = ({ isOpen, onClose, onSave, onUpdate, initialValues }) => {\n  const updateMode = !isEmpty(initialValues); // if initialValues defined : updates the recode; else: add the record\n  const [footerMessage, setFooterMessage] = useState(<div />);\n  const formRef = useRef(null); // Ref the Form\n\n  const _initialValues = updateMode\n    ? {\n        ...initialValues,\n        kind: initialValues.kind.kind,\n      }\n    : {\n        name: 'Computer_01',\n        url: 'mqtt.hackuarium.org',\n        protocol: protocolOptions.filter((v) => v.value === DEFAULT_PROTOCOL)[0]\n          .value,\n        port: DEFAULT_PORT,\n        kind: 'Computer',\n        topic: 'lpatiny/Computer/server',\n        username: 'user',\n        password: 'password',\n      };\n\n  useEffect(() => {\n    // clear footer when modal is closed\n    !isOpen && setTimeout(() => setFooterMessage(<div />), 500);\n  }, [isOpen]);\n\n  // events functions\n  const onSubmit = async (values) => {\n    try {\n      const { kind, ...deviceInfo } = values;\n      const _kind = DEVICE_KINDS.filter((k) => k.kind === kind)[0];\n      updateMode\n        ? await onUpdate({ ...deviceInfo, kind: _kind })\n        : await onSave({ ...deviceInfo, kind: _kind });\n      onClose();\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  const testConnection = (e) => {\n    e.stopPropagation();\n    renderFooterMessage('connecting', 'Connecting ...');\n    setTimeout(() => {\n      testDeviceConnection(formRef.current.values)\n        .then(() => {\n          renderFooterMessage('success', 'Connected');\n        })\n        .catch((err) => {\n          renderFooterMessage('error', `Connection Error: ${err.message}`);\n        });\n    }, 500);\n  };\n\n  // helper function for testConnection event\n  const renderFooterMessage = (state, message) => {\n    switch (state) {\n      case 'connecting':\n        setFooterMessage(\n          <div className=\"mx-6 flex flex-row items-center text-sm text-left text-neutral-500\">\n            <Spinner className=\"w-6 h-6 mr-2\" />\n            <span>{message}</span>\n          </div>,\n        );\n        break;\n\n      case 'success':\n        setFooterMessage(\n          <div className=\"mx-4 flex flex-row items-center text-sm text-left text-success-500\">\n            <SvgOutlineCheck className=\"h-6 w-6 mr-4\" />\n            <span>{message}</span>\n          </div>,\n        );\n        break;\n\n      case 'error':\n        setFooterMessage(\n          <div className=\"mx-4 flex flex-row items-center text-sm text-left text-danger-500\">\n            <SvgOutlineX className=\"h-6 w-6 mr-4\" />\n            <span>{message}</span>\n          </div>,\n        );\n        break;\n\n      default:\n        setFooterMessage(<div />);\n        break;\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={onClose}\n      icon={<SvgOutlinePlus />}\n      iconColor=\"neutral\"\n      animated\n      hasCloseButton\n      requestCloseOnBackdrop\n      requestCloseOnEsc\n      fluid\n      wrapperComponent={Form}\n      wrapperProps={{\n        innerRef: formRef,\n        initialValues: _initialValues,\n        validationSchema,\n        onSubmit: onSubmit,\n        className: 'h-full',\n      }}\n    >\n      <Modal.Header>\n        {updateMode ? 'Update Device' : 'Connect New Device'}\n      </Modal.Header>\n      <Modal.Body>\n        <div className=\"p-2 mt-2\">\n          <InputField\n            name=\"name\"\n            id=\"name\"\n            label=\"Custom name\"\n            placeholder=\"Device name\"\n            disabled={updateMode}\n            required\n            className=\"w-full\"\n            inputClassName=\"w-full\"\n          ></InputField>\n          <div className=\"flex flex-col sm:flex-row sm:justify-between mt-4 sm:mt-0 border-t border-neutral sm:border-0\">\n            <InputField\n              name=\"url\"\n              id=\"url\"\n              label=\"URL\"\n              placeholder=\"mqtt.domain.com\"\n              required\n              leadingInlineAddon={<SvgOutlineLink />}\n              className=\"mt-4 sm:mr-4 w-full sm:w-1/2\"\n              inputClassName=\"w-full\"\n            ></InputField>\n            <div className=\"flex flex-row justify-between items-start flex-1\">\n              <SelectField\n                name=\"protocol\"\n                id=\"protocol\"\n                label=\"Protocol\"\n                options={protocolOptions}\n                renderOption={(o) => `${o.label}`}\n                getValue={(o) => o.value}\n                className=\"mt-4 mr-4 w-1/2\"\n                inputClassName=\"w-full\"\n              ></SelectField>\n              <InputField\n                name=\"port\"\n                id=\"port\"\n                label=\"Port\"\n                className=\"mt-4 flex-1\"\n                inputClassName=\"w-full\"\n              ></InputField>\n            </div>\n          </div>\n          <div className=\"flex flex-row justify-between items-start\">\n            <SelectField\n              name=\"kind\"\n              id=\"kind\"\n              label=\"Kind\"\n              options={kindOptions}\n              renderOption={(o) => `${o.label}`}\n              getValue={(o) => o.value}\n              required\n              className=\"mt-4 mr-4 w-1/2 \"\n              inputClassName=\"w-full bg-gray-500\"\n            ></SelectField>\n            <InputField\n              name=\"topic\"\n              id=\"topic\"\n              label=\"Topic\"\n              required\n              className=\"mt-4 flex-1\"\n              inputClassName=\"w-full\"\n            ></InputField>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row sm:justify-between mt-4 sm:mt-0 border-t border-neutral sm:border-0\">\n            <InputField\n              name=\"username\"\n              id=\"username\"\n              label=\"Username\"\n              placeholder=\"Username\"\n              required\n              leadingInlineAddon={<SvgOutlineUser />}\n              className=\"mt-4 w-full sm:mr-4 sm:w-1/2\"\n              inputClassName=\"w-full\"\n            ></InputField>\n            <InputField\n              name=\"password\"\n              id=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              placeholder=\"********\"\n              required\n              leadingInlineAddon={<SvgOutlineKey />}\n              className=\"mt-4 w-full sm:flex-1\"\n              inputClassName=\"w-full\"\n            ></InputField>\n          </div>\n        </div>\n        <FormError />\n      </Modal.Body>\n      <Modal.Footer>\n        <div className=\"flex flex-col sm:flex-row items-center\">\n          {footerMessage}\n          <button\n            onClick={testConnection}\n            type=\"button\"\n            className=\"w-full sm:w-max mt-2 sm:my-0 px-4 py-2 sm:mr-4 text-sm font-semibold text-neutral-700 border rounded-md shadow bg-neutral-200 focus:outline-none flex-1 sm:flex-none\"\n          >\n            Test connection\n          </button>\n          <SubmitButton className=\"w-full my-2 sm:my-0 sm:w-max \">\n            {updateMode ? 'Update' : 'Add'}\n          </SubmitButton>\n        </div>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default DeviceModal;\n","import React from 'react';\nimport {\n  Badge,\n  BadgeSize,\n  SvgOutlineChevronRight,\n  SvgSolidCog,\n  SvgSolidTrash,\n} from '../../components/tailwind-ui';\n\nconst DevicesList = ({ data, onSelect, onEdit, onDelete }) => {\n  return (\n    <div className=\"overflow-hidden bg-white shadow sm:rounded-md\">\n      {data.map((element) => (\n        <li\n          key={element.kind?.kind + element.name}\n          className=\"block transition duration-150 ease-in-out hover:bg-gray-50 focus:outline-none focus:bg-gray-50 cursor-pointer\"\n          onClick={(e) => onSelect(element, e)}\n        >\n          <div className=\"relative flex items-center px-4 py-4 sm:px-6\">\n            <div className=\"flex items-center flex-1 min-w-0\">\n              <div className=\"flex-1 min-w-0 px-4 sm:grid sm:grid-col-2 sm:gap-4\">\n                <div className=\"col-span-2 flex flex-row items-center flex-wrap\">\n                  <p className=\"mr-4 text-lg font-semibold truncate text-primary-700 \">\n                    {element.name}\n                  </p>\n                  <Badge\n                    dot\n                    rounded\n                    label={element.connected ? 'Active' : 'Inactive'}\n                    size={BadgeSize.SMALL}\n                    color={element.connected ? 'success' : 'neutral'}\n                    className=\"w-min h-min\"\n                  />\n                </div>\n                <div className=\"flex flex-col text-xs font-italic text-neutral-600\">\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">Device kind : </span>\n                    {element.kind?.kind}\n                  </p>\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">URL : </span>\n                    {`${element.protocol}://${element.url}:${element.port}`}\n                  </p>\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">Topic : </span>\n                    {element.topic}\n                  </p>\n                </div>\n                <div className=\"pt-2 sm:pt-0 flex justify-end items-center cursor-default\">\n                  <button\n                    className=\"mx-1 p-2 border rounded shadow-sm bg-neutral-100 focus:outline-none active:bg-neutral-200\"\n                    onClick={(e) => onEdit(element, e)}\n                  >\n                    <SvgSolidCog className=\"text-gray-700\" />\n                  </button>\n                  <button\n                    className=\"mx-1 p-2 border rounded shadow-sm bg-neutral-100 focus:outline-none active:bg-neutral-200\"\n                    onClick={(e) => onDelete(element, e)}\n                  >\n                    <SvgSolidTrash className=\"text-gray-700\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div>\n              <SvgOutlineChevronRight className=\"w-5 h-5 text-neutral-400\" />\n            </div>\n          </div>\n          <div className=\"w-full border-t border-neutral-100\" />\n        </li>\n      ))}\n    </div>\n  );\n};\n\nexport default DevicesList;\n","import { useState, useEffect } from 'react';\n\nimport { Button } from '../../components/tailwind-ui';\nimport {\n  broadcastDeviceInfo,\n  continuousListenToDevices,\n} from '../../services/broadCastDeviceService';\nimport {\n  updateDevice,\n  deleteDevice,\n  getDevices,\n  addDevice,\n} from '../../services/devicesService';\nimport useNotification from '../../hooks/useNotification';\nimport DevicesList from './DevicesList';\nimport DeviceModal from './DeviceModal';\nimport { DEVICE_TYPE } from '../../services/devicesOptions';\n\nconst SCAN_INTERVAL = 10000; // refresh devices status every 10s\n\nconst BroadcastDevices = ({ history, match }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [devicesList, setDevicesList] = useState([]);\n  const [onEditValues, setOnEditValues] = useState({});\n  const { addErrorNotification } = useNotification();\n\n  // get saved devices from DB\n  useEffect(() => {\n    refreshDevices();\n  }, []);\n\n  // listen continuously to devices status\n  useEffect(() => {\n    const cleanup = continuousListenToDevices(\n      devicesList,\n      (res) => {\n        const _devices = [];\n        let isChanged = false;\n        res.forEach((response) => {\n          if (response.status === 'fulfilled') {\n            const device = response.value.device;\n            if (!device.connected) {\n              device.connected = true;\n              isChanged = true;\n            }\n            _devices.push(device);\n          } else {\n            const device = response.reason.device;\n            if (device.connected) {\n              device.connected = false;\n              isChanged = true;\n            }\n            _devices.push(device);\n          }\n        });\n        if (isChanged) setDevicesList(_devices);\n      },\n      SCAN_INTERVAL,\n    );\n\n    return () => cleanup.then((intervalId) => clearInterval(intervalId));\n  }, [devicesList]);\n\n  const refreshDevices = () =>\n    getDevices(DEVICE_TYPE.broadcast).then(setDevicesList);\n\n  const onCloseModal = () => {\n    setIsModalOpen(false); // close modal\n    setOnEditValues({});\n  };\n\n  const onSelectDevice = (device, e) => {\n    history.push(match.url + '/' + device._id);\n  };\n\n  const onAddDevice = async (device) => {\n    const deviceInfo = broadcastDeviceInfo(device);\n    await addDevice(deviceInfo);\n    refreshDevices();\n  };\n\n  const onUpdateDevice = async (device) => {\n    await updateDevice(device);\n    refreshDevices();\n  };\n\n  const onEditDevice = (device, e) => {\n    e.stopPropagation();\n    setOnEditValues(device);\n    setIsModalOpen(true);\n  };\n\n  const onDeleteDevice = (device, e) => {\n    e.stopPropagation();\n    deleteDevice(device._id)\n      .then(() => refreshDevices())\n      .catch((e) => addErrorNotification(e.name, e.message));\n  };\n\n  return (\n    <div className=\"p-8\">\n      <h2 className=\"text-3xl font-semibold mb-10\">Broadcast devices</h2>\n      <div className=\"w-full flex justify-end mb-4\">\n        <Button onClick={() => setIsModalOpen(true)}>Add</Button>\n      </div>\n      <div>\n        <div className=\"w-full my-2 flex flex-row items-center \">\n          <h3 className=\"w-max ml-2 mr-4 text-neutral-600 text-sm whitespace-nowrap \">\n            Available devices\n          </h3>\n          <div className=\"w-full border-t border-neutral-300\" />\n        </div>\n        <DevicesList\n          data={devicesList}\n          onSelect={onSelectDevice}\n          onEdit={onEditDevice}\n          onDelete={onDeleteDevice}\n        />\n      </div>\n\n      <DeviceModal\n        isOpen={isModalOpen}\n        onClose={onCloseModal}\n        initialValues={onEditValues}\n        onSave={onAddDevice}\n        onUpdate={onUpdateDevice}\n      ></DeviceModal>\n    </div>\n  );\n};\n\nexport default BroadcastDevices;\n"],"sourceRoot":""}