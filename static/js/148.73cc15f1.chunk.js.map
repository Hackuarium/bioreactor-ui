{"version":3,"file":"static/js/148.73cc15f1.chunk.js","mappings":"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","sources":["../../../../../solarch/plotly/webgl/plotly.js/node_modules/regl-splom/index.js","../node_modules/src/factory.js","../node_modules/src/react-plotly.js","../node_modules/react-hook-form/src/utils/isCheckBoxInput.ts","../node_modules/react-hook-form/src/utils/isDateObject.ts","../node_modules/react-hook-form/src/utils/isNullOrUndefined.ts","../node_modules/react-hook-form/src/utils/isObject.ts","../node_modules/react-hook-form/src/logic/getEventValue.ts","../node_modules/react-hook-form/src/logic/isNameInFieldArray.ts","../node_modules/react-hook-form/src/logic/getNodeParentName.ts","../node_modules/react-hook-form/src/utils/compact.ts","../node_modules/react-hook-form/src/utils/isUndefined.ts","../node_modules/react-hook-form/src/utils/get.ts","../node_modules/react-hook-form/src/constants.ts","../node_modules/react-hook-form/src/logic/getProxyFormState.ts","../node_modules/react-hook-form/src/useFormContext.tsx","../node_modules/react-hook-form/src/utils/isEmptyObject.ts","../node_modules/react-hook-form/src/logic/shouldRenderFormState.ts","../node_modules/react-hook-form/src/utils/convertToArrayPayload.ts","../node_modules/react-hook-form/src/useSubscribe.ts","../node_modules/react-hook-form/src/utils/isString.ts","../node_modules/react-hook-form/src/logic/generateWatchOutput.ts","../node_modules/react-hook-form/src/utils/isPlainObject.ts","../node_modules/react-hook-form/src/utils/isWeb.ts","../node_modules/react-hook-form/src/utils/cloneObject.ts","../node_modules/react-hook-form/src/controller.tsx","../node_modules/react-hook-form/src/logic/appendErrors.ts","../node_modules/react-hook-form/src/utils/isKey.ts","../node_modules/react-hook-form/src/utils/stringToPath.ts","../node_modules/react-hook-form/src/utils/set.ts","../node_modules/react-hook-form/src/logic/focusFieldBy.ts","../node_modules/react-hook-form/src/logic/getValidationModes.ts","../node_modules/react-hook-form/src/logic/isWatched.ts","../node_modules/react-hook-form/src/logic/updateFieldArrayRootError.ts","../node_modules/react-hook-form/src/utils/isBoolean.ts","../node_modules/react-hook-form/src/utils/isFileInput.ts","../node_modules/react-hook-form/src/utils/isFunction.ts","../node_modules/react-hook-form/src/utils/isHTMLElement.ts","../node_modules/react-hook-form/src/utils/isMessage.ts","../node_modules/react-hook-form/src/utils/isRadioInput.ts","../node_modules/react-hook-form/src/utils/isRegex.ts","../node_modules/react-hook-form/src/logic/getCheckboxValue.ts","../node_modules/react-hook-form/src/logic/getRadioValue.ts","../node_modules/react-hook-form/src/logic/getValidateError.ts","../node_modules/react-hook-form/src/logic/getValueAndMessage.ts","../node_modules/react-hook-form/src/logic/validateField.ts","../node_modules/react-hook-form/src/utils/unset.ts","../node_modules/react-hook-form/src/utils/createSubject.ts","../node_modules/react-hook-form/src/utils/isPrimitive.ts","../node_modules/react-hook-form/src/utils/deepEqual.ts","../node_modules/react-hook-form/src/utils/isMultipleSelect.ts","../node_modules/react-hook-form/src/utils/isRadioOrCheckbox.ts","../node_modules/react-hook-form/src/utils/live.ts","../node_modules/react-hook-form/src/utils/objectHasFunction.ts","../node_modules/react-hook-form/src/logic/getDirtyFields.ts","../node_modules/react-hook-form/src/logic/getFieldValueAs.ts","../node_modules/react-hook-form/src/logic/getFieldValue.ts","../node_modules/react-hook-form/src/logic/getResolverOptions.ts","../node_modules/react-hook-form/src/logic/getRuleValue.ts","../node_modules/react-hook-form/src/logic/hasValidation.ts","../node_modules/react-hook-form/src/logic/schemaErrorLookup.ts","../node_modules/react-hook-form/src/logic/skipValidation.ts","../node_modules/react-hook-form/src/logic/unsetEmptyArray.ts","../node_modules/react-hook-form/src/logic/createFormControl.ts","../node_modules/react-hook-form/src/useForm.ts"],"sourcesContent":["'use strict'\n\n\nconst createScatter = require('regl-scatter2d')\nconst pick = require('pick-by-alias')\nconst getBounds = require('array-bounds')\nconst raf = require('raf')\nconst arrRange = require('array-range')\nconst rect = require('parse-rect')\nconst flatten = require('flatten-vertex-data')\n\n\nmodule.exports = SPLOM\n\n\n// @constructor\nfunction SPLOM (regl, options) {\n\tif (!(this instanceof SPLOM)) return new SPLOM(regl, options)\n\n\t// render passes\n\tthis.traces = []\n\n\t// passes for scatter, combined across traces\n\tthis.passes = {}\n\n\tthis.regl = regl\n\n\t// main scatter drawing instance\n\tthis.scatter = createScatter(regl)\n\n\tthis.canvas = this.scatter.canvas\n}\n\n\n// update & draw passes once per frame\nSPLOM.prototype.render = function (...args) {\n\tif (args.length) {\n\t\tthis.update(...args)\n\t}\n\n\tif (this.regl.attributes.preserveDrawingBuffer) return this.draw()\n\n\t// make sure draw is not called more often than once a frame\n\tif (this.dirty) {\n\t\tif (this.planned == null) {\n\t\t\tthis.planned = raf(() => {\n\t\t\t\tthis.draw()\n\t\t\t\tthis.dirty = true\n\t\t\t\tthis.planned = null\n\t\t\t})\n\t\t}\n\t}\n\telse {\n\t\tthis.draw()\n\t\tthis.dirty = true\n\t\traf(() => {\n\t\t\tthis.dirty = false\n\t\t})\n\t}\n\n\treturn this\n}\n\n\n// update passes\nSPLOM.prototype.update = function (...args) {\n\tif (!args.length) return\n\n\tfor (let i = 0; i < args.length; i++) {\n\t\tthis.updateItem(i, args[i])\n\t}\n\n\t// remove nulled passes\n\tthis.traces = this.traces.filter(Boolean)\n\n\t// FIXME: update passes independently\n\tlet passes = []\n\tlet offset = 0\n\tfor (let i = 0; i < this.traces.length; i++) {\n\t\tlet trace = this.traces[i]\n\t\tlet tracePasses = this.traces[i].passes\n\t\tfor (let j = 0; j < tracePasses.length; j++) {\n\t\t\tpasses.push(this.passes[tracePasses[j]])\n\t\t}\n\t\t// save offset of passes\n\t\ttrace.passOffset = offset\n\t\toffset += trace.passes.length\n\t}\n\n\tthis.scatter.update(...passes)\n\n\treturn this\n}\n\n\n// update trace by index, not supposed to be called directly\nSPLOM.prototype.updateItem = function (i, options) {\n\tlet { regl } = this\n\n\t// remove pass if null\n\tif (options === null) {\n\t\tthis.traces[i] = null\n\t\treturn this\n\t}\n\n\tif (!options) return this\n\n\tlet o = pick(options, {\n\t\tdata: 'data items columns rows values dimensions samples x',\n\t\tsnap: 'snap cluster',\n\t\tsize: 'sizes size radius',\n\t\tcolor: 'colors color fill fill-color fillColor',\n\t\topacity: 'opacity alpha transparency opaque',\n\t\tborderSize: 'borderSizes borderSize border-size bordersize borderWidth borderWidths border-width borderwidth stroke-width strokeWidth strokewidth outline',\n\t\tborderColor: 'borderColors borderColor bordercolor stroke stroke-color strokeColor',\n\t\tmarker: 'markers marker shape',\n\t\trange: 'range ranges databox dataBox',\n\t\tviewport: 'viewport viewBox viewbox',\n\t\tdomain: 'domain domains area areas',\n\t\tpadding: 'pad padding paddings pads margin margins',\n\t\ttranspose: 'transpose transposed',\n\t\tdiagonal: 'diagonal diag showDiagonal',\n\t\tupper: 'upper up top upperhalf upperHalf showupperhalf showUpper showUpperHalf',\n\t\tlower: 'lower low bottom lowerhalf lowerHalf showlowerhalf showLowerHalf showLower'\n\t})\n\n\t// we provide regl buffer per-trace, since trace data can be changed\n\tlet trace = (this.traces[i] || (this.traces[i] = {\n\t\tid: i,\n\t\tbuffer: regl.buffer({\n\t\t\tusage: 'dynamic',\n\t\t\ttype: 'float',\n\t\t\tdata: new Uint8Array()\n\t\t}),\n\t\tcolor: 'black',\n\t\tmarker: null,\n\t\tsize: 12,\n\t\tborderColor: 'transparent',\n\t\tborderSize: 1,\n\t\tviewport:  rect([regl._gl.drawingBufferWidth, regl._gl.drawingBufferHeight]),\n\t\tpadding: [0, 0, 0, 0],\n\t\topacity: 1,\n\t\tdiagonal: true,\n\t\tupper: true,\n\t\tlower: true\n\t}))\n\n\n\t// save styles\n\tif (o.color != null) {\n\t\ttrace.color = o.color\n\t}\n\tif (o.size != null) {\n\t\ttrace.size = o.size\n\t}\n\tif (o.marker != null) {\n\t\ttrace.marker = o.marker\n\t}\n\tif (o.borderColor != null) {\n\t\ttrace.borderColor = o.borderColor\n\t}\n\tif (o.borderSize != null) {\n\t\ttrace.borderSize = o.borderSize\n\t}\n\tif (o.opacity != null) {\n\t\ttrace.opacity = o.opacity\n\t}\n\tif (o.viewport) {\n\t\ttrace.viewport = rect(o.viewport)\n\t}\n\tif (o.diagonal != null) trace.diagonal = o.diagonal\n\tif (o.upper != null) trace.upper = o.upper\n\tif (o.lower != null) trace.lower = o.lower\n\n\t// put flattened data into buffer\n\tif (o.data) {\n\t\ttrace.buffer(flatten(o.data))\n\t\ttrace.columns = o.data.length\n\t\ttrace.count = o.data[0].length\n\n\t\t// detect bounds per-column\n\t\ttrace.bounds = []\n\n\t\tfor (let i = 0; i < trace.columns; i++) {\n\t\t\ttrace.bounds[i] = getBounds(o.data[i], 1)\n\t\t}\n\t}\n\n\t// add proper range updating markers\n\tlet multirange\n\tif (o.range) {\n\t\ttrace.range = o.range\n\t\tmultirange = trace.range && typeof trace.range[0] !== 'number'\n\t}\n\n\tif (o.domain) {\n\t\ttrace.domain = o.domain\n\t}\n\tlet multipadding = false\n\tif (o.padding != null) {\n\t\t// multiple paddings\n\t\tif (Array.isArray(o.padding) && o.padding.length === trace.columns && typeof o.padding[o.padding.length - 1] === 'number') {\n\t\t\ttrace.padding = o.padding.map(getPad)\n\t\t\tmultipadding = true\n\t\t}\n\t\t// single padding\n\t\telse {\n\t\t\ttrace.padding = getPad(o.padding)\n\t\t}\n\t}\n\n\t// create passes\n\tlet m = trace.columns\n\tlet n = trace.count\n\n\tlet w = trace.viewport.width\n\tlet h = trace.viewport.height\n\tlet left = trace.viewport.x\n\tlet top = trace.viewport.y\n\tlet iw = w / m\n\tlet ih = h / m\n\n\ttrace.passes = []\n\n\tfor (let i = 0; i < m; i++) {\n\t\tfor (let j = 0; j < m; j++) {\n\t\t\tif (!trace.diagonal && j === i) continue\n\t\t\tif (!trace.upper && i > j) continue\n\t\t\tif (!trace.lower && i < j) continue\n\n\t\t\tlet key = passId(trace.id, i, j)\n\n\t\t\tlet pass = this.passes[key] || (this.passes[key] = {})\n\n\t\t\tif (o.data) {\n\t\t\t\tif (o.transpose) {\n\t\t\t\t\tpass.positions = {\n\t\t\t\t\t\tx: {buffer: trace.buffer, offset: j, count: n, stride: m},\n\t\t\t\t\t\ty: {buffer: trace.buffer, offset: i, count: n, stride: m}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tpass.positions = {\n\t\t\t\t\t\tx: {buffer: trace.buffer, offset: j * n, count: n},\n\t\t\t\t\t\ty: {buffer: trace.buffer, offset: i * n, count: n}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpass.bounds = getBox(trace.bounds, i, j)\n\t\t\t}\n\n\t\t\tif (o.domain || o.viewport || o.data) {\n\t\t\t\tlet pad = multipadding ? getBox(trace.padding, i, j) : trace.padding\n\t\t\t\tif (trace.domain) {\n\t\t\t\t\tlet [lox, loy, hix, hiy] = getBox(trace.domain, i, j)\n\n\t\t\t\t\tpass.viewport = [\n\t\t\t\t\t\tleft + lox * w + pad[0],\n\t\t\t\t\t\ttop + loy * h + pad[1],\n\t\t\t\t\t\tleft + hix * w - pad[2],\n\t\t\t\t\t\ttop + hiy * h - pad[3]\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t// consider auto-domain equipartial\n\t\t\t\telse {\n\t\t\t\t\tpass.viewport = [\n\t\t\t\t\t\tleft + j * iw + iw * pad[0],\n\t\t\t\t\t\ttop + i * ih + ih * pad[1],\n\t\t\t\t\t\tleft + (j + 1) * iw - iw * pad[2],\n\t\t\t\t\t\ttop + (i + 1) * ih - ih * pad[3]\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (o.color) pass.color = trace.color\n\t\t\tif (o.size) pass.size = trace.size\n\t\t\tif (o.marker) pass.marker = trace.marker\n\t\t\tif (o.borderSize) pass.borderSize = trace.borderSize\n\t\t\tif (o.borderColor) pass.borderColor = trace.borderColor\n\t\t\tif (o.opacity) pass.opacity = trace.opacity\n\n\t\t\tif (o.range) {\n\t\t\t\tpass.range = multirange ? getBox(trace.range, i, j) : trace.range || pass.bounds\n\t\t\t}\n\n\t\t\ttrace.passes.push(key)\n\t\t}\n\t}\n\n\treturn this\n}\n\n\n// draw all or passed passes\nSPLOM.prototype.draw = function (...args) {\n\tif (!args.length) {\n\t\tthis.scatter.draw()\n\t}\n\telse {\n\t\tlet idx = []\n\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\t// draw(0, 2, 5) - draw traces\n\t\t\tif (typeof args[i] === 'number' ) {\n\t\t\t\tlet { passes, passOffset } = this.traces[args[i]]\n\t\t\t\tidx.push(...arrRange(passOffset, passOffset + passes.length))\n\t\t\t}\n\t\t\t// draw([0, 1, 2 ...], [3, 4, 5]) - draw points\n\t\t\telse if (args[i].length) {\n\t\t\t\tlet els = args[i]\n\t\t\t\tlet { passes, passOffset } = this.traces[i]\n\t\t\t\tpasses = passes.map((passId, i) => {\n\t\t\t\t\tidx[passOffset + i] = els\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tthis.scatter.draw(...idx)\n\t}\n\n\treturn this\n}\n\n\n// dispose resources\nSPLOM.prototype.destroy = function () {\n\tthis.traces.forEach(trace => {\n\t\tif (trace.buffer && trace.buffer.destroy) trace.buffer.destroy()\n\t})\n\tthis.traces = null\n\tthis.passes = null\n\n\tthis.scatter.destroy()\n\n\treturn this\n}\n\n\n// return pass corresponding to trace i- j- square\nfunction passId (trace, i, j) {\n\tlet id = (trace.id != null ? trace.id : trace)\n\tlet n = i\n\tlet m = j\n\tlet key = id << 16 | (n & 0xff) << 8 | m & 0xff\n\n\treturn key\n}\n\n\n// return bounding box corresponding to a pass\nfunction getBox (items, i, j) {\n\tlet ilox, iloy, ihix, ihiy, jlox, jloy, jhix, jhiy\n\tlet iitem = items[i], jitem = items[j]\n\n\tif (iitem.length > 2) {\n\t\tilox = iitem[0]\n\t\tihix = iitem[2]\n\t\tiloy = iitem[1]\n\t\tihiy = iitem[3]\n\t}\n\telse if (iitem.length) {\n\t\tilox = iloy = iitem[0]\n\t\tihix = ihiy = iitem[1]\n\t}\n\telse {\n\t\tilox = iitem.x\n\t\tiloy = iitem.y\n\t\tihix = iitem.x + iitem.width\n\t\tihiy = iitem.y + iitem.height\n\t}\n\n\tif (jitem.length > 2) {\n\t\tjlox = jitem[0]\n\t\tjhix = jitem[2]\n\t\tjloy = jitem[1]\n\t\tjhiy = jitem[3]\n\t}\n\telse if (jitem.length) {\n\t\tjlox = jloy = jitem[0]\n\t\tjhix = jhiy = jitem[1]\n\t}\n\telse {\n\t\tjlox = jitem.x\n\t\tjloy = jitem.y\n\t\tjhix = jitem.x + jitem.width\n\t\tjhiy = jitem.y + jitem.height\n\t}\n\n\treturn [ jlox, iloy, jhix, ihiy ]\n}\n\n\nfunction getPad (arg) {\n\tif (typeof arg === 'number') return [arg, arg, arg, arg]\n\telse if (arg.length === 2) return [arg[0], arg[1], arg[0], arg[1]]\n\telse {\n\t\tlet box = rect(arg)\n\t\treturn [box.x, box.y, box.x + box.width, box.y + box.height]\n\t}\n}\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\n// The naming convention is:\n//   - events are attached as `'plotly_' + eventName.toLowerCase()`\n//   - react props are `'on' + eventName`\nconst eventNames = [\n  'AfterExport',\n  'AfterPlot',\n  'Animated',\n  'AnimatingFrame',\n  'AnimationInterrupted',\n  'AutoSize',\n  'BeforeExport',\n  'BeforeHover',\n  'ButtonClicked',\n  'Click',\n  'ClickAnnotation',\n  'Deselect',\n  'DoubleClick',\n  'Framework',\n  'Hover',\n  'LegendClick',\n  'LegendDoubleClick',\n  'Relayout',\n  'Relayouting',\n  'Restyle',\n  'Redraw',\n  'Selected',\n  'Selecting',\n  'SliderChange',\n  'SliderEnd',\n  'SliderStart',\n  'SunburstClick',\n  'Transitioning',\n  'TransitionInterrupted',\n  'Unhover',\n  'WebGlContextLost',\n];\n\nconst updateEvents = [\n  'plotly_restyle',\n  'plotly_redraw',\n  'plotly_relayout',\n  'plotly_relayouting',\n  'plotly_doubleclick',\n  'plotly_animated',\n  'plotly_sunburstclick',\n];\n\n// Check if a window is available since SSR (server-side rendering)\n// breaks unnecessarily if you try to use it server-side.\nconst isBrowser = typeof window !== 'undefined';\n\nexport default function plotComponentFactory(Plotly) {\n  class PlotlyComponent extends Component {\n    constructor(props) {\n      super(props);\n\n      this.p = Promise.resolve();\n      this.resizeHandler = null;\n      this.handlers = {};\n\n      this.syncWindowResize = this.syncWindowResize.bind(this);\n      this.syncEventHandlers = this.syncEventHandlers.bind(this);\n      this.attachUpdateEvents = this.attachUpdateEvents.bind(this);\n      this.getRef = this.getRef.bind(this);\n      this.handleUpdate = this.handleUpdate.bind(this);\n      this.figureCallback = this.figureCallback.bind(this);\n      this.updatePlotly = this.updatePlotly.bind(this);\n    }\n\n    updatePlotly(shouldInvokeResizeHandler, figureCallbackFunction, shouldAttachUpdateEvents) {\n      this.p = this.p\n        .then(() => {\n          if (this.unmounting) {\n            return;\n          }\n          if (!this.el) {\n            throw new Error('Missing element reference');\n          }\n          // eslint-disable-next-line consistent-return\n          return Plotly.react(this.el, {\n            data: this.props.data,\n            layout: this.props.layout,\n            config: this.props.config,\n            frames: this.props.frames,\n          });\n        })\n        .then(() => {\n          if (this.unmounting) {\n            return;\n          }\n          this.syncWindowResize(shouldInvokeResizeHandler);\n          this.syncEventHandlers();\n          this.figureCallback(figureCallbackFunction);\n          if (shouldAttachUpdateEvents) {\n            this.attachUpdateEvents();\n          }\n        })\n        .catch((err) => {\n          if (this.props.onError) {\n            this.props.onError(err);\n          }\n        });\n    }\n\n    componentDidMount() {\n      this.unmounting = false;\n\n      this.updatePlotly(true, this.props.onInitialized, true);\n    }\n\n    componentDidUpdate(prevProps) {\n      this.unmounting = false;\n\n      // frames *always* changes identity so fall back to check length only :(\n      const numPrevFrames =\n        prevProps.frames && prevProps.frames.length ? prevProps.frames.length : 0;\n      const numNextFrames =\n        this.props.frames && this.props.frames.length ? this.props.frames.length : 0;\n\n      const figureChanged = !(\n        prevProps.layout === this.props.layout &&\n        prevProps.data === this.props.data &&\n        prevProps.config === this.props.config &&\n        numNextFrames === numPrevFrames\n      );\n      const revisionDefined = prevProps.revision !== void 0;\n      const revisionChanged = prevProps.revision !== this.props.revision;\n\n      if (!figureChanged && (!revisionDefined || (revisionDefined && !revisionChanged))) {\n        return;\n      }\n\n      this.updatePlotly(false, this.props.onUpdate, false);\n    }\n\n    componentWillUnmount() {\n      this.unmounting = true;\n\n      this.figureCallback(this.props.onPurge);\n\n      if (this.resizeHandler && isBrowser) {\n        window.removeEventListener('resize', this.resizeHandler);\n        this.resizeHandler = null;\n      }\n\n      this.removeUpdateEvents();\n\n      Plotly.purge(this.el);\n    }\n\n    attachUpdateEvents() {\n      if (!this.el || !this.el.removeListener) {\n        return;\n      }\n\n      updateEvents.forEach((updateEvent) => {\n        this.el.on(updateEvent, this.handleUpdate);\n      });\n    }\n\n    removeUpdateEvents() {\n      if (!this.el || !this.el.removeListener) {\n        return;\n      }\n\n      updateEvents.forEach((updateEvent) => {\n        this.el.removeListener(updateEvent, this.handleUpdate);\n      });\n    }\n\n    handleUpdate() {\n      this.figureCallback(this.props.onUpdate);\n    }\n\n    figureCallback(callback) {\n      if (typeof callback === 'function') {\n        const {data, layout} = this.el;\n        const frames = this.el._transitionData ? this.el._transitionData._frames : null;\n        const figure = {data, layout, frames};\n        callback(figure, this.el);\n      }\n    }\n\n    syncWindowResize(invoke) {\n      if (!isBrowser) {\n        return;\n      }\n\n      if (this.props.useResizeHandler && !this.resizeHandler) {\n        this.resizeHandler = () => Plotly.Plots.resize(this.el);\n        window.addEventListener('resize', this.resizeHandler);\n        if (invoke) {\n          this.resizeHandler();\n        }\n      } else if (!this.props.useResizeHandler && this.resizeHandler) {\n        window.removeEventListener('resize', this.resizeHandler);\n        this.resizeHandler = null;\n      }\n    }\n\n    getRef(el) {\n      this.el = el;\n\n      if (this.props.debug && isBrowser) {\n        window.gd = this.el;\n      }\n    }\n\n    // Attach and remove event handlers as they're added or removed from props:\n    syncEventHandlers() {\n      eventNames.forEach((eventName) => {\n        const prop = this.props['on' + eventName];\n        const handler = this.handlers[eventName];\n        const hasHandler = Boolean(handler);\n\n        if (prop && !hasHandler) {\n          this.addEventHandler(eventName, prop);\n        } else if (!prop && hasHandler) {\n          // Needs to be removed:\n          this.removeEventHandler(eventName);\n        } else if (prop && hasHandler && prop !== handler) {\n          // replace the handler\n          this.removeEventHandler(eventName);\n          this.addEventHandler(eventName, prop);\n        }\n      });\n    }\n\n    addEventHandler(eventName, prop) {\n      this.handlers[eventName] = prop;\n      this.el.on(this.getPlotlyEventName(eventName), this.handlers[eventName]);\n    }\n\n    removeEventHandler(eventName) {\n      this.el.removeListener(this.getPlotlyEventName(eventName), this.handlers[eventName]);\n      delete this.handlers[eventName];\n    }\n\n    getPlotlyEventName(eventName) {\n      return 'plotly_' + eventName.toLowerCase();\n    }\n\n    render() {\n      return (\n        <div\n          id={this.props.divId}\n          style={this.props.style}\n          ref={this.getRef}\n          className={this.props.className}\n        />\n      );\n    }\n  }\n\n  PlotlyComponent.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.object),\n    config: PropTypes.object,\n    layout: PropTypes.object,\n    frames: PropTypes.arrayOf(PropTypes.object),\n    revision: PropTypes.number,\n    onInitialized: PropTypes.func,\n    onPurge: PropTypes.func,\n    onError: PropTypes.func,\n    onUpdate: PropTypes.func,\n    debug: PropTypes.bool,\n    style: PropTypes.object,\n    className: PropTypes.string,\n    useResizeHandler: PropTypes.bool,\n    divId: PropTypes.string,\n  };\n\n  eventNames.forEach((eventName) => {\n    PlotlyComponent.propTypes['on' + eventName] = PropTypes.func;\n  });\n\n  PlotlyComponent.defaultProps = {\n    debug: false,\n    useResizeHandler: false,\n    data: [],\n    style: {position: 'relative', display: 'inline-block'},\n  };\n\n  return PlotlyComponent;\n}\n","import plotComponentFactory from './factory';\nimport Plotly from 'plotly.js/dist/plotly';\n\nconst PlotComponent = plotComponentFactory(Plotly);\n\nexport default PlotComponent;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  names.has(getNodeParentName(name));\n","export default (name: string) =>\n  name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n","export default <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown): any => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path as keyof T])\n      ? defaultValue\n      : obj[path as keyof T]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Control, FieldValues, FormState, ReadFormState } from '../types';\n\nexport default <TFieldValues extends FieldValues, TContext = any>(\n  formState: FormState<TFieldValues>,\n  control: Control<TFieldValues, TContext>,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {\n    defaultValues: control._defaultValues,\n  } as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n          control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import React from 'react';\n\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useFrom methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const FormProvider = <TFieldValues extends FieldValues, TContext = any>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => {\n  const { children, ...data } = props;\n  return (\n    <HookFormContext.Provider value={data as unknown as UseFormReturn}>\n      {children}\n    </HookFormContext.Provider>\n  );\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport {\n  Control,\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  ReadFormState,\n} from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T extends FieldValues, K extends ReadFormState>(\n  formStateData: Partial<FormState<T>> & { name?: InternalFieldName },\n  _proxyFormState: K,\n  updateFormState: Control<T>['_updateFormState'],\n  isRoot?: boolean,\n) => {\n  updateFormState(formStateData);\n  const { name, ...formState } = formStateData;\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import React from 'react';\n\nimport { Subject } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  next: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.next,\n      });\n\n    return () => {\n      subscription && subscription.unsubscribe();\n    };\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { DeepPartial, FieldValues, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default <T>(\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n  defaultValue?: DeepPartial<T> | unknown,\n) => {\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names);\n    return get(formValues, names, defaultValue);\n  }\n\n  if (Array.isArray(names)) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n\n  return formValues;\n};\n","import isObject from './isObject';\n\nexport default (tempObject: object) => {\n  const prototypeCopy =\n    tempObject.constructor && tempObject.constructor.prototype;\n\n  return (\n    isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf')\n  );\n};\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isObject from './isObject';\nimport isPlainObject from './isPlainObject';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (\n    !(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n    (isArray || isObject(data))\n  ) {\n    copy = isArray ? [] : {};\n\n    if (!Array.isArray(data) && !isPlainObject(data)) {\n      copy = data;\n    } else {\n      for (const key in data) {\n        copy[key] = cloneObject(data[key]);\n      }\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name?: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const { _f, ...currentField } = field;\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus) {\n          _f.ref.focus();\n          break;\n        } else if (_f.refs && _f.refs[0].focus) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(currentField)) {\n        focusFieldBy(currentField, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport compact from '../utils/compact';\nimport get from '../utils/get';\nimport set from '../utils/set';\n\nexport default <T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  error: Partial<Record<string, FieldError>>,\n  name: InternalFieldName,\n): FieldErrors<T> => {\n  const fieldArrayErrors = compact(get(errors, name));\n  set(fieldArrayErrors, 'root', error[name]);\n  set(errors, name, fieldArrayErrors);\n  return errors;\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isWeb from './isWeb';\n\nexport default (value: unknown): value is HTMLElement => {\n  if (!isWeb) {\n    return false;\n  }\n\n  const owner = value ? ((value as HTMLElement).ownerDocument as Document) : 0;\n  return (\n    value instanceof\n    (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement)\n  );\n};\n","import React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  FieldValues,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport get from '../utils/get';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends FieldValues>(\n  field: Field,\n  formValues: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n  isFieldArray?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  const inputValue: NativeFieldValue = get(formValues, name);\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) &&\n      isUndefined(ref.value) &&\n      isUndefined(inputValue)) ||\n    (isHTMLElement(ref) && ref.value === '') ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    isFieldArray\n      ? !Array.isArray(inputValue) || !inputValue.length\n      : required &&\n        ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n          (isBoolean(inputValue) && !inputValue) ||\n          (isCheckBox && !getCheckboxValue(refs).isValid) ||\n          (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        (inputValue ? +inputValue : inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      const convertTimeToDate = (time: unknown) =>\n        new Date(new Date().toDateString() + ' ' + time);\n      const isTime = ref.type == 'time';\n      const isWeek = ref.type == 'week';\n\n      if (isString(maxOutput.value) && inputValue) {\n        exceedMax = isTime\n          ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n          : isWeek\n          ? inputValue > maxOutput.value\n          : valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value) && inputValue) {\n        exceedMin = isTime\n          ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n          : isWeek\n          ? inputValue < minOutput.value\n          : valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (\n    (maxLength || minLength) &&\n    !isEmpty &&\n    (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))\n  ) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue, formValues);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue, formValues),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction isEmptyArray(obj: unknown[]) {\n  for (const key in obj) {\n    if (!isUndefined(obj[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default function unset(object: any, path: string | (string | number)[]) {\n  const paths = Array.isArray(path)\n    ? path\n    : isKey(path)\n    ? [path]\n    : stringToPath(path);\n\n  const childObject = paths.length === 1 ? object : baseGet(object, paths);\n\n  const index = paths.length - 1;\n  const key = paths[index];\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  if (\n    index !== 0 &&\n    ((isObject(childObject) && isEmptyObject(childObject)) ||\n      (Array.isArray(childObject) && isEmptyArray(childObject)))\n  ) {\n    unset(object, paths.slice(0, -1));\n  }\n\n  return object;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        deepEqual(data[key], formValues[key])\n          ? delete dirtyFieldsFromValues[key]\n          : (dirtyFieldsFromValues[key] = true);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : value\n      ? +value\n      : value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup<T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport getValidationModes from './getValidationModes';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport updateFieldArrayRootError from './updateFieldArrayRootError';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n  flushRootRender: () => void,\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  const shouldCaptureDirtyFields =\n    props.resetOptions && props.resetOptions.keepDirtyValues;\n  let _formState: FormState<TFieldValues> = {\n    submitCount: 0,\n    isDirty: false,\n    isLoading: true,\n    isValidating: false,\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    touchedFields: {},\n    dirtyFields: {},\n    errors: {},\n  };\n  let _fields = {};\n  let _defaultValues = isObject(_options.defaultValues)\n    ? cloneObject(_options.defaultValues) || {}\n    : {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  };\n  let delayErrorCallback: DelayCallback | null;\n  let timer = 0;\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T) =>\n    (wait: number) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(callback, wait);\n    };\n\n  const _updateValid = async (shouldUpdateValid?: boolean) => {\n    if (_proxyFormState.isValid || shouldUpdateValid) {\n      const isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuiltInValidation(_fields, true);\n\n      if (isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n  };\n\n  const _updateIsValidating = (value: boolean) =>\n    _proxyFormState.isValidating &&\n    _subjects.state.next({\n      isValidating: value,\n    });\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndState = true,\n  ) => {\n    if (args && method) {\n      _stateFlags.action = true;\n      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        _proxyFormState.touchedFields &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        name,\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _stateFlags.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let shouldUpdateField = false;\n    let isPreviousDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n\n    if (!isBlurEvent || shouldDirty) {\n      if (_proxyFormState.isDirty) {\n        isPreviousDirty = _formState.isDirty;\n        _formState.isDirty = output.isDirty = _getDirty();\n        shouldUpdateField = isPreviousDirty !== output.isDirty;\n      }\n\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isPreviousDirty = get(_formState.dirtyFields, name);\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      shouldUpdateField =\n        shouldUpdateField ||\n        (_proxyFormState.dirtyFields &&\n          isPreviousDirty !== !isCurrentFieldPristine);\n    }\n\n    if (isBlurEvent) {\n      const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n      if (!isPreviousFieldTouched) {\n        set(_formState.touchedFields, name, isBlurEvent);\n        output.touchedFields = _formState.touchedFields;\n        shouldUpdateField =\n          shouldUpdateField ||\n          (_proxyFormState.touchedFields &&\n            isPreviousFieldTouched !== isBlurEvent);\n      }\n    }\n\n    shouldUpdateField && shouldRender && _subjects.state.next(output);\n\n    return shouldUpdateField ? output : {};\n  };\n\n  const shouldRenderByError = (\n    name: InternalFieldName,\n    isValid?: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid &&\n      isBoolean(isValid) &&\n      _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback = debounce(() => updateErrors(name, error));\n      delayErrorCallback(props.delayError);\n    } else {\n      clearTimeout(timer);\n      delayErrorCallback = null;\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      (error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n      !isEmptyObject(fieldState) ||\n      shouldUpdateValid\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    _updateIsValidating(false);\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    await _options.resolver!(\n      _formValues as TFieldValues,\n      _options.context,\n      getResolverOptions(\n        name || _names.mount,\n        _fields,\n        _options.criteriaMode,\n        _options.shouldUseNativeValidation,\n      ),\n    );\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const executeBuiltInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context: {\n      valid: boolean;\n    } = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const { _f, ...fieldValue } = field;\n\n        if (_f) {\n          const isFieldArrayRoot = _names.array.has(_f.name);\n          const fieldError = await validateField(\n            field,\n            _formValues,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n            isFieldArrayRoot,\n          );\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          !shouldOnlyCheckValid &&\n            (get(fieldError, _f.name)\n              ? isFieldArrayRoot\n                ? updateFieldArrayRootError(\n                    _formState.errors,\n                    fieldError,\n                    _f.name,\n                  )\n                : set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name));\n        }\n\n        fieldValue &&\n          (await executeBuiltInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) =>\n    generateWatchOutput(\n      names,\n      _names,\n      {\n        ...(_stateFlags.mount\n          ? _formValues\n          : isUndefined(defaultValue)\n          ? _defaultValues\n          : isString(names)\n          ? { [names]: defaultValue }\n          : defaultValue),\n      },\n      isGlobal,\n      defaultValue,\n    );\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _stateFlags.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (optionRef) =>\n              (optionRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(optionRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name,\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U extends SetValueConfig,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}`;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n    !_stateFlags.mount && flushRootRender();\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n    const getCurrentFieldValue = () =>\n      target.type ? getFieldValue(field._f) : getEventValue(event);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = getCurrentFieldValue();\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n        delayErrorCallback && delayErrorCallback(0);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        _proxyFormState.isValid && _updateValid();\n\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      _updateIsValidating(true);\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            _formValues,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        if (error) {\n          isValid = false;\n        } else if (_proxyFormState.isValid) {\n          isValid = await executeBuiltInValidation(_fields, true);\n        }\n      }\n\n      field._f.deps &&\n        trigger(\n          field._f.deps as FieldPath<TFieldValues> | FieldPath<TFieldValues>[],\n        );\n      shouldRenderByError(name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _updateIsValidating(true);\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuiltInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuiltInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver || !name ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => key && get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames)\n      : fieldNames.map((name) => get(values, name));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n    error: get((formState || _formState).errors, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {});\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: DeepPartial<TFieldValues>,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (payload) =>\n            name(\n              _getWatch(undefined, defaultValue),\n              payload as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n\n    set(_fields, name, {\n      ...(field || {}),\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    field\n      ? disabledIsDefined &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true, options.value);\n\n    return {\n      ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: [\n                      ...refs.filter(live),\n                      fieldRef,\n                      ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                    ],\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const _focusError = () =>\n    _options.shouldFocusError &&\n    focusFieldBy(\n      _fields,\n      (key) => key && get(_formState.errors, key),\n      _names.mount,\n    );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let fieldValues = cloneObject(_formValues);\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      if (_options.resolver) {\n        const { errors, values } = await _executeSchema();\n        _formState.errors = errors;\n        fieldValues = values;\n      } else {\n        await executeBuiltInValidation(_fields);\n      }\n\n      if (isEmptyObject(_formState.errors)) {\n        _subjects.state.next({\n          errors: {},\n        });\n        await onValid(fieldValues as TFieldValues, e);\n      } else {\n        if (onInvalid) {\n          await onInvalid({ ..._formState.errors }, e);\n        }\n        _focusError();\n      }\n\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors),\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors,\n      });\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, get(_defaultValues, name));\n      } else {\n        setValue(name, options.defaultValue);\n        set(_defaultValues, name, options.defaultValue);\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, get(_defaultValues, name))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const _reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values =\n      formValues && !isEmptyObject(formValues)\n        ? cloneUpdatedValues\n        : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (keepStateOptions.keepDirtyValues || shouldCaptureDirtyFields) {\n        for (const fieldName of _names.mount) {\n          get(_formState.dirtyFields, fieldName)\n            ? set(values, fieldName, get(_formValues, fieldName))\n            : setValue(\n                fieldName as FieldPath<TFieldValues>,\n                get(values, fieldName),\n              );\n        }\n      } else {\n        if (isWeb && isUndefined(formValues)) {\n          for (const name of _names.mount) {\n            const field = get(_fields, name);\n            if (field && field._f) {\n              const fieldReference = Array.isArray(field._f.refs)\n                ? field._f.refs[0]\n                : field._f.ref;\n\n              if (isHTMLElement(fieldReference)) {\n                const form = fieldReference.closest('form');\n                if (form) {\n                  form.reset();\n                  break;\n                }\n              }\n            }\n          }\n        }\n\n        _fields = {};\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n\n      _subjects.array.next({\n        values,\n      });\n\n      _subjects.watch.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    !_stateFlags.mount && flushRootRender();\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty:\n        keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\n          ? _formState.isDirty\n          : !!(\n              keepStateOptions.keepDefaultValues &&\n              !deepEqual(formValues, _defaultValues)\n            ),\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields:\n        keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\n          ? _formState.dirtyFields\n          : keepStateOptions.keepDefaultValues && formValues\n          ? getDirtyFields(_defaultValues, formValues)\n          : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (formValues, keepStateOptions) =>\n    _reset(\n      isFunction(formValues)\n        ? formValues(_formValues as TFieldValues)\n        : formValues,\n      keepStateOptions,\n    );\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n    const fieldReference = field && field._f;\n\n    if (fieldReference) {\n      const fieldRef = fieldReference.refs\n        ? fieldReference.refs[0]\n        : fieldReference.ref;\n\n      if (fieldRef.focus) {\n        fieldRef.focus();\n        options.shouldSelect && fieldRef.select();\n      }\n    }\n  };\n\n  const _updateFormState = (\n    updatedFormState: Partial<FormState<TFieldValues>>,\n  ) => {\n    _formState = {\n      ..._formState,\n      ...updatedFormState,\n    };\n  };\n\n  if (isFunction(_options.defaultValues)) {\n    _options.defaultValues().then((values) => {\n      reset(values, _options.resetOptions);\n      _subjects.state.next({\n        isLoading: false,\n      });\n    });\n  }\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      _executeSchema,\n      _focusError,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _reset,\n      _updateFormState,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport deepEqual from './utils/deepEqual';\nimport isFunction from './utils/isFunction';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    isLoading: true,\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    submitCount: 0,\n    dirtyFields: {},\n    touchedFields: {},\n    errors: {},\n    defaultValues: isFunction(props.defaultValues)\n      ? undefined\n      : props.defaultValues,\n  });\n\n  if (!_formControl.current) {\n    _formControl.current = {\n      ...createFormControl(props, () =>\n        updateFormState((formState) => ({ ...formState })),\n      ),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n  control._options = props;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    next: (\n      value: Partial<FormState<TFieldValues>> & { name?: InternalFieldName },\n    ) => {\n      if (\n        shouldRenderFormState(\n          value,\n          control._proxyFormState,\n          control._updateFormState,\n          true,\n        )\n      ) {\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._updateValid();\n      control._stateFlags.mount = true;\n    }\n\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n\n    control._removeUnmounted();\n  });\n\n  React.useEffect(() => {\n    if (props.values && !deepEqual(props.values, control._defaultValues)) {\n      control._reset(props.values, control._options.resetOptions);\n    }\n  }, [props.values, control]);\n\n  React.useEffect(() => {\n    formState.submitCount && control._focusError();\n  }, [control, formState.submitCount]);\n\n  _formControl.current.formState = getProxyFormState(formState, control);\n\n  return _formControl.current;\n}\n"],"names":["const","__webpack_modules__","__unused_webpack_module","Lib","__webpack_require__","let","module","__unused_webpack_exports","exports","i","passes","Plotly","factory","PlotlyComponent","_inherits","props","_classCallCheck","_this","p","Promise","resolve","resizeHandler","handlers","syncWindowResize","bind","syncEventHandlers","attachUpdateEvents","getRef","handleUpdate","figureCallback","updatePlotly","_createClass","key","value","shouldInvokeResizeHandler","figureCallbackFunction","shouldAttachUpdateEvents","this","then","_this2","unmounting","el","Error","react","data","layout","config","frames","err","onError","onInitialized","prevProps","numPrevFrames","length","numNextFrames","figureChanged","revisionDefined","revision","revisionChanged","onUpdate","onPurge","isBrowser","window","removeEventListener","removeUpdateEvents","purge","removeListener","updateEvents","forEach","updateEvent","_this3","on","_this4","callback","_transitionData","_frames","invoke","useResizeHandler","Plots","resize","_this5","addEventListener","debug","gd","eventNames","eventName","prop","_this6","handler","hasHandler","Boolean","addEventHandler","removeEventHandler","getPlotlyEventName","toLowerCase","_react","id","divId","style","ref","className","Component","propTypes","PropTypes","arrayOf","object","number","func","bool","string","defaultProps","position","display","element","type","Date","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","has","substring","search","getNodeParentName","filter","val","undefined","obj","path","defaultValue","result","compact","split","reduce","isUndefined","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","React","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","get","_key","_proxyFormState","keys","formStateData","updateFormState","isEmptyObject","find","useSubscribe","_props","current","subscription","disabled","subject","subscribe","next","unsubscribe","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","HTMLElement","document","cloneObject","copy","Set","isWeb","Blob","FileList","isPlainObject","validateAllFieldCriteria","errors","message","types","test","input","replace","set","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","currentField","focus","refs","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isBlurEvent","some","watchName","startsWith","slice","error","fieldArrayErrors","owner","ownerDocument","defaultView","RegExp","defaultResult","isValid","validResult","options","values","option","attributes","defaultReturn","previous","getValidateError","isMessage","every","isBoolean","validationData","isRegex","shouldUseNativeValidation","isFieldArray","valueAsNumber","mount","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isRadioInput","isCheckBox","isRadioOrCheckbox","isEmpty","isFileInput","isHTMLElement","appendErrorsCurry","appendErrors","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getCheckboxValue","getRadioValue","getValueAndMessage","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","exceedMin","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","isFunction","validateError","validationResult","validateField","unset","paths","childObject","updatePath","baseGet","isEmptyArray","createSubject","_observers","observers","observer","push","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","isConnected","markFieldsDirty","isParentNodeArray","objectHasFunction","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","setValueAs","NaN","getFieldValue","files","isMultipleSelect","selectedOptions","getFieldValueAs","_fields","criteriaMode","rule","source","schemaErrorLookup","join","foundError","pop","isTouched","isSubmitted","reValidateMode","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","flushRootRender","_options","shouldCaptureDirtyFields","resetOptions","keepDirtyValues","_formState","submitCount","isDirty","isLoading","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","_formValues","shouldUnregister","_stateFlags","action","unMount","array","timer","_subjects","state","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","_updateValid","shouldUpdateValid","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","updateFieldArrayRootError","getValues","_getWatch","generateWatchOutput","fieldReference","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","getDirtyFields","isWatched","getCurrentFieldValue","getEventValue","shouldSkipValidation","hasValidation","deps","skipValidation","watched","previousErrorLookupResult","errorLookupResult","fieldNames","convertToArrayPayload","shouldFocus","getFieldState","invalid","unregister","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","disabledIsDefined","getRuleValue","fieldRef","querySelectorAll","radioOrCheckbox","live","isNameInFieldArray","_focusError","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","_removeUnmounted","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","argA","argB","unsetEmptyArray","_getFieldArray","_updateFormState","handleSubmit","onValid","onInvalid","e","preventDefault","persist","payload","resetField","clearErrors","inputName","setError","setFocus","shouldSelect","select","useForm","_formControl","shouldRenderFormState","getProxyFormState"],"sourceRoot":""}