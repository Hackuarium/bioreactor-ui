{"version":3,"sources":["services/devicesOptions.js","services/db.js","services/mqttService.js","services/deviceService.js","components/devicesList.jsx","components/deviceModal.jsx","pages/broadcastDevices.jsx","hooks/useNotification.js"],"names":["DEVICES_DB","DEFAULT_PORT","DEFAULT_PROTOCOL","DEVICE_PROTOCOLS","DEVICE_KINDS","DB","client","_db","_dbInfo","connect","dbName","db_name","PouchDB","info","then","res","console","log","getInfo","put","doc","Promise","reject","Error","get","docId","getAll","options","a","allDocs","include_docs","docs","rows","update","_id","_rev","remove","removeAll","destroy","JSON","stringify","close","callback","isFunction","url","protocol","port","username","password","resolve","onSuccess","onError","connected","hostname","brokerUrl","mqtt","keepalive","reconnectPeriod","on","stream","err","error","name","end","getClientInstance","subscribe","topic","onMessageReceived","qos","payload","data","parseCurrentSettings","toString","unsubscribe","getSavedDevices","dbClient","db","list","map","item","getDevice","deviceId","device","updateDevice","deviceData","deleteDevice","deviceID","catch","e","message","addDevice","props","kind","key","id","r","exist","inserted","connectDevice","mqttClient","onSubscribe","Date","now","disconnect","getAllData","getLastData","descending","limit","DevicesList","onSelect","onEdit","onDelete","useState","selectedElement","setSelectedElement","handleSelect","element","className","onClick","protocolOptions","val","label","toUpperCase","value","kindOptions","validationSchema","Yup","shape","max","matches","required","positive","integer","DeviceModal","isOpen","onClose","onSave","onUpdate","initialValues","updateMode","isEmpty","footerMessage","setFooterMessage","formRef","useRef","_initialValues","onSubmit","values","useEffect","setTimeout","renderFooterMessage","state","onRequestClose","icon","iconColor","animated","hasCloseButton","requestCloseOnBackdrop","requestCloseOnEsc","fluid","wrapperComponent","Form","wrapperProps","innerRef","Header","Body","placeholder","disabled","inputClassName","leadingInlineAddon","renderOption","o","getValue","type","Footer","stopPropagation","current","BroadcastDevices","history","match","render","setRender","isModalOpen","setIsModalOpen","devicesList","setDevicesList","onEditValues","setOnEditValues","addErrorNotification","notificationContext","useNotificationCenter","title","addNotification","content","addInfoNotification","useNotification","push"],"mappings":"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","file":"static/js/5.21f41a08.chunk.js","sourcesContent":["// Default Values\n\nexport const DEVICES_DB = 'BIOREACTOR_devices';\nexport const DEFAULT_PORT = '9001';\nexport const DEFAULT_PROTOCOL = 'tcp';\n\n// Static Values\n\nexport const DEVICE_TYPE = {\n  broadcast: 'broadcast',\n  interactive: 'interactive',\n  local: 'local',\n};\n\nexport const DEVICE_PROTOCOLS = ['tcp', 'http'];\n\nexport const DEVICE_KINDS = [\n  'computer',\n  'beemos',\n  'openBio',\n  'openBio6',\n  'openSpectro',\n  'simpleSpectro',\n  'solar2015',\n];\n","import PouchDB from 'pouchdb';\nimport { isFunction } from 'lodash';\n\n// Wrap Db interface in case of switching to another Db other than \"PouchDb\"\n\nfunction DB() {\n  let _db = null;\n  let _dbInfo = {};\n\n  const connect = (dbName) => {\n    if (!_db || (_dbInfo && _dbInfo.db_name !== dbName)) {\n      _db = new PouchDB(dbName);\n      _db.info().then((res) => (_dbInfo = res));\n      console.log(`connected to DB \"${dbName}\"`);\n    }\n\n    // DB operations to return\n\n    const getInfo = () => _dbInfo;\n\n    const put = (doc) => {\n      if (!('_id' in doc))\n        return Promise.reject(new Error('doc must include _id'));\n      return _db.put(doc);\n    };\n\n    const get = (docId) => _db.get(docId);\n\n    const getAll = async (options) => {\n      const docs = await _db.allDocs({\n        include_docs: true,\n        ...options,\n      });\n      //console.log(`get ${docs.total_rows} rows`);\n      return docs.rows;\n    };\n\n    const update = (doc) => {\n      if (!('_id' in doc))\n        return Promise.reject(new Error('doc must include _id'));\n      return _db\n        .get(doc._id)\n        .then((res) => _db.put({ ...doc, _rev: res._rev }));\n    };\n\n    const remove = (docId) => {\n      return _db\n        .get(docId)\n        .then((res) => _db.remove({ _id: docId, _rev: res._rev }));\n    };\n\n    const removeAll = () =>\n      _db.destroy().then((res) => {\n        _db = null;\n        console.log(`DB \"${dbName}\" destroyed : ` + JSON.stringify(res));\n      });\n\n    const close = (callback) =>\n      _db.close(() => {\n        _db = null;\n        console.log(`DB \"${dbName}\" closed`);\n        isFunction(callback) && callback();\n      });\n\n    return {\n      getInfo,\n      put,\n      get,\n      getAll,\n      update,\n      remove,\n      removeAll,\n      close,\n    };\n  };\n  return { connect };\n}\n\nexport default DB();\n","import mqtt from 'mqtt';\nimport { isFunction } from 'lodash';\nimport { parseCurrentSettings } from 'legoino-util';\nimport { DEFAULT_PORT, DEFAULT_PROTOCOL } from './devicesOptions';\n\n// Private Functions\nlet client;\n\nconst getClientInstance = (\n  url,\n  protocol = DEFAULT_PROTOCOL,\n  port = DEFAULT_PORT,\n  username,\n  password,\n  onSuccess,\n  onError,\n) => {\n  // if client is already connected\n  if (client && client.connected && client.options.hostname === url)\n    isFunction(onSuccess) && onSuccess(client);\n\n  const brokerUrl = `${protocol}://${url}:${port}`;\n  client = mqtt.connect(brokerUrl, {\n    keepalive: 300,\n    reconnectPeriod: 5000,\n  });\n\n  client.on('connect', () => {\n    console.log(`connected to ${brokerUrl} : ${client.connected}`);\n    isFunction(onSuccess) && onSuccess(client);\n  });\n\n  client.stream.on('error', (err) => {\n    console.log(err);\n    const error = new Error(`Couldn't connect to BROKER \"${brokerUrl}\"`);\n    error.name = 'Mqtt Error';\n    client.end();\n    isFunction(onError) && onError(error);\n  });\n};\n\nconst parseToJson = (data) => {\n  return parseCurrentSettings(data.toString(), {});\n};\n\n// Public Functions\n\nexport const connect = (url, protocol, port, username, password) => {\n  const clientPromise = new Promise((resolve, reject) => {\n    getClientInstance(\n      url,\n      protocol,\n      port,\n      username,\n      password,\n      (client) => resolve(client),\n      (error) => reject(error),\n    );\n  });\n  return clientPromise;\n};\n\n// TO DO: update function\n\nexport const subscribe = (client, topic, onMessageReceived, onError) => {\n  client.subscribe(topic, { qos: 2 }, (err) => {\n    err\n      ? isFunction(onError) && onError(err)\n      : client.on('message', (topic, payload) => {\n          isFunction(onMessageReceived) &&\n            onMessageReceived(parseToJson(payload));\n        });\n  });\n\n  const unsubscribe = (onError) => client.unsubscribe(topic, {}, onError);\n\n  return unsubscribe;\n};\n\nexport const disconnect = (client, callback) =>\n  client.end(() => {\n    console.log(`mqtt broker \"${client.options.hostname}\" disconnected`);\n    isFunction(callback) && callback();\n  });\n","import db from './db';\nimport { isFunction } from 'lodash';\nimport { connect, subscribe, disconnect } from './mqttService';\nimport { DEVICES_DB } from './devicesOptions';\n\n// Public Functions\n\nexport const getSavedDevices = async () => {\n  const dbClient = db.connect(DEVICES_DB);\n  const list = await dbClient.getAll();\n  return list.map((item) => item.doc);\n};\n\nexport const getDevice = async (deviceId) => {\n  const dbClient = db.connect(DEVICES_DB);\n  const device = await dbClient.get(deviceId);\n  return device;\n};\n\nexport const updateDevice = async (deviceData) => {\n  const dbClient = db.connect(DEVICES_DB);\n  return dbClient.update(deviceData);\n};\n\nexport const deleteDevice = (deviceID) => {\n  const dbClient = db.connect(DEVICES_DB);\n  return dbClient.remove(deviceID).catch((e) => {\n    const err = new Error(`Couldn't remove record: ${e.message}`);\n    err.name = 'Database Error';\n    throw err;\n  });\n};\n\n// add device to devices DB\nexport const addDevice = (props) => {\n  const dbClient = db.connect(DEVICES_DB);\n  const { kind, name, url, protocol, port, topic, username, password } = props;\n\n  // make sure all props are defined\n  for (let key in props)\n    if (!props[key]) throw new Error(`Field missing [${key}]`);\n\n  const id = `${kind}_${name}`;\n\n  return dbClient\n    .get(id)\n    .then((r) => {\n      // the device already exists in DB\n      const err = new Error('Another device exists with the same name');\n      err.payload = { exist: true, payload: r };\n      throw err;\n    })\n    .catch((e) => {\n      // if the device exists in DB\n      if (e.payload && e.payload.exist) throw e;\n      // the device does not exist in DB\n      return dbClient\n        .put({\n          _id: id,\n          name,\n          url,\n          protocol,\n          port,\n          topic,\n          kind,\n          username,\n          password,\n        })\n        .then((r) => {\n          // inserted successfully\n          return { exist: false, inserted: true, payload: r };\n        })\n        .catch((e) => {\n          // DB error\n          const err = new Error(e.toString());\n          err.payload = {\n            exist: false,\n            inserted: false,\n            payload: e.toString(),\n          };\n          throw err;\n        });\n    });\n};\n\n//\n// connect to broadcast device & return a client instance with {subscribe, disconnect, getAllData, getLastData}\nexport const connectDevice = ({\n  _id,\n  name,\n  kind,\n  deviceId = _id || `${kind}_${name}`,\n  url,\n  protocol,\n  port,\n  topic,\n  username,\n  password,\n}) => {\n  const clientPromise = new Promise(async (resolve, reject) => {\n    try {\n      const mqttClient = await connect(url, protocol, port, username, password);\n      const dbClient = db.connect(deviceId);\n      const _subscribe = (onSubscribe, onError) => {\n        const unsubscribe = subscribe(\n          mqttClient,\n          topic,\n          (payload) => {\n            dbClient.put({ _id: Date.now().toString(), ...payload });\n            isFunction(onSubscribe) && onSubscribe(payload);\n          },\n          onError,\n        );\n        return unsubscribe;\n      };\n\n      const _disconnect = () => disconnect(mqttClient, () => dbClient.close());\n      const getAllData = () => dbClient.getAll();\n      const getLastData = () => dbClient.getAll({ descending: true, limit: 1 });\n      resolve({\n        subscribe: _subscribe,\n        disconnect: _disconnect,\n        getAllData,\n        getLastData,\n      });\n    } catch (e) {\n      // connection error\n      reject(e);\n    }\n  });\n\n  return clientPromise;\n};\n","import { isFunction } from 'lodash';\nimport { useState } from 'react';\nimport {\n  Spinner,\n  SvgOutlineChevronRight,\n  SvgSolidCog,\n  SvgSolidTrash,\n} from './tailwind-ui';\n\nconst DevicesList = ({ data, onSelect, onEdit, onDelete }) => {\n  const [selectedElement, setSelectedElement] = useState();\n\n  const handleSelect = async (element, e) => {\n    // ignore click if another element is already selected (is loading)\n    if (!selectedElement) {\n      setSelectedElement(element);\n      const callback = () => setSelectedElement(null);\n      isFunction(onSelect) && onSelect(element, e, callback);\n    }\n  };\n  return (\n    <div className=\"overflow-hidden bg-white shadow sm:rounded-md\">\n      {data.map((element) => (\n        <li\n          key={element.kind + element.name}\n          className=\"block transition duration-150 ease-in-out hover:bg-gray-50 focus:outline-none focus:bg-gray-50 cursor-pointer\"\n          onClick={(e) => handleSelect(element, e)}\n        >\n          <div className=\"relative flex items-center px-4 py-4 sm:px-6\">\n            {selectedElement === element && ( // if element is selected, display spinner\n              <div className=\"absolute top-0 left-0 w-full h-full opacity-30 bg-neutral-300\">\n                <div className=\"w-full h-full flex justify-center items-center\">\n                  <Spinner className=\"w-8 h-8 text-primary-800\" />\n                </div>\n              </div>\n            )}\n            <div className=\"flex items-center flex-1 min-w-0\">\n              <div className=\"flex-1 min-w-0 px-4 sm:grid sm:grid-col-2 sm:gap-4\">\n                <p className=\"col-span-2 text-lg font-semibold truncate text-primary-700\">\n                  {element.name}\n                </p>\n                <div className=\"flex flex-col text-xs font-italic text-neutral-600\">\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">Device kind : </span>\n                    {element.kind}\n                  </p>\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">URL : </span>\n                    {`${element.protocol}://${element.url}:${element.port}`}\n                  </p>\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">Topic : </span>\n                    {element.topic}\n                  </p>\n                </div>\n                <div className=\"pt-2 sm:pt-0 flex justify-end items-center cursor-default\">\n                  <button\n                    className=\"mx-1 p-2 border rounded shadow-sm bg-neutral-100 focus:outline-none active:bg-neutral-200\"\n                    onClick={(e) => onEdit(element, e)}\n                  >\n                    <SvgSolidCog className=\"text-gray-700\" />\n                  </button>\n                  <button\n                    className=\"mx-1 p-2 border rounded shadow-sm bg-neutral-100 focus:outline-none active:bg-neutral-200\"\n                    onClick={(e) => onDelete(element, e)}\n                  >\n                    <SvgSolidTrash className=\"text-gray-700\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div>\n              <SvgOutlineChevronRight className=\"w-5 h-5 text-neutral-400\" />\n            </div>\n          </div>\n          <div className=\"w-full border-t border-neutral-100\" />\n        </li>\n      ))}\n    </div>\n  );\n};\n\nexport default DevicesList;\n","import { useRef, useState, useEffect } from 'react';\nimport * as Yup from 'yup';\nimport { isFunction, isEmpty } from 'lodash';\nimport {\n  Form,\n  InputField,\n  Modal,\n  SvgOutlinePlus,\n  FormError,\n  SubmitButton,\n  SvgOutlineUser,\n  SvgOutlineKey,\n  SvgOutlineLink,\n  SvgOutlineX,\n  SelectField,\n  Spinner,\n  SvgOutlineCheck,\n} from './tailwind-ui';\n\nimport { connectDevice } from '../services/deviceService';\nimport { DEVICE_KINDS, DEVICE_PROTOCOLS } from '../services/devicesOptions';\n\n//\n// Pre-defined Vars\nconst protocolOptions = DEVICE_PROTOCOLS.map((val) => {\n  return { label: val.toUpperCase(), value: val };\n});\nconst kindOptions = DEVICE_KINDS.map((val) => {\n  return { label: val, value: val };\n});\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .max(50, 'Name too Long!')\n    .matches(\n      /^[A-z0-9_-]*$/,\n      'Field supports only : letters / numbers / _ / - ',\n    )\n    .required('Required'),\n  url: Yup.string().required('Required'),\n  port: Yup.number().positive().integer(),\n  protocol: Yup.string(),\n  kind: Yup.string().required('Required'),\n  topic: Yup.string().required('Required'),\n  username: Yup.string().required('Required'),\n});\n//\n\nconst DeviceModal = ({ isOpen, onClose, onSave, onUpdate, initialValues }) => {\n  const updateMode = !isEmpty(initialValues); // if initialValues defined : updates the recode; else: add the record\n  const [footerMessage, setFooterMessage] = useState(<div />);\n  const formRef = useRef(null); // Ref the Form\n\n  const _initialValues = {\n    name: '123',\n    url: 'mqtt.beemos.org',\n    protocol: protocolOptions[0].value,\n    port: '9001',\n    kind: kindOptions[0].value,\n    topic: 'lpatiny/Computer/server',\n    username: 'testUser',\n    password: 'word',\n    ...initialValues,\n  };\n\n  // events functions\n  const onSubmit = async (values) => {\n    try {\n      //await addDevice(values);\n      updateMode\n        ? isFunction(onUpdate) && (await onUpdate(values))\n        : isFunction(onSave) && (await onSave(values));\n      isFunction(onClose) && onClose();\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  const testConnection = (e) => {\n    e.stopPropagation();\n    setFooterMessage(renderFooterMessage('connecting', 'Connecting ...'));\n    setTimeout(() => {\n      connectDevice(formRef.current.values)\n        .then((client) => {\n          setFooterMessage(renderFooterMessage('success', 'Connected'));\n          // TO DO : disconnect client\n        })\n        .catch((err) => {\n          setFooterMessage(\n            renderFooterMessage('error', `Connection Error: ${err.message}`),\n          );\n        });\n    }, 500);\n  };\n\n  useEffect(() => {\n    // clear footer when modal is closed\n    !isOpen && setTimeout(() => setFooterMessage(<div />), 500);\n  }, [isOpen]);\n\n  // helper function for testConnection event\n  const renderFooterMessage = (state, message) => {\n    switch (state) {\n      case 'connecting':\n        return (\n          <div className=\"mx-6 flex flex-row items-center text-sm text-left text-neutral-500\">\n            <Spinner className=\"w-6 h-6 mr-2\" />\n            <span>{message}</span>\n          </div>\n        );\n      case 'success':\n        return (\n          <div className=\"mx-4 flex flex-row items-center text-sm text-left text-success-500\">\n            <SvgOutlineCheck className=\"h-6 w-6 mr-4\" />\n            <span>{message}</span>\n          </div>\n        );\n      case 'error':\n        return (\n          <div className=\"mx-4 flex flex-row items-center text-sm text-left text-danger-500\">\n            <SvgOutlineX className=\"h-6 w-6 mr-4\" />\n            <span>{message}</span>\n          </div>\n        );\n      default:\n        return <div />;\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={onClose}\n      icon={<SvgOutlinePlus />}\n      iconColor=\"neutral\"\n      animated\n      hasCloseButton\n      requestCloseOnBackdrop\n      requestCloseOnEsc\n      fluid\n      wrapperComponent={Form}\n      wrapperProps={{\n        innerRef: formRef,\n        initialValues: _initialValues,\n        validationSchema,\n        onSubmit: onSubmit,\n        className: 'h-full',\n      }}\n    >\n      <Modal.Header>Connect New Device</Modal.Header>\n      <Modal.Body>\n        <div className=\"p-2 mt-2\">\n          <InputField\n            name=\"name\"\n            id=\"name\"\n            label=\"Custom name\"\n            placeholder=\"device_123\"\n            disabled={updateMode}\n            required\n            className=\"w-full\"\n            inputClassName=\"w-full\"\n          ></InputField>\n          <div className=\"flex flex-col sm:flex-row sm:justify-between mt-4 sm:mt-0 border-t border-neutral sm:border-0\">\n            <InputField\n              name=\"url\"\n              id=\"url\"\n              label=\"URL\"\n              placeholder=\"mqtt.domain.com\"\n              required\n              leadingInlineAddon={<SvgOutlineLink />}\n              className=\"mt-4 sm:mr-4 w-full sm:w-1/2\"\n              inputClassName=\"w-full\"\n            ></InputField>\n            <div className=\"flex flex-row justify-between items-start flex-1\">\n              <SelectField\n                name=\"protocol\"\n                id=\"protocol\"\n                label=\"Protocol\"\n                options={protocolOptions}\n                renderOption={(o) => `${o.label}`}\n                getValue={(o) => o.value}\n                className=\"mt-4 mr-4 w-1/2\"\n                inputClassName=\"w-full\"\n              ></SelectField>\n              <InputField\n                name=\"port\"\n                id=\"port\"\n                label=\"Port\"\n                className=\"mt-4 flex-1\"\n                inputClassName=\"w-full\"\n              ></InputField>\n            </div>\n          </div>\n          <div className=\"flex flex-row justify-between items-start\">\n            <SelectField\n              name=\"kind\"\n              id=\"kind\"\n              label=\"Device kind\"\n              options={kindOptions}\n              renderOption={(o) => `${o.label}`}\n              getValue={(o) => o.value}\n              required\n              className=\"mt-4 mr-4 w-1/3 \"\n              inputClassName=\"w-full bg-gray-500\"\n            ></SelectField>\n            <InputField\n              name=\"topic\"\n              id=\"topic\"\n              label=\"Topic\"\n              required\n              className=\"mt-4 flex-1\"\n              inputClassName=\"w-full\"\n            ></InputField>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row sm:justify-between mt-4 sm:mt-0 border-t border-neutral sm:border-0\">\n            <InputField\n              name=\"username\"\n              id=\"username\"\n              label=\"Username\"\n              placeholder=\"Username\"\n              required\n              leadingInlineAddon={<SvgOutlineUser />}\n              className=\"mt-4 w-full sm:mr-4 sm:w-1/2\"\n              inputClassName=\"w-full\"\n            ></InputField>\n            <InputField\n              name=\"password\"\n              id=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              placeholder=\"********\"\n              required\n              leadingInlineAddon={<SvgOutlineKey />}\n              className=\"mt-4 w-full sm:flex-1\"\n              inputClassName=\"w-full\"\n            ></InputField>\n          </div>\n        </div>\n        <FormError />\n      </Modal.Body>\n      <Modal.Footer>\n        <div className=\"flex flex-col sm:flex-row items-center\">\n          {footerMessage}\n          <button\n            onClick={testConnection}\n            type=\"button\"\n            className=\"w-full sm:w-max mt-2 sm:my-0 px-4 py-2 sm:mr-4 text-sm font-semibold text-neutral-700 border rounded-md shadow bg-neutral-200 focus:outline-none flex-1 sm:flex-none\"\n          >\n            Test connection\n          </button>\n          <SubmitButton className=\"w-full my-2 sm:my-0 sm:w-max \">\n            {updateMode ? 'Update' : 'Add'}\n          </SubmitButton>\n        </div>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default DeviceModal;\n","import { useState, useEffect } from 'react';\nimport { isFunction } from 'lodash';\nimport { Button } from '../components/tailwind-ui';\nimport DevicesList from '../components/devicesList';\nimport DeviceModal from '../components/deviceModal';\nimport {\n  addDevice,\n  updateDevice,\n  deleteDevice,\n  getSavedDevices,\n  connectDevice,\n} from '../services/deviceService';\nimport useNotification from '../hooks/useNotification';\n\nconst BroadcastDevices = ({ history, match }) => {\n  const [render, setRender] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [devicesList, setDevicesList] = useState([]);\n  const [onEditValues, setOnEditValues] = useState({});\n  const { addErrorNotification } = useNotification();\n\n  useEffect(() => {\n    // get saved devices from DB\n    getSavedDevices().then((list) => setDevicesList(list));\n  }, [render]);\n\n  const onOpenModal = () => {\n    setOnEditValues({});\n    setIsModalOpen(true);\n  };\n\n  const onCloseModal = () => {\n    setRender(!render); // refresh devices list\n    setIsModalOpen(false); // close modal\n  };\n\n  const onSelectItem = (device, e, callback) => {\n    setTimeout(async () => {\n      try {\n        await connectDevice(device);\n        isFunction(callback) && callback();\n        history.push(match.url + '/device/' + device._id);\n      } catch (e) {\n        addErrorNotification(e.name, e.message);\n        isFunction(callback) && callback();\n      }\n    }, 500);\n  };\n\n  const onEditItem = (device, e) => {\n    e.stopPropagation();\n    setOnEditValues(device);\n    setIsModalOpen(true);\n  };\n\n  const onDeleteItem = (device, e) => {\n    e.stopPropagation();\n    deleteDevice(device._id)\n      .then(() => setRender(!render))\n      .catch((e) => addErrorNotification(e.name, e.message));\n  };\n\n  return (\n    <div className=\"p-8\">\n      <h2 className=\"text-3xl font-semibold mb-12 lg:mb-16\">\n        Broadcast devices\n      </h2>\n      <div className=\"w-full flex justify-end mb-6 lg:mb-8\">\n        <Button onClick={onOpenModal}>Add device</Button>\n      </div>\n      <div>\n        <div className=\"w-full my-2 flex flex-row items-center \">\n          <h3 className=\"w-max ml-2 mr-4 text-neutral-600 text-sm whitespace-nowrap \">\n            Available devices\n          </h3>\n          <div className=\"w-full border-t border-neutral-300\" />\n        </div>\n        <DevicesList\n          data={devicesList}\n          onSelect={onSelectItem}\n          onEdit={onEditItem}\n          onDelete={onDeleteItem}\n        />\n      </div>\n\n      <DeviceModal\n        isOpen={isModalOpen}\n        onClose={onCloseModal}\n        initialValues={onEditValues}\n        onSave={addDevice}\n        onUpdate={updateDevice}\n      ></DeviceModal>\n    </div>\n  );\n};\n\nexport default BroadcastDevices;\n","import {\n  SvgOutlineExclamationCircle,\n  SvgSolidExclamation,\n  useNotificationCenter,\n} from '../components/tailwind-ui';\n\nconst TIMEOUT = 4000;\n\nexport default function useNotification() {\n  const notificationContext = useNotificationCenter();\n\n  const addInfoNotification = (title, message) => {\n    notificationContext.addNotification(\n      {\n        title: (\n          <span className=\"text-base font-semibold text-primary-500\">\n            {title}\n          </span>\n        ),\n        content: <span className=\"text-sm text-neutral-500\">{message}</span>,\n        icon: (\n          <SvgOutlineExclamationCircle className=\"w-8 h-8 text-primary-600\" />\n        ),\n      },\n      TIMEOUT,\n    );\n  };\n\n  const addErrorNotification = (title, message) => {\n    notificationContext.addNotification(\n      {\n        title: (\n          <span className=\" text-base font-semibold text-danger-500\">\n            {title}\n          </span>\n        ),\n        content: <span className=\"text-sm text-neutral-500\">{message}</span>,\n        icon: <SvgSolidExclamation className=\"w-8 h-8 text-danger-600\" />,\n      },\n      TIMEOUT,\n    );\n  };\n\n  return { addErrorNotification, addInfoNotification };\n}\n"],"sourceRoot":""}