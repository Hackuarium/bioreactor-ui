{"version":3,"sources":["services/devicesOptions.js","services/devicesService.js","services/db.js","hooks/useNotification.js","services/util.js","../node_modules/legoino-navigator-serial/src/Action.js","../node_modules/legoino-navigator-serial/src/Device.js","../node_modules/legoino-navigator-serial/src/util/checkSerial.js","../node_modules/legoino-navigator-serial/src/DevicesManager.js","../node_modules/legoino-navigator-serial/src/util/EventEmitter.js","services/localDeviceService.js","pages/LocalDevices/LocalDeviceModal.jsx","../node_modules/delay/index.js"],"names":["DEVICES_DB","DEFAULT_PORT","window","location","protocol","DEFAULT_PROTOCOL","DEVICE_PROTOCOLS","DEVICE_TYPE","broadcast","interactive","local","COMMANDS","help","settings","compactSettings","runExperiment","kinetic","reset","sleep","setParameter","label","value","DEVICE_KINDS","Object","keys","legoinoDeviceInformation","filter","key","kind","map","events","parameters","throwDbError","error","additionalMsg","console","log","err","Error","message","name","concatDeviceId","type","id","getDeviceKind","deviceId","fromDeviceID","Number","e","mapParameters","params","p","undefined","getDevices","a","DB","getAll","startkey","endkey","then","res","rows","i","doc","catch","getDevice","get","updateDevice","deviceData","update","deleteDevice","deviceID","remove","addDevice","device","put","saveDataRow","data","_id","Date","now","toString","getSavedData","descending","d","getSavedDataByPage","page","itemsByPage","skip","limit","getSavedDataCount","include_docs","total_rows","getLastSavedData","clearSavedData","destroy","listenToDataChanges","successCallback","errorCallBack","listenToChanges","closeDbConnection","dbName","close","connectedDBs","connect","PouchDB","revs_limit","auto_compaction","getInfo","Promise","resolve","reject","info","options","allDocs","docId","db","resGet","_rev","resPut","errPut","resRm","errRm","changes","since","live","on","useNotification","notificationContext","useNotificationCenter","addNotification","title","textColor","Icon","timeout","className","clsx","content","icon","addErrorNotification","SvgSolidExclamation","addWarningNotification","addInfoNotification","SvgOutlineExclamationCircle","diffDeviceLists","firstArray","secondArray","otherArray","current","other","length","msToTime","duration","seconds","Math","floor","minutes","hours","time","Action","command","this","currentTimeout","answer","status","creationTimestamp","promise","finishedPromise","finished","clearTimeout","setTimeout","startTimestamp","buffer","string","TextDecoder","decode","replace","endsWith","lines","split","line","join","Device","serialPort","baudRate","queue","action","interCommandDelay","defaultCommandExpirationDelay","encoder","TextEncoder","decoder","currentProcessQueue","runProcessQueue","shift","start","write","read","delay","open","reader","readable","getReader","writer","writable","getWriter","commandExpirationDelay","push","ensureProcessQueue","port","path","emit","event","dataArrayBuffer","encode","isFinished","appendAnswer","checkSerial","serial","DevicesManager","devices","portFilter","usbProductId","usbVendorId","requestPort","filters","updateDevices","getPorts","serialPorts","missingDevicesSerialPort","includes","ensureOpen","newDevice","scanInterval","callback","ready","isReady","queueLength","findDevice","callbacks","cb","cbs","forEach","devicesManager","navigator","localDeviceInfo","requestDevices","getConnectedDevices","getDevicesList","connectedDevices","continuousUpdateDevices","interval","setInterval","isFunction","sendCommand","validationSchema","Yup","shape","max","matches","required","kindOptions","option","LocalDeviceModal","initialValues","isOpen","onClose","onSave","_initialValues","onRequestClose","iconColor","animated","hasCloseButton","requestCloseOnBackdrop","requestCloseOnEsc","fluid","wrapperComponent","Form","wrapperProps","onSubmit","values","Header","Body","renderOption","o","getValue","inputClassName","Footer","createAbortError","createDelay","defaultClear","set","willResolve","ms","timeoutId","settle","rejectFn","signal","aborted","clear","signalListener","cleanup","removeEventListener","delayPromise","addEventListener","once","range","minimum","maximum","random","randomInteger","createWithTimers","module","exports","default"],"mappings":"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","file":"static/js/3.2271781b.chunk.js","sourcesContent":["import legoinoDeviceInformation from 'legoino-device-information';\n\n// Default Values\n\nexport const DEVICES_DB = 'BIOREACTOR-UI_devices';\nexport const DEFAULT_PORT =\n  window.location.protocol === 'https:' ? '443' : '80'; // old '8080'\nexport const DEFAULT_PROTOCOL =\n  window.location.protocol === 'https:' ? 'wss' : 'http'; // old tcp\n\n// Static Values\n\nexport const DEVICE_PROTOCOLS = ['http', 'tcp', 'wss'];\n\nexport const DEVICE_TYPE = {\n  broadcast: 'broadcast',\n  interactive: 'interactive',\n  local: 'local',\n};\n\nexport const COMMANDS = {\n  help: 'h',\n  settings: 'u',\n  compactSettings: 'uc',\n  runExperiment: 'r',\n  kinetic: 'k',\n  reset: 'ur1234',\n  sleep: 'l',\n  setParameter: (label, value) => `${label}${value}`,\n};\n\nexport const DEVICE_KINDS = Object.keys(legoinoDeviceInformation)\n  .filter((key) => legoinoDeviceInformation[key].kind)\n  .map((key) => {\n    const { events, parameters, ...info } = legoinoDeviceInformation[key];\n    return info;\n  });\n\nexport const DEVICE_STATUS = {\n  opening: 1,\n  opened: 2,\n  closed: 3,\n  missing: 9,\n  error: 10,\n};\n","import legoinoDeviceInformation from 'legoino-device-information';\nimport DB from './db';\nimport { DEVICES_DB } from './devicesOptions';\n\n// Private Functions\n\nconst throwDbError = (error, additionalMsg) => {\n  console.log(error);\n  const err = new Error(`${additionalMsg} \\n${error?.message}`);\n  err.name = 'DATABASE_ERROR';\n  throw err;\n};\n\n// Public Functions\n\n/**\n * return device _id\n */\nexport const concatDeviceId = (type, kind, id) => `${type}_${kind}_${id}`;\n\n/**\n * Get device Kind from its ID\n */\nexport const getDeviceKind = (deviceId) => {\n  try {\n    if (deviceId) {\n      const selectedDeviceKind = legoinoDeviceInformation.fromDeviceID(\n        Number(deviceId),\n      );\n      return selectedDeviceKind;\n    }\n  } catch (e) {\n    console.log(e);\n    return undefined;\n  }\n};\n\n/**\n * map parameters based on kind\n */\nexport const mapParameters = (kind, params) =>\n  kind && params\n    ? legoinoDeviceInformation[kind]?.parameters?.map((p) => ({\n        ...p,\n        value: params[p.label],\n      }))\n    : undefined;\n\n//=====================================\n/**\n * Devices DB operations\n */\n\nexport const getDevices = async (type) =>\n  DB(DEVICES_DB)\n    .getAll({ startkey: `${type}`, endkey: `${type}\\uffff` })\n    .then((res) => res.rows.map((i) => i.doc))\n    .catch((e) => throwDbError(e, `Get locally saved devices error`));\n\nexport const getDevicesByKind = async (type, kind) =>\n  DB(DEVICES_DB)\n    .getAll({ startkey: `${type}_${kind}`, endkey: `${type}_${kind}\\uffff` })\n    .then((res) => res.rows)\n    .catch((e) => throwDbError(e, `Get locally saved devices error`));\n\nexport const getDevice = async (deviceId) =>\n  DB(DEVICES_DB)\n    .get(deviceId)\n    .catch((e) => throwDbError(e, `Get device error`));\n\nexport const updateDevice = async (deviceData) =>\n  DB(DEVICES_DB)\n    .update(deviceData)\n    .catch((e) => throwDbError(e, `Update device error`));\n\nexport const deleteDevice = (deviceID) =>\n  DB(DEVICES_DB)\n    .remove(deviceID)\n    .catch((e) => throwDbError(e, `Delete device error`));\n\nexport const addDevice = (device) =>\n  DB(DEVICES_DB)\n    .put(device)\n    .catch((e) =>\n      e.name === 'conflict'\n        ? throwDbError(e, `Device name must be unique`)\n        : throwDbError(e, `Insert device error`),\n    );\n\n//=====================================\n/**\n * Device Data operations\n */\n\n// Ps: don't forget to close Db connection in cleanup function\n\nexport const saveDataRow = (deviceId, data) =>\n  DB(deviceId).put({ _id: Date.now().toString(), ...data });\n\nexport const getSavedData = (deviceId) =>\n  DB(deviceId)\n    .getAll({\n      descending: true,\n    })\n    .then((res) => res.rows.map((d) => d.doc));\n\nexport const getSavedDataByPage = (deviceId, page, itemsByPage) =>\n  DB(deviceId)\n    .getAll({\n      descending: true,\n      skip: (page - 1) * itemsByPage,\n      limit: itemsByPage,\n    })\n    .then((res) => res.rows.map((d) => d.doc));\n\nexport const getSavedDataCount = (deviceId) =>\n  DB(deviceId)\n    .getAll({\n      include_docs: false,\n    })\n    .then((res) => res.total_rows);\n\nexport const getLastSavedData = (deviceId) =>\n  DB(deviceId)\n    .getAll({\n      descending: true,\n      limit: 1,\n    })\n    .then((res) => res.rows.map((d) => d.doc));\n\nexport const clearSavedData = (deviceId) => DB(deviceId).destroy();\n\nexport const listenToDataChanges = (deviceId, successCallback, errorCallBack) =>\n  DB(deviceId).listenToChanges(successCallback, errorCallBack);\n\nexport const closeDbConnection = (dbName) => DB(dbName).close();\n","import PouchDB from 'pouchdb';\n\n// Wrap Db interface in case of switching to another Db other than \"PouchDb\"\nlet connectedDBs = {};\n\nconst DB = (dbName) => {\n  const connect = () => {\n    if (!(dbName in connectedDBs)) {\n      connectedDBs[dbName] = new PouchDB(dbName, {\n        revs_limit: 1,\n        auto_compaction: true,\n      });\n    }\n    return connectedDBs[dbName];\n  };\n\n  // DB operations to return\n\n  const getInfo = () =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      db.info()\n        .then((res) => resolve(res))\n        .catch((err) => reject(err));\n    });\n\n  const getAll = async (options) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      db.allDocs({\n        include_docs: true,\n        ...options,\n      })\n        .then((res) => resolve(res))\n        .catch((err) => reject(err));\n    });\n\n  const get = (docId) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      docId\n        ? db\n            .get(docId)\n            .then((res) => resolve(res))\n            .catch((err) => reject(err))\n        : reject(new Error('Doc fetch : docId is required'));\n    });\n\n  const put = (doc) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      !('_id' in doc)\n        ? reject(new Error('Doc create : _id is required in doc'))\n        : db\n            .put(doc)\n            .then((res) => resolve(res))\n            .catch((err) => reject(err));\n    });\n\n  const update = (doc) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      !('_id' in doc)\n        ? reject(new Error('Doc update : _id is required in doc'))\n        : db\n            .get(doc._id)\n            .then((resGet) =>\n              db\n                .put({ ...doc, _rev: resGet._rev })\n                .then((resPut) => resolve(resPut))\n                .catch((errPut) => reject(errPut)),\n            )\n            .catch((err) => reject(err));\n    });\n\n  const remove = (docId) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      docId\n        ? db\n            .get(docId)\n            .then((resGet) =>\n              db\n                .remove({ _id: docId, _rev: resGet._rev })\n                .then((resRm) => resolve(resRm))\n                .catch((errRm) => reject(errRm)),\n            )\n            .catch((err) => reject(err))\n        : reject(new Error('Doc remove : docId is required'));\n    });\n\n  // const removeAll = () => {\n  //   const db = connect();\n  //   return db\n  //     .allDocs()\n  //     .then((result) =>\n  //       Promise.all(result.rows.map((row) => db.remove(row.id, row.value.rev))),\n  //     );\n  // };\n\n  const listenToChanges = (successCallback, errorCallBack, options) => {\n    const db = connect();\n    let unsubscribe = db\n      .changes({\n        since: 'now',\n        live: true,\n        include_docs: true,\n        ...options,\n      })\n      .on('change', successCallback)\n      // .on('complete', successCallback)\n      .on('error', errorCallBack);\n    return unsubscribe;\n  };\n\n  const close = () => {\n    const db = connect();\n    delete connectedDBs[dbName];\n    return db.close();\n  };\n  const destroy = () => {\n    const db = connect();\n    delete connectedDBs[dbName];\n    return db.destroy();\n  };\n\n  return {\n    getInfo,\n    getAll,\n    get,\n    put,\n    update,\n    remove,\n    listenToChanges,\n    close,\n    destroy,\n  };\n};\n\nexport default DB;\n","import clsx from 'clsx';\nimport {\n  SvgOutlineExclamationCircle,\n  SvgSolidExclamation,\n  useNotificationCenter,\n} from '../components/tailwind-ui';\n\nexport default function useNotification() {\n  const notificationContext = useNotificationCenter();\n\n  const addNotification = (title, message, { textColor, Icon, timeout }) => {\n    notificationContext.addNotification(\n      {\n        title: (\n          <span className={clsx('text-base font-semibold', textColor + '500')}>\n            {title}\n          </span>\n        ),\n        content: <span className=\"text-sm text-neutral-500\">{message}</span>,\n        icon: <Icon className={clsx('w-8 h-8', textColor + '600')} />,\n      },\n      timeout,\n    );\n  };\n\n  const addInfoNotification = (title, message, timeout = 1000) => {\n    addNotification(title, message, {\n      textColor: 'text-primary-',\n      Icon: SvgOutlineExclamationCircle,\n      timeout: timeout,\n    });\n  };\n\n  const addWarningNotification = (title, message, timeout = 2500) => {\n    addNotification(title, message, {\n      textColor: 'text-warning-',\n      Icon: SvgSolidExclamation,\n      timeout: timeout,\n    });\n  };\n\n  const addErrorNotification = (title, message, timeout = 5000) => {\n    addNotification(title, message, {\n      textColor: 'text-danger-',\n      Icon: SvgSolidExclamation,\n      timeout: timeout,\n    });\n  };\n\n  return { addErrorNotification, addWarningNotification, addInfoNotification };\n}\n","/**\n *\n * @param {Array} firstArray\n * @param {Array} secondArray\n * @returns {Array} elements in firstArray & not in secondArray\n */\n\nexport const diffDeviceLists = (firstArray, secondArray) => {\n  const compare = (otherArray) => (current) =>\n    otherArray.filter((other) => other.id === current.id).length === 0;\n\n  return firstArray.filter(compare(secondArray));\n};\n\nexport const msToTime = (duration) => {\n  const seconds = Math.floor((duration / 1000) % 60),\n    minutes = Math.floor((duration / (1000 * 60)) % 60),\n    hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n  let time = `${seconds}s`;\n  if (hours) {\n    time = `${hours}h ${minutes}m ` + time;\n  } else if (minutes) {\n    time = `${minutes}m ` + time;\n  }\n  return time;\n};\n","const STATUS_CREATED = 0;\nconst STATUS_COMMAND_SENT = 1;\nconst STATUS_ANSWER_PARTIALLY_RECEIVED = 2;\nconst STATUS_ANSWER_RECEIVED = 3;\nconst STATUS_RESOLVED = 4;\nconst STATUS_ERROR = 5;\n\nexport class Action {\n  constructor(command, options = {}) {\n    this.currentTimeout = undefined;\n    this.command = command;\n    this.timeout = options.timeout === undefined ? 1000 : options.timeout;\n    this.answer = '';\n    this.status = STATUS_CREATED;\n    this.creationTimestamp = Date.now();\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n    this.finishedPromise = new Promise((resolve) => {\n      this.finished = resolve;\n    });\n  }\n\n  isFinished() {\n    return this.status === STATUS_RESOLVED || this.status === STATUS_ERROR;\n  }\n\n  setTimeout() {\n    if (this.currentTimeout) {\n      clearTimeout(this.currentTimeout);\n    }\n    this.currentTimeout = setTimeout(() => {\n      if (this.status === STATUS_RESOLVED || this.status === STATUS_ERROR) {\n        return;\n      }\n      this.status = STATUS_ERROR;\n      this.reject('Timeout');\n      this.finished();\n    }, this.timeout);\n  }\n\n  start() {\n    this.startTimestamp = Date.now();\n    this.status = STATUS_COMMAND_SENT;\n    this.setTimeout();\n  }\n\n  appendAnswer(buffer) {\n    let string = new TextDecoder().decode(buffer);\n    this.status = STATUS_ANSWER_PARTIALLY_RECEIVED;\n    this.answer += string;\n    if (!this.answer.replace(/\\r/g, '').endsWith('\\n\\n')) return;\n    let lines = this.answer.split(/\\r?\\n/);\n    if (lines.length > 0 && lines[lines.length - 1] === '') {\n      lines = lines.filter((line) => line);\n      this.status = STATUS_ANSWER_RECEIVED;\n      this.resolve(lines.join('\\n'));\n      this.finished();\n      this.status = STATUS_RESOLVED;\n    }\n  }\n}\n","/* eslint-disable no-await-in-loop */\n\nimport delay from 'delay';\n\nimport { Action } from './Action';\n\nconst debug = () => {};\n\nexport const STATUS_OPENING = 1;\nexport const STATUS_OPENED = 2;\nexport const STATUS_CLOSED = 3;\nexport const STATUS_MISSING = 9;\nexport const STATUS_ERROR = 10;\n\nexport class Device {\n  constructor(serialPort, options = {}) {\n    this.status = STATUS_OPENING;\n    this.id = undefined;\n    this.serialPort = serialPort;\n    this.baudRate = options.baudRate || 115200;\n    this.queue = [];\n    this.action = undefined;\n    this.interCommandDelay = options.interCommandDelay;\n    this.defaultCommandExpirationDelay = 2000;\n    this.encoder = new TextEncoder();\n    this.decoder = new TextDecoder();\n  }\n\n  isReady() {\n    return this.status === STATUS_OPENED;\n  }\n\n  /** restart process queue if the previous one was finished */\n  async ensureProcessQueue() {\n    debug('ensureProcessQueue');\n    if (!this.currentProcessQueue) {\n      this.currentProcessQueue = this.runProcessQueue();\n    }\n    return this.currentProcessQueue;\n  }\n\n  async runProcessQueue() {\n    while (this.queue.length > 0) {\n      this.action = this.queue.shift();\n\n      if (this.action) {\n        this.action.start();\n        await this.write(`${this.action.command}\\n`);\n        await this.read(this.action);\n        await this.action.finishedPromise;\n        this.action = undefined;\n        await delay(this.interCommandDelay);\n      }\n    }\n    this.currentProcessQueue = undefined;\n  }\n\n  async getStatus() {\n    return {\n      value: this.status,\n    };\n  }\n\n  async ensureOpen() {\n    debug(`Ensure open`);\n    if (this.status !== STATUS_OPENED) {\n      return this.open();\n    }\n  }\n\n  async open() {\n    debug(`Opening`);\n    await this.serialPort.open({\n      baudRate: this.baudRate,\n    });\n    this.reader = this.serialPort.readable.getReader();\n    this.writer = this.serialPort.writable.getWriter();\n    this.id = await this.get('uq');\n    this.status = STATUS_OPENED;\n  }\n\n  /*\n   We need to add this command in the queue and wait it resolves or rejects\n  */\n  async get(command, options = {}) {\n    const {\n      commandExpirationDelay = this.defaultCommandExpirationDelay,\n    } = options;\n\n    const action = new Action(command, {\n      timeout: commandExpirationDelay,\n    });\n\n    this.queue.push(action);\n    this.ensureProcessQueue();\n    return action.promise;\n  }\n\n  error(error) {\n    debug(`Error ${this.port.path}`);\n    debug(error);\n    this.status = STATUS_ERROR;\n    this.emit('adapter', {\n      event: 'Error',\n      value: error,\n    });\n  }\n\n  close() {\n    debug(`Close`);\n    this.status = STATUS_CLOSED;\n  }\n\n  async write(data) {\n    const dataArrayBuffer = this.encoder.encode(`${data}\\n`);\n    return this.writer.write(dataArrayBuffer);\n  }\n\n  async read(action) {\n    while (!action.isFinished()) {\n      action.appendAnswer((await this.reader.read()).value);\n      delay(10);\n    }\n  }\n}\n","/* eslint-disable no-console */\nexport default function checkSerial(serial) {\n  if (!serial) {\n    console.error(\n      \"Web serial doesn't seem to be enabled in your browser. Try enabling it by visiting:\",\n    );\n    console.error('chrome://flags/#enable-experimental-web-platform-features');\n    console.error('opera://flags/#enable-experimental-web-platform-features');\n    console.error('edge://flags/#enable-experimental-web-platform-features');\n  }\n}\n","/* eslint-disable no-await-in-loop */\nimport delay from 'delay';\n\nimport { Device, STATUS_MISSING, STATUS_OPENED, STATUS_CLOSED } from './Device';\nimport EventEmitter from './util/EventEmitter';\nimport checkSerial from './util/checkSerial';\n\nconst debug = () => {};\n\n/**\n * Class creating a new serial bridge to manage serial ports.\n * @param {object} [options={}]\n * @param {function} [options.portFilter=[{usbProductId:37384, usbVendorId:6991}]] Filter the serial ports to address.\n * @param {number} [options.baudRate=57200] Baud rate\n * @param {number} [options.interCommandDelay=100] Time to wait between commands in [ms]\n * @param {number} [options.defaultCommandExpirationDelay=100] Time to wait for answer before timeout\n */\nexport class DevicesManager extends EventEmitter {\n  constructor(serial, options = {}) {\n    super();\n    checkSerial(serial);\n    this.serial = serial;\n    this.devices = [];\n    this.portFilter =\n      options.portFilter === undefined\n        ? [{ usbProductId: 37384, usbVendorId: 6991 }]\n        : options.portFilter;\n    this.baudRate = options.baudRate || 115200;\n    this.interCommandDelay =\n      options.interCommandDelay === undefined ? 100 : options.interCommandDelay;\n    this.defaultCommandExpirationDelay =\n      options.defaultCommandExpirationDelay === undefined\n        ? 100\n        : options.defaultCommandExpirationDelay;\n  }\n\n  /**\n   * By calling this method from a click you give users the possibility to allow access to some devices\n   */\n  async requestDevices() {\n    await this.serial.requestPort({\n      filters: this.portFilter,\n    });\n    return this.updateDevices();\n  }\n\n  /**\n   * Update this.devices\n   */\n  async updateDevices() {\n    const serialPorts = await this.serial.getPorts();\n\n    debug('updateDevices');\n\n    const missingDevicesSerialPort = this.devices.filter(\n      (device) => !serialPorts.includes(device.serialPort),\n    );\n    for (let device of missingDevicesSerialPort) {\n      if (device.status !== STATUS_MISSING && device.status !== STATUS_CLOSED) {\n        device.close();\n      }\n      device.status = STATUS_MISSING;\n    }\n\n    for (let serialPort of serialPorts) {\n      let device = this.devices.filter(\n        (device) => device.serialPort === serialPort,\n      )[0];\n      if (device) {\n        await device.ensureOpen();\n      } else {\n        let newDevice = new Device(serialPort, {\n          baudRate: this.baudRate,\n          interCommandDelay: this.interCommandDelay,\n          defaultCommandExpirationDelay: this.defaultCommandExpirationDelay,\n        });\n        this.devices.push(newDevice);\n        await newDevice.open();\n      }\n    }\n    // check if there are any new ports\n  }\n\n  /**\n   * Update this.devices every `scanInterval` [ms].\n   * @param {object} [options={}]\n   * @param {number} [options.scanInterval=1000] Delay between `updateDevices()` calls\n   * @param {number} [options.callback] Callback to execute on each update\n   */\n  async continuousUpdateDevices(options = {}) {\n    const { scanInterval = 1000, callback } = options;\n    while (true) {\n      await this.updateDevices();\n      if (callback) {\n        callback(this.devices);\n      }\n      await delay(scanInterval);\n    }\n  }\n\n  /**\n   * Returns this.devices\n   * @param {object} [options={}]\n   * @param {bool} [options.ready=false] If `true` returns only currently connected device. If `false` returns all devices ever connected.\n   * @returns {Array<object>}\n   */\n  getDevicesList(options = {}) {\n    let { ready = false } = options;\n    return this.devices\n      .filter((device) => !ready || device.isReady())\n      .map((device) => ({\n        status: device.status,\n        id: device.id,\n        queueLength: device.queue.length,\n      }));\n  }\n\n  // private function\n  findDevice(id) {\n    if (id === undefined) return undefined;\n    let devices = this.devices.filter(\n      (device) => device.id === id && device.status === STATUS_OPENED,\n    );\n    if (devices.length === 0) return undefined;\n    if (devices.length > 1) {\n      throw new Error(`Many devices have the same id: ${id}`);\n    }\n    return devices[0];\n  }\n\n  /**\n   * Send a serial command to a device.\n   * @param {number} id ID of the device\n   * @param {string} command Command to send\n   */\n  async sendCommand(id, command) {\n    const device = this.findDevice(id);\n    if (!device) {\n      throw Error(`Device ${id} not found`);\n    }\n    if (device && device.isReady()) return device.get(command);\n    throw Error(`Device ${id} not ready: ${device.port.path}`);\n  }\n}\n","export default class EventEmitter {\n  constructor() {\n    this.callbacks = {};\n  }\n\n  on(event, cb) {\n    if (!this.callbacks[event]) this.callbacks[event] = [];\n    this.callbacks[event].push(cb);\n  }\n\n  emit(event, data) {\n    let cbs = this.callbacks[event];\n    if (cbs) {\n      cbs.forEach((cb) => cb(data));\n    }\n  }\n}\n","import { isFunction } from 'lodash';\nimport { DevicesManager } from 'legoino-navigator-serial';\nimport { DEVICE_TYPE } from './devicesOptions';\nimport { concatDeviceId, getDeviceKind } from './devicesService';\n\nconst SCAN_INTERVAL = 1000;\n\nconst devicesManager = new DevicesManager(navigator.serial);\n\n/**\n * return device information to be stored in DB\n */\nexport const localDeviceInfo = ({ id, name }) => {\n  const kind = getDeviceKind(id);\n  return {\n    _id: concatDeviceId(DEVICE_TYPE.local, kind?.kind, id),\n    id: id,\n    name: name ? name : `${kind?.kind}-${id}`,\n    kind: kind,\n  };\n};\n\n/**\n * By calling this method from a click you give users the possibility to allow access to some devices\n */\nexport const requestDevices = async () => {\n  await devicesManager.requestDevices();\n};\n\n/**\n * @returns {Array<object>}\n */\nexport const getConnectedDevices = async () => {\n  await devicesManager.updateDevices();\n  const connectedDevices = await devicesManager.getDevicesList({\n    ready: true, // If ready==`true` returns only currently connected device, else returns all devices ever connected.\n  });\n  return connectedDevices;\n};\n\n/**\n * Update updated devices list every `scanInterval` [ms].\n * @param {Function} callback(devicesList): Callback to execute on each update\n * @param {number} scanInterval Delay between calls\n */\nexport const continuousUpdateDevices = async (\n  callback,\n  scanInterval = SCAN_INTERVAL,\n) => {\n  const interval = setInterval(async () => {\n    const connectedDevices = await getConnectedDevices();\n    isFunction(callback) && callback(connectedDevices);\n  }, scanInterval);\n  return interval;\n};\n\n/**\n * Send a serial command to a device.\n * @param {number} id ID of the device\n * @param {string} command Command to send\n * @returns ??????\n */\nexport const sendCommand = async (deviceId, command) => {\n  return await devicesManager.sendCommand(deviceId, command);\n};\n","import React from 'react';\nimport * as Yup from 'yup';\nimport {\n  Modal,\n  Form,\n  SvgOutlinePlus,\n  SelectField,\n  FormError,\n  SubmitButton,\n  InputField,\n} from '../../components/tailwind-ui';\nimport { DEVICE_KINDS } from '../../services/devicesOptions';\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .max(50, 'Name too Long!')\n    .matches(\n      /^[A-z0-9_-]*$/,\n      'Field supports only : letters / numbers / _ / - ',\n    )\n    .required('Required'),\n});\n\nconst kindOptions = DEVICE_KINDS.map((option) => ({\n  ...option,\n  label: option.name,\n  value: option.kind,\n}));\n\nconst LocalDeviceModal = ({ initialValues, isOpen, onClose, onSave }) => {\n  const _initialValues = {\n    name: initialValues?.name,\n    kind: initialValues?.kind?.kind,\n  };\n\n  const onSubmit = (values) => {\n    const device = {\n      ...initialValues,\n      name: values.name,\n      kind: DEVICE_KINDS.filter((option) => option.kind === values.kind)[0],\n    };\n    onSave(device);\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={onClose}\n      icon={<SvgOutlinePlus />}\n      iconColor=\"neutral\"\n      animated\n      hasCloseButton\n      requestCloseOnBackdrop\n      requestCloseOnEsc\n      fluid\n      wrapperComponent={Form}\n      wrapperProps={{\n        initialValues: _initialValues,\n        validationSchema,\n        onSubmit: onSubmit,\n        className: 'h-full',\n      }}\n    >\n      <Modal.Header>Edit device information</Modal.Header>\n      <Modal.Body>\n        <div className=\"w-full mr-32 pr-16 mt-4 mb-20 items-center\">\n          <SelectField\n            name=\"kind\"\n            id=\"kind\"\n            label=\"Kind\"\n            options={kindOptions}\n            renderOption={(o) => `${o.label}`}\n            getValue={(o) => o.value}\n            required\n            className=\"mt-4 flex-1\"\n          ></SelectField>\n          <InputField\n            name=\"name\"\n            id=\"name\"\n            label=\"Name\"\n            required\n            className=\"mt-8 flex-1\"\n            inputClassName=\"w-full\"\n          ></InputField>\n        </div>\n        <FormError />\n      </Modal.Body>\n      <Modal.Footer>\n        <SubmitButton className=\"w-full sm:w-max \">Save</SubmitButton>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default LocalDeviceModal;\n","'use strict';\n\n// From https://github.com/sindresorhus/random-int/blob/c37741b56f76b9160b0b63dae4e9c64875128146/index.js#L13-L15\nconst randomInteger = (minimum, maximum) => Math.floor((Math.random() * (maximum - minimum + 1)) + minimum);\n\nconst createAbortError = () => {\n\tconst error = new Error('Delay aborted');\n\terror.name = 'AbortError';\n\treturn error;\n};\n\nconst createDelay = ({clearTimeout: defaultClear, setTimeout: set, willResolve}) => (ms, {value, signal} = {}) => {\n\tif (signal && signal.aborted) {\n\t\treturn Promise.reject(createAbortError());\n\t}\n\n\tlet timeoutId;\n\tlet settle;\n\tlet rejectFn;\n\tconst clear = defaultClear || clearTimeout;\n\n\tconst signalListener = () => {\n\t\tclear(timeoutId);\n\t\trejectFn(createAbortError());\n\t};\n\n\tconst cleanup = () => {\n\t\tif (signal) {\n\t\t\tsignal.removeEventListener('abort', signalListener);\n\t\t}\n\t};\n\n\tconst delayPromise = new Promise((resolve, reject) => {\n\t\tsettle = () => {\n\t\t\tcleanup();\n\t\t\tif (willResolve) {\n\t\t\t\tresolve(value);\n\t\t\t} else {\n\t\t\t\treject(value);\n\t\t\t}\n\t\t};\n\n\t\trejectFn = reject;\n\t\ttimeoutId = (set || setTimeout)(settle, ms);\n\t});\n\n\tif (signal) {\n\t\tsignal.addEventListener('abort', signalListener, {once: true});\n\t}\n\n\tdelayPromise.clear = () => {\n\t\tclear(timeoutId);\n\t\ttimeoutId = null;\n\t\tsettle();\n\t};\n\n\treturn delayPromise;\n};\n\nconst delay = createDelay({willResolve: true});\ndelay.reject = createDelay({willResolve: false});\ndelay.range = (minimum, maximum, options) => delay(randomInteger(minimum, maximum), options);\ndelay.createWithTimers = ({clearTimeout, setTimeout}) => {\n\tconst delay = createDelay({clearTimeout, setTimeout, willResolve: true});\n\tdelay.reject = createDelay({clearTimeout, setTimeout, willResolve: false});\n\treturn delay;\n};\n\nmodule.exports = delay;\n// TODO: Remove this for the next major release\nmodule.exports.default = delay;\n"],"sourceRoot":""}