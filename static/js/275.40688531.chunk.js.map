{"version":3,"file":"static/js/275.40688531.chunk.js","mappings":"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","sources":["hooks/useNotification.js","pages/LocalDevices/LocalDeviceModal.jsx","pages/LocalDevices/LocalDevicesList.jsx","pages/LocalDevices/index.jsx","services/db.js","services/devicesOptions.js","services/devicesService.js","services/localDeviceService.js","services/util.js"],"sourcesContent":["import clsx from 'clsx';\nimport {\n  SvgOutlineExclamationCircle,\n  SvgSolidExclamation,\n  useNotificationCenter,\n} from '../components/tailwind-ui';\n\nexport default function useNotification() {\n  const notificationContext = useNotificationCenter();\n\n  const addNotification = (title, message, { textColor, Icon, timeout }) => {\n    notificationContext.addNotification(\n      {\n        title: (\n          <span className={clsx('text-base font-semibold', textColor + '500')}>\n            {title}\n          </span>\n        ),\n        content: <span className=\"text-sm text-neutral-500\">{message}</span>,\n        icon: <Icon className={clsx('w-8 h-8', textColor + '600')} />,\n      },\n      timeout,\n    );\n  };\n\n  const addInfoNotification = (title, message, timeout = 1000) => {\n    addNotification(title, message, {\n      textColor: 'text-primary-',\n      Icon: SvgOutlineExclamationCircle,\n      timeout: timeout,\n    });\n  };\n\n  const addWarningNotification = (title, message, timeout = 2500) => {\n    addNotification(title, message, {\n      textColor: 'text-warning-',\n      Icon: SvgSolidExclamation,\n      timeout: timeout,\n    });\n  };\n\n  const addErrorNotification = (title, message, timeout = 5000) => {\n    addNotification(title, message, {\n      textColor: 'text-danger-',\n      Icon: SvgSolidExclamation,\n      timeout: timeout,\n    });\n  };\n\n  return { addErrorNotification, addWarningNotification, addInfoNotification };\n}\n","import React from 'react';\nimport * as Yup from 'yup';\nimport {\n  Modal,\n  Form,\n  SvgOutlinePlus,\n  SelectField,\n  FormError,\n  SubmitButton,\n  InputField,\n} from '../../components/tailwind-ui';\nimport { DEVICE_KINDS } from '../../services/devicesOptions';\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .max(50, 'Name too Long!')\n    .matches(\n      /^[A-z0-9_-]*$/,\n      'Field supports only : letters / numbers / _ / - ',\n    )\n    .required('Required'),\n});\n\nconst kindOptions = DEVICE_KINDS.map((option) => ({\n  ...option,\n  label: option.name,\n  value: option.kind,\n}));\n\nconst LocalDeviceModal = ({ initialValues, isOpen, onClose, onSave }) => {\n  const _initialValues = {\n    name: initialValues?.name,\n    kind: initialValues?.kind?.kind,\n  };\n\n  const onSubmit = (values) => {\n    const device = {\n      ...initialValues,\n      name: values.name,\n      kind: DEVICE_KINDS.filter((option) => option.kind === values.kind)[0],\n    };\n    onSave(device);\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={onClose}\n      icon={<SvgOutlinePlus />}\n      iconColor=\"neutral\"\n      animated\n      hasCloseButton\n      requestCloseOnBackdrop\n      requestCloseOnEsc\n      fluid\n      wrapperComponent={Form}\n      wrapperProps={{\n        initialValues: _initialValues,\n        validationSchema,\n        onSubmit: onSubmit,\n        className: 'h-full',\n      }}\n    >\n      <Modal.Header>Edit device information</Modal.Header>\n      <Modal.Body>\n        <div className=\"w-full mr-32 pr-16 mt-4 mb-20 items-center\">\n          <SelectField\n            name=\"kind\"\n            id=\"kind\"\n            label=\"Kind\"\n            options={kindOptions}\n            renderOption={(o) => `${o.label}`}\n            getValue={(o) => o.value}\n            required\n            className=\"mt-4 flex-1\"\n          ></SelectField>\n          <InputField\n            name=\"name\"\n            id=\"name\"\n            label=\"Name\"\n            required\n            className=\"mt-8 flex-1\"\n            inputClassName=\"w-full\"\n          ></InputField>\n        </div>\n        <FormError />\n      </Modal.Body>\n      <Modal.Footer>\n        <SubmitButton className=\"w-full sm:w-max \">Save</SubmitButton>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default LocalDeviceModal;\n","import React from 'react';\nimport {\n  Badge,\n  BadgeSize,\n  SvgOutlineChevronRight,\n  SvgSolidCog,\n  SvgSolidTrash,\n} from '../../components/tailwind-ui';\n\nconst LocalDevicesList = ({ data, onSelect, onEdit, onDelete }) => {\n  return (\n    <div className=\"overflow-hidden bg-white shadow sm:rounded-md\">\n      {data.map((element) => (\n        <li\n          key={element.id}\n          className=\"block transition duration-150 ease-in-out hover:bg-gray-50 focus:outline-none focus:bg-gray-50 cursor-pointer\"\n          onClick={(e) => onSelect(element, e)}\n        >\n          <div className=\"relative flex items-center px-4 py-4 sm:px-6\">\n            <div className=\"flex items-center flex-1 min-w-0\">\n              <div className=\"flex-1 min-w-0 px-4 sm:grid sm:grid-col-2 sm:gap-4\">\n                <div className=\"col-span-2 flex flex-row items-center flex-wrap\">\n                  <p className=\"mr-4 text-lg font-semibold truncate text-primary-700 \">\n                    {element.name}\n                  </p>\n                  <Badge\n                    dot\n                    rounded\n                    label={element.connected ? 'Active' : 'Inactive'}\n                    size={BadgeSize.SMALL}\n                    color={element.connected ? 'success' : 'neutral'}\n                    className=\"w-min h-min\"\n                  />\n                </div>\n                <div className=\"pt-2 sm:pt-0 flex flex-col text-xs font-italic text-neutral-600 justify-center\">\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">{element?.kind?.name}</span>\n                  </p>\n                </div>\n                <div className=\"pt-2 sm:pt-0 flex justify-end items-center cursor-default\">\n                  <button\n                    className=\"mx-1 p-2 border rounded shadow-sm bg-neutral-100 focus:outline-none active:bg-neutral-200\"\n                    onClick={(e) => onEdit(element, e)}\n                  >\n                    <SvgSolidCog className=\"text-gray-700\" />\n                  </button>\n                  <button\n                    className=\"mx-1 p-2 border rounded shadow-sm bg-neutral-100 focus:outline-none active:bg-neutral-200\"\n                    onClick={(e) => onDelete(element, e)}\n                  >\n                    <SvgSolidTrash className=\"text-gray-700\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div>\n              <SvgOutlineChevronRight className=\"w-5 h-5 text-neutral-400\" />\n            </div>\n          </div>\n          <div className=\"w-full border-t border-neutral-100\" />\n        </li>\n      ))}\n    </div>\n  );\n};\n\nexport default LocalDevicesList;\n","import React, { useEffect, useState } from 'react';\nimport { Button } from '../../components/tailwind-ui';\n\nimport { useNavigate } from 'react-router-dom';\n// import { useParams } from 'react-router-dom';\n\nimport LocalDeviceModal from './LocalDeviceModal';\nimport LocalDevicesList from './LocalDevicesList';\nimport useNotification from '../../hooks/useNotification';\nimport { diffDeviceLists } from '../../services/util';\nimport { DEVICE_TYPE } from '../../services/devicesOptions';\nimport {\n  addDevice,\n  updateDevice,\n  getDevices,\n  deleteDevice,\n  clearSavedData,\n} from '../../services/devicesService';\nimport {\n  localDeviceInfo,\n  requestDevices,\n  getConnectedDevices,\n  continuousUpdateDevices,\n} from '../../services/localDeviceService';\n\nconst REFRESH_INTERVAL = 1000;\n\nconst LocalDevices = (props) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [devices, setDevices] = useState([]);\n  const [deviceEdited, setDeviceEdited] = useState({});\n  const { addInfoNotification } = useNotification();\n\n  useEffect(() => refreshDevices(), []);\n\n  // React Router v6\n  const history = useNavigate();\n  // const match = useParams();\n\n  // update devices status continuously\n  useEffect(() => {\n    const cleanUp = continuousUpdateDevices((connected) => {\n      let changed;\n      const ids = connected.map((d) => d.id);\n      const _devices = devices.map((d) => {\n        if (ids.includes(d.id) && !d.connected) {\n          d.connected = true;\n          changed = true;\n        } else if (!ids.includes(d.id) && d.connected) {\n          d.connected = false;\n          changed = true;\n        }\n        return d;\n      });\n      if (changed) setDevices(_devices);\n    }, REFRESH_INTERVAL);\n\n    return () => cleanUp.then((intervalId) => clearInterval(intervalId));\n  }, [devices]);\n\n  const refreshDevices = () => {\n    getDevices(DEVICE_TYPE.local).then(setDevices);\n  };\n\n  const onRequest = async () => {\n    document.activeElement.blur();\n    await requestDevices();\n    const newList = await getConnectedDevices();\n    handleDevicesListChange(newList);\n  };\n\n  const handleDevicesListChange = (_devices) => {\n    getDevices(DEVICE_TYPE.local).then((storedDevices) => {\n      const newDevices = diffDeviceLists(_devices, storedDevices);\n      if (newDevices.length > 0) {\n        addInfoNotification('New device connected');\n        newDevices.forEach((_device) => {\n          addDevice(localDeviceInfo(_device));\n        });\n        refreshDevices();\n      }\n    });\n  };\n\n  const onSelectDevice = (device, e) => {\n    // history.push(match.url + '/' + device._id);\n    history(`${device._id}`);\n  };\n\n  const onEditDevice = async (device, e) => {\n    e.stopPropagation();\n    setDeviceEdited(device);\n    setIsModalOpen(true);\n  };\n\n  const onDeleteDevice = async (device, e) => {\n    e.stopPropagation();\n    clearSavedData(device?._id);\n    deleteDevice(device?._id).then(() => refreshDevices());\n  };\n\n  const onCloseModal = () => {\n    setIsModalOpen(false);\n    setDeviceEdited({});\n  };\n\n  const onSaveDevice = async (device) => {\n    updateDevice(device).then(() => {\n      setDeviceEdited({});\n      setIsModalOpen(false);\n      refreshDevices();\n    });\n  };\n\n  return (\n    <div className=\"p-8\">\n      <h2 className=\"text-3xl font-semibold mb-10\">Local devices</h2>\n      <div className=\"w-full flex justify-end mb-4\">\n        <Button onClick={onRequest}>Request Device</Button>\n      </div>\n      <div>\n        <div className=\"w-full my-2 flex flex-row items-center \">\n          <h3 className=\"w-max ml-2 mr-4 text-neutral-600 text-sm whitespace-nowrap \">\n            Available devices\n          </h3>\n          <div className=\"w-full border-t border-neutral-300\" />\n        </div>\n\n        {devices.length > 0 ? (\n          <LocalDevicesList\n            data={devices}\n            onSelect={onSelectDevice}\n            onEdit={onEditDevice}\n            onDelete={onDeleteDevice}\n          />\n        ) : (\n          <div className=\"mx-5 mt-10 flex flex-col items-center\">\n            <h3 className=\"text-sm font-bold text-gray-300 leading-loose\">\n              No connected Devices\n            </h3>\n            <h3 className=\"text-xs font-base text-gray-300\">\n              Please plug your device into the computer\n            </h3>\n          </div>\n        )}\n      </div>\n\n      <LocalDeviceModal\n        isOpen={isModalOpen}\n        onClose={onCloseModal}\n        initialValues={deviceEdited}\n        onSave={onSaveDevice}\n      />\n    </div>\n  );\n};\n\nexport default LocalDevices;\n","import PouchDB from 'pouchdb';\n\n// Wrap Db interface in case of switching to another Db other than \"PouchDb\"\nlet connectedDBs = {};\n\nconst DB = (dbName) => {\n  const connect = () => {\n    if (!(dbName in connectedDBs)) {\n      connectedDBs[dbName] = new PouchDB(dbName, {\n        revs_limit: 1,\n        auto_compaction: true,\n      });\n    }\n    return connectedDBs[dbName];\n  };\n\n  // DB operations to return\n\n  const getInfo = () =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      db.info()\n        .then((res) => resolve(res))\n        .catch((err) => reject(err));\n    });\n\n  const getAll = async (options) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      db.allDocs({\n        include_docs: true,\n        ...options,\n      })\n        .then((res) => resolve(res))\n        .catch((err) => reject(err));\n    });\n\n  const get = (docId) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      docId\n        ? db\n            .get(docId)\n            .then((res) => resolve(res))\n            .catch((err) => reject(err))\n        : reject(new Error('Doc fetch : docId is required'));\n    });\n\n  const put = (doc) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      !('_id' in doc)\n        ? reject(new Error('Doc create : _id is required in doc'))\n        : db\n            .put(doc)\n            .then((res) => resolve(res))\n            .catch((err) => reject(err));\n    });\n\n  const update = (doc) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      !('_id' in doc)\n        ? reject(new Error('Doc update : _id is required in doc'))\n        : db\n            .get(doc._id)\n            .then((resGet) =>\n              db\n                .put({ ...doc, _rev: resGet._rev })\n                .then((resPut) => resolve(resPut))\n                .catch((errPut) => reject(errPut)),\n            )\n            .catch((err) => reject(err));\n    });\n\n  const remove = (docId) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      docId\n        ? db\n            .get(docId)\n            .then((resGet) =>\n              db\n                .remove({ _id: docId, _rev: resGet._rev })\n                .then((resRm) => resolve(resRm))\n                .catch((errRm) => reject(errRm)),\n            )\n            .catch((err) => reject(err))\n        : reject(new Error('Doc remove : docId is required'));\n    });\n\n  // const removeAll = () => {\n  //   const db = connect();\n  //   return db\n  //     .allDocs()\n  //     .then((result) =>\n  //       Promise.all(result.rows.map((row) => db.remove(row.id, row.value.rev))),\n  //     );\n  // };\n\n  const listenToChanges = (successCallback, errorCallBack, options) => {\n    const db = connect();\n    let unsubscribe = db\n      .changes({\n        since: 'now',\n        live: true,\n        include_docs: true,\n        ...options,\n      })\n      .on('change', successCallback)\n      // .on('complete', successCallback)\n      .on('error', errorCallBack);\n    return unsubscribe;\n  };\n\n  const close = () => {\n    const db = connect();\n    delete connectedDBs[dbName];\n    return db.close();\n  };\n  const destroy = () => {\n    const db = connect();\n    delete connectedDBs[dbName];\n    return db.destroy();\n  };\n\n  return {\n    getInfo,\n    getAll,\n    get,\n    put,\n    update,\n    remove,\n    listenToChanges,\n    close,\n    destroy,\n  };\n};\n\nexport default DB;\n","import legoinoDeviceInformation from 'legoino-device-information';\n\n// Default Values\n\nexport const DEVICES_DB = 'BIOREACTOR-UI_devices';\nexport const DEFAULT_PORT =\n  window.location.protocol === 'https:' ? '443' : '80'; // old '8080'\nexport const DEFAULT_PROTOCOL =\n  window.location.protocol === 'https:' ? 'wss' : 'http'; // old tcp\n\n// Static Values\n\nexport const DEVICE_PROTOCOLS = ['http', 'tcp', 'wss'];\n\nexport const DEVICE_TYPE = {\n  broadcast: 'broadcast',\n  interactive: 'interactive',\n  local: 'local',\n};\n\nexport const COMMANDS = {\n  help: 'h',\n  settings: 'u',\n  compactSettings: 'uc',\n  runExperiment: 'r',\n  kinetic: 'k',\n  reset: 'ur1234',\n  sleep: 'l',\n  setParameter: (label, value) => `${label}${value}`,\n};\n\nexport const DEVICE_KINDS = Object.keys(legoinoDeviceInformation)\n  .filter((key) => legoinoDeviceInformation[key].kind)\n  .map((key) => {\n    const { events, parameters, ...info } = legoinoDeviceInformation[key];\n    return info;\n  });\n\nexport const DEVICE_STATUS = {\n  opening: 1,\n  opened: 2,\n  closed: 3,\n  missing: 9,\n  error: 10,\n};\n","import legoinoDeviceInformation from 'legoino-device-information';\nimport DB from './db';\nimport { DEVICES_DB } from './devicesOptions';\n\n// Private Functions\n\nconst throwDbError = (error, additionalMsg) => {\n  console.log(error);\n  const err = new Error(`${additionalMsg} \\n${error?.message}`);\n  err.name = 'DATABASE_ERROR';\n  throw err;\n};\n\n// Public Functions\n\n/**\n * return device _id\n */\nexport const concatDeviceId = (type, kind, id) => `${type}_${kind}_${id}`;\n\n/**\n * Get device Kind from its ID\n */\nexport const getDeviceKind = (deviceId) => {\n  try {\n    if (deviceId) {\n      const selectedDeviceKind = legoinoDeviceInformation.fromDeviceID(\n        Number(deviceId),\n      );\n      return selectedDeviceKind;\n    }\n  } catch (e) {\n    console.log(e);\n    return undefined;\n  }\n};\n\n/**\n * map parameters based on kind\n */\nexport const mapParameters = (kind, params) =>\n  kind && params\n    ? legoinoDeviceInformation[kind]?.parameters?.map((p) => ({\n        ...p,\n        value: params[p.label],\n      }))\n    : undefined;\n\n//=====================================\n/**\n * Devices DB operations\n */\n\nexport const getDevices = async (type) =>\n  DB(DEVICES_DB)\n    .getAll({ startkey: `${type}`, endkey: `${type}\\uffff` })\n    .then((res) => res.rows.map((i) => i.doc))\n    .catch((e) => throwDbError(e, `Get locally saved devices error`));\n\nexport const getDevicesByKind = async (type, kind) =>\n  DB(DEVICES_DB)\n    .getAll({ startkey: `${type}_${kind}`, endkey: `${type}_${kind}\\uffff` })\n    .then((res) => res.rows)\n    .catch((e) => throwDbError(e, `Get locally saved devices error`));\n\nexport const getDevice = async (deviceId) =>\n  DB(DEVICES_DB)\n    .get(deviceId)\n    .catch((e) => throwDbError(e, `Get device error`));\n\nexport const updateDevice = async (deviceData) =>\n  DB(DEVICES_DB)\n    .update(deviceData)\n    .catch((e) => throwDbError(e, `Update device error`));\n\nexport const deleteDevice = (deviceID) =>\n  DB(DEVICES_DB)\n    .remove(deviceID)\n    .catch((e) => throwDbError(e, `Delete device error`));\n\nexport const addDevice = (device) =>\n  DB(DEVICES_DB)\n    .put(device)\n    .catch((e) =>\n      e.name === 'conflict'\n        ? throwDbError(e, `Device name must be unique`)\n        : throwDbError(e, `Insert device error`),\n    );\n\n//=====================================\n/**\n * Device Data operations\n */\n\n// Ps: don't forget to close Db connection in cleanup function\n\nexport const saveDataRow = (deviceId, data) =>\n  DB(deviceId).put({ _id: Date.now().toString(), ...data });\n\nexport const getSavedData = (deviceId) =>\n  DB(deviceId)\n    .getAll({\n      descending: true,\n    })\n    .then((res) => res.rows.map((d) => d.doc));\n\nexport const getSavedDataByPage = (deviceId, page, itemsByPage) =>\n  DB(deviceId)\n    .getAll({\n      descending: true,\n      skip: (page - 1) * itemsByPage,\n      limit: itemsByPage,\n    })\n    .then((res) => res.rows.map((d) => d.doc));\n\nexport const getSavedDataCount = (deviceId) =>\n  DB(deviceId)\n    .getAll({\n      include_docs: false,\n    })\n    .then((res) => res.total_rows);\n\nexport const getLastSavedData = (deviceId) =>\n  DB(deviceId)\n    .getAll({\n      descending: true,\n      limit: 1,\n    })\n    .then((res) => res.rows.map((d) => d.doc));\n\nexport const clearSavedData = (deviceId) => DB(deviceId).destroy();\n\nexport const listenToDataChanges = (deviceId, successCallback, errorCallBack) =>\n  DB(deviceId).listenToChanges(successCallback, errorCallBack);\n\nexport const closeDbConnection = (dbName) => DB(dbName).close();\n","import { isFunction } from 'lodash';\nimport { DevicesManager } from 'legoino-navigator-serial';\nimport { DEVICE_TYPE } from './devicesOptions';\nimport { concatDeviceId, getDeviceKind } from './devicesService';\n\nconst SCAN_INTERVAL = 1000;\n\nconst devicesManager = new DevicesManager(navigator.serial);\n\n/**\n * return device information to be stored in DB\n */\nexport const localDeviceInfo = ({ id, name }) => {\n  const kind = getDeviceKind(id);\n  return {\n    _id: concatDeviceId(DEVICE_TYPE.local, kind?.kind, id),\n    id: id,\n    name: name ? name : `${kind?.kind}-${id}`,\n    kind: kind,\n  };\n};\n\n/**\n * By calling this method from a click you give users the possibility to allow access to some devices\n */\nexport const requestDevices = async () => {\n  await devicesManager.requestDevices();\n};\n\n/**\n * @returns {Array<object>}\n */\nexport const getConnectedDevices = async () => {\n  await devicesManager.updateDevices();\n  const connectedDevices = await devicesManager.getDevicesList({\n    ready: true, // If ready==`true` returns only currently connected device, else returns all devices ever connected.\n  });\n  return connectedDevices;\n};\n\n/**\n * Update updated devices list every `scanInterval` [ms].\n * @param {Function} callback(devicesList): Callback to execute on each update\n * @param {number} scanInterval Delay between calls\n */\nexport const continuousUpdateDevices = async (\n  callback,\n  scanInterval = SCAN_INTERVAL,\n) => {\n  const interval = setInterval(async () => {\n    const connectedDevices = await getConnectedDevices();\n    isFunction(callback) && callback(connectedDevices);\n  }, scanInterval);\n  return interval;\n};\n\n/**\n * Send a serial command to a device.\n * @param {number} id ID of the device\n * @param {string} command Command to send\n * @returns ??????\n */\nexport const sendCommand = async (deviceId, command) => {\n  return await devicesManager.sendCommand(deviceId, command);\n};\n","/**\n *\n * @param {Array} firstArray\n * @param {Array} secondArray\n * @returns {Array} elements in firstArray & not in secondArray\n */\n\nexport const diffDeviceLists = (firstArray, secondArray) => {\n  const compare = (otherArray) => (current) =>\n    otherArray.filter((other) => other.id === current.id).length === 0;\n\n  return firstArray.filter(compare(secondArray));\n};\n\nexport const msToTime = (duration) => {\n  const seconds = Math.floor((duration / 1000) % 60),\n    minutes = Math.floor((duration / (1000 * 60)) % 60),\n    hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n  let time = `${seconds}s`;\n  if (hours) {\n    time = `${hours}h ${minutes}m ` + time;\n  } else if (minutes) {\n    time = `${minutes}m ` + time;\n  }\n  return time;\n};\n"],"names":["useNotification","notificationContext","useNotificationCenter","addNotification","title","message","textColor","Icon","timeout","className","clsx","content","icon","addErrorNotification","SvgSolidExclamation","addWarningNotification","addInfoNotification","SvgOutlineExclamationCircle","validationSchema","Yup","shape","name","max","matches","required","kindOptions","DEVICE_KINDS","option","label","value","kind","initialValues","isOpen","onClose","onSave","_initialValues","onRequestClose","iconColor","animated","hasCloseButton","requestCloseOnBackdrop","requestCloseOnEsc","fluid","wrapperComponent","Form","wrapperProps","onSubmit","values","device","id","options","renderOption","o","getValue","inputClassName","data","onSelect","onEdit","onDelete","map","element","onClick","e","dot","rounded","connected","size","BadgeSize","color","props","useState","isModalOpen","setIsModalOpen","devices","setDevices","deviceEdited","setDeviceEdited","useEffect","refreshDevices","history","useNavigate","cleanUp","continuousUpdateDevices","changed","ids","d","_devices","includes","then","intervalId","clearInterval","getDevices","DEVICE_TYPE","onRequest","document","activeElement","blur","requestDevices","getConnectedDevices","newList","handleDevicesListChange","storedDevices","newDevices","diffDeviceLists","length","forEach","_device","addDevice","localDeviceInfo","onEditDevice","stopPropagation","onDeleteDevice","clearSavedData","_id","deleteDevice","onSaveDevice","updateDevice","LocalDeviceModal","connectedDBs","dbName","connect","PouchDB","revs_limit","auto_compaction","getAll","Promise","resolve","reject","allDocs","include_docs","res","catch","err","getInfo","info","get","docId","db","Error","put","doc","update","resGet","_rev","resPut","errPut","remove","resRm","errRm","listenToChanges","successCallback","errorCallBack","changes","since","live","on","close","destroy","DEVICES_DB","DEFAULT_PORT","window","location","protocol","DEFAULT_PROTOCOL","DEVICE_PROTOCOLS","broadcast","interactive","local","COMMANDS","help","settings","compactSettings","runExperiment","kinetic","reset","sleep","setParameter","Object","keys","legoinoDeviceInformation","filter","key","events","parameters","throwDbError","error","additionalMsg","console","log","concatDeviceId","type","getDeviceKind","deviceId","Number","mapParameters","params","p","undefined","DB","startkey","endkey","rows","i","getDevice","deviceData","deviceID","saveDataRow","Date","now","toString","getSavedData","descending","getSavedDataByPage","page","itemsByPage","skip","limit","getSavedDataCount","total_rows","getLastSavedData","listenToDataChanges","closeDbConnection","SCAN_INTERVAL","devicesManager","DevicesManager","navigator","serial","updateDevices","getDevicesList","ready","connectedDevices","callback","scanInterval","interval","setInterval","isFunction","sendCommand","command","firstArray","secondArray","otherArray","current","other","msToTime","duration","seconds","Math","floor","minutes","hours","time"],"sourceRoot":""}