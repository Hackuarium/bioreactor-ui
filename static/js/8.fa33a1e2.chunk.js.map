{"version":3,"sources":["services/devicesOptions.js","hooks/useNotification.js","services/mqttService.js","services/db.js","services/broadCastDeviceService.js","pages/BroadcastDevices/DevicesList.jsx","pages/BroadcastDevices/DeviceModal.jsx","pages/BroadcastDevices/index.jsx"],"names":["DEVICES_DB","DEFAULT_PORT","DEFAULT_PROTOCOL","DEVICE_PROTOCOLS","DEVICE_KINDS","Object","keys","legoinoDeviceInformation","map","key","kind","COMMANDS","compactSettings","runExperiment","kinetic","reset","sleep","setParameter","label","value","useNotification","notificationContext","useNotificationCenter","addNotification","title","message","textColor","Icon","timeout","className","clsx","content","icon","addErrorNotification","SvgSolidExclamation","addWarningNotification","addInfoNotification","SvgOutlineExclamationCircle","client","DB","dbName","connect","PouchDB","getInfo","Promise","resolve","reject","db","info","then","res","close","catch","err","getAll","options","a","allDocs","include_docs","get","docId","Error","put","doc","update","_id","resGet","_rev","resPut","errPut","remove","resRm","errRm","url","protocol","port","username","password","onSuccess","onError","connected","hostname","isFunction","brokerUrl","mqtt","keepalive","reconnectPeriod","on","console","log","stream","error","name","end","getClientInstance","subscribe","topic","onMessageReceived","qos","payload","data","parseCurrentSettings","toString","unsubscribe","disconnect","callback","throwDbError","additionalMsg","getSavedDevices","rows","i","e","getDevice","deviceId","updateDevice","deviceData","deleteDevice","deviceID","addDevice","connectDevice","mqttClient","dbClient","onSubscribe","Date","now","getAllData","getLastData","descending","limit","getPageData","skip","getAllDataCount","total_rows","testDeviceConnection","DevicesList","onSelect","onEdit","onDelete","useState","selectedElement","setSelectedElement","handleSelect","element","onClick","protocolOptions","val","toUpperCase","kindOptions","validationSchema","Yup","shape","max","matches","required","positive","integer","DeviceModal","isOpen","onClose","onSave","onUpdate","initialValues","updateMode","isEmpty","footerMessage","setFooterMessage","formRef","useRef","_initialValues","useEffect","setTimeout","onSubmit","values","renderFooterMessage","state","onRequestClose","iconColor","animated","hasCloseButton","requestCloseOnBackdrop","requestCloseOnEsc","fluid","wrapperComponent","Form","wrapperProps","innerRef","Header","Body","id","placeholder","disabled","inputClassName","leadingInlineAddon","renderOption","o","getValue","type","Footer","stopPropagation","current","BroadcastDevices","history","match","render","setRender","isModalOpen","setIsModalOpen","devicesList","setDevicesList","onEditValues","setOnEditValues","list","device","push"],"mappings":"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","file":"static/js/8.fa33a1e2.chunk.js","sourcesContent":["import legoinoDeviceInformation from 'legoino-device-information';\n\n// Default Values\n\nexport const DEVICES_DB = 'BIOREACTOR_devices';\nexport const DEFAULT_PORT = '80'; // old '8080'\nexport const DEFAULT_PROTOCOL = 'http'; // old tcp\n\n// Static Values\n\nexport const DEVICE_TYPE = {\n  broadcast: 'broadcast',\n  interactive: 'interactive',\n  local: 'local',\n};\n\nexport const DEVICE_PROTOCOLS = ['http', 'tcp', 'wss'];\n\nexport const DEVICE_KINDS = Object.keys(legoinoDeviceInformation).map(\n  (key) => legoinoDeviceInformation[key].kind,\n);\n\nexport const DEVICE_STATUS = {\n  opening: 1,\n  opened: 2,\n  closed: 3,\n  missing: 9,\n  error: 10,\n};\n\nexport const COMMANDS = {\n  compactSettings: 'uc',\n  runExperiment: 'r',\n  kinetic: 'k',\n  reset: 'ur1234',\n  sleep: 'l',\n  setParameter: (label, value) => `${label}${value}`,\n};\n","import clsx from 'clsx';\nimport {\n  SvgOutlineExclamationCircle,\n  SvgSolidExclamation,\n  useNotificationCenter,\n} from '../components/tailwind-ui';\n\nexport default function useNotification() {\n  const notificationContext = useNotificationCenter();\n\n  const addNotification = (title, message, { textColor, Icon, timeout }) => {\n    notificationContext.addNotification(\n      {\n        title: (\n          <span className={clsx('text-base font-semibold', textColor + '500')}>\n            {title}\n          </span>\n        ),\n        content: <span className=\"text-sm text-neutral-500\">{message}</span>,\n        icon: <Icon className={clsx('w-8 h-8', textColor + '600')} />,\n      },\n      timeout,\n    );\n  };\n\n  const addInfoNotification = (title, message, timeout = 1000) => {\n    addNotification(title, message, {\n      textColor: 'text-primary-',\n      Icon: SvgOutlineExclamationCircle,\n      timeout: timeout,\n    });\n  };\n\n  const addWarningNotification = (title, message, timeout = 2500) => {\n    addNotification(title, message, {\n      textColor: 'text-warning-',\n      Icon: SvgSolidExclamation,\n      timeout: timeout,\n    });\n  };\n\n  const addErrorNotification = (title, message, timeout = 5000) => {\n    addNotification(title, message, {\n      textColor: 'text-danger-',\n      Icon: SvgSolidExclamation,\n      timeout: timeout,\n    });\n  };\n\n  return { addErrorNotification, addWarningNotification, addInfoNotification };\n}\n","import mqtt from 'mqtt';\nimport { isFunction } from 'lodash';\nimport { parseCurrentSettings } from 'legoino-util';\n\n// Private Functions\nlet client;\n\nconst getClientInstance = (\n  url,\n  protocol,\n  port,\n  username,\n  password,\n  onSuccess,\n  onError,\n) => {\n  // if client is already connected\n  if (client && client.connected && client.options.hostname === url)\n    isFunction(onSuccess) && onSuccess(client);\n\n  const brokerUrl = `${protocol}://${url}:${port}`;\n  client = mqtt.connect(brokerUrl, {\n    keepalive: 300,\n    reconnectPeriod: 5000,\n  });\n\n  client.on('connect', () => {\n    console.log(`connected to ${brokerUrl} : ${client.connected}`);\n    isFunction(onSuccess) && onSuccess(client);\n  });\n\n  client.stream.on('error', (err) => {\n    console.log(err);\n    const error = new Error(`Couldn't connect to BROKER \"${brokerUrl}\"`);\n    error.name = 'Mqtt Error';\n    client.end();\n    isFunction(onError) && onError(error);\n  });\n};\n\nconst parseToJson = (data) => {\n  return parseCurrentSettings(data.toString(), {});\n};\n\n// Public Functions\n\nexport const connect = (url, protocol, port, username, password) => {\n  const clientPromise = new Promise((resolve, reject) => {\n    getClientInstance(\n      url,\n      protocol,\n      port,\n      username,\n      password,\n      (client) => resolve(client),\n      (error) => reject(error),\n    );\n  });\n  return clientPromise;\n};\n\n// TO DO: update function\n\nexport const subscribe = (client, topic, onMessageReceived, onError) => {\n  client.subscribe(topic, { qos: 2 }, (err) => {\n    err\n      ? isFunction(onError) && onError(err)\n      : client.on('message', (topic, payload) => {\n          isFunction(onMessageReceived) &&\n            onMessageReceived(parseToJson(payload));\n        });\n  });\n\n  const unsubscribe = (onError) => client.unsubscribe(topic, {}, onError);\n\n  return unsubscribe;\n};\n\nexport const disconnect = (client, callback) =>\n  client.end(() => {\n    console.log(`mqtt broker \"${client.options.hostname}\" disconnected`);\n    isFunction(callback) && callback();\n  });\n","import PouchDB from 'pouchdb';\n\n// Wrap Db interface in case of switching to another Db other than \"PouchDb\"\n\nconst DB = (dbName) => {\n  const connect = () => new PouchDB(dbName);\n\n  // DB operations to return\n\n  const getInfo = () =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      db.info()\n        .then((res) => db.close(() => resolve(res)))\n        .catch((err) => db.close(() => reject(err)));\n    });\n\n  const getAll = async (options) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      db.allDocs({\n        include_docs: true,\n        ...options,\n      })\n        .then((res) => db.close(() => resolve(res)))\n        .catch((err) => db.close(() => reject(err)));\n    });\n\n  const get = (docId) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      docId\n        ? db\n            .get(docId)\n            .then((res) => db.close(() => resolve(res)))\n            .catch((err) => db.close(() => reject(err)))\n        : reject(new Error('Doc fetch : docId is required'));\n    });\n\n  const put = (doc) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      !('_id' in doc)\n        ? reject(new Error('Doc create : _id is required in doc'))\n        : db\n            .put(doc)\n            .then((res) => db.close(() => resolve(res)))\n            .catch((err) => db.close(() => reject(err)));\n    });\n\n  const update = (doc) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      !('_id' in doc)\n        ? reject(new Error('Doc update : _id is required in doc'))\n        : db\n            .get(doc._id)\n            .then((resGet) =>\n              db\n                .put({ ...doc, _rev: resGet._rev })\n                .then((resPut) => db.close(() => resolve(resPut)))\n                .catch((errPut) => reject(errPut)),\n            )\n            .catch((err) => db.close(() => reject(err)));\n    });\n\n  const remove = (docId) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      docId\n        ? db\n            .get(docId)\n            .then((resGet) =>\n              db\n                .remove({ _id: docId, _rev: resGet._rev })\n                .then((resRm) => db.close(() => resolve(resRm)))\n                .catch((errRm) => reject(errRm)),\n            )\n            .catch((err) => db.close(() => reject(err)))\n        : reject(new Error('Doc remove : docId is required'));\n    });\n\n  return {\n    getInfo,\n    getAll,\n    get,\n    put,\n    update,\n    remove,\n  };\n};\n\nexport default DB;\n","import DB from './db';\nimport { isFunction } from 'lodash';\nimport { connect, subscribe, disconnect } from './mqttService';\nimport { DEVICES_DB, DEFAULT_PORT, DEFAULT_PROTOCOL } from './devicesOptions';\n\n// Private Functions\n\nconst throwDbError = (error, additionalMsg) => {\n  console.log(error);\n  const err = new Error(`${additionalMsg} \\n${error?.message}`);\n  err.name = 'DATABASE_ERROR';\n  throw err;\n};\n\n// Public Functions\n\n// export const getSavedDevices = async () => {\n//   const dbClient = DB(DEVICES_DB);\n//   const list = await dbClient.getAll();\n//   return list.map((item) => item.doc);\n// };\nexport const getSavedDevices = async () =>\n  DB(DEVICES_DB)\n    .getAll()\n    .then((res) => res.rows.map((i) => i.doc))\n    .catch((e) => throwDbError(e, `Get locally saved devices error`));\n\n// export const getDevice = async (deviceId) => {\n//   const dbClient = db.connect(DEVICES_DB);\n//   const device = await dbClient.get(deviceId);\n//   return device;\n// };\nexport const getDevice = async (deviceId) =>\n  DB(DEVICES_DB)\n    .get(deviceId)\n    .catch((e) => throwDbError(e, `Get device error`));\n\n// export const updateDevice = async (deviceData) => {\n//   const dbClient = db.connect(DEVICES_DB);\n//   return dbClient.update(deviceData);\n// };\nexport const updateDevice = async (deviceData) =>\n  DB(DEVICES_DB)\n    .update(deviceData)\n    .catch((e) => throwDbError(e, `Update device error`));\n\n// export const deleteDevice = (deviceID) => {\n//   const dbClient = db.connect(DEVICES_DB);\n//   return dbClient.remove(deviceID).catch((e) => {\n//     const err = new Error(`Couldn't remove record: ${e.message}`);\n//     err.name = 'Database Error';\n//     throw err;\n//   });\n// };\nexport const deleteDevice = (deviceID) =>\n  DB(DEVICES_DB)\n    .remove(deviceID)\n    .catch((e) => throwDbError(e, `Delete device error`));\n\n// add device to devices DB\n\nexport const addDevice = ({\n  kind,\n  name,\n  url,\n  protocol = DEFAULT_PROTOCOL,\n  port = DEFAULT_PORT,\n  topic,\n  username,\n  password,\n}) =>\n  DB(DEVICES_DB)\n    .put({\n      _id: `${kind}_${name}`,\n      name,\n      url,\n      protocol,\n      port,\n      topic,\n      kind,\n      username,\n      password,\n    })\n    .catch((e) =>\n      e.name === 'conflict'\n        ? throwDbError(e, `Device name must be unique`)\n        : throwDbError(e, `Insert device error`),\n    );\n\n// export const addDevice2 = (props) => {\n//   const dbClient = db.connect(DEVICES_DB);\n//   const { kind, name, url, protocol, port, topic, username, password } = props;\n\n//   // make sure all props are defined\n//   for (let key in props)\n//     if (!props[key]) throw new Error(`Field missing [${key}]`);\n\n//   const id = `${kind}_${name}`;\n\n//   return dbClient\n//     .get(id)\n//     .then((r) => {\n//       // the device already exists in DB\n//       const err = new Error('Another device exists with the same name');\n//       err.payload = { exist: true, payload: r };\n//       throw err;\n//     })\n//     .catch((e) => {\n//       // if the device exists in DB\n//       if (e.payload && e.payload.exist) throw e;\n//       // the device does not exist in DB\n//       return dbClient\n//         .put({\n//           _id: id,\n//           name,\n//           url,\n//           protocol,\n//           port,\n//           topic,\n//           kind,\n//           username,\n//           password,\n//         })\n//         .then((r) => {\n//           // inserted successfully\n//           return { exist: false, inserted: true, payload: r };\n//         })\n//         .catch((e) => {\n//           // DB error\n//           const err = new Error(e.toString());\n//           err.payload = {\n//             exist: false,\n//             inserted: false,\n//             payload: e.toString(),\n//           };\n//           throw err;\n//         });\n//     });\n// };\n\n//\n// connect to broadcast device & return a client instance with {subscribe, disconnect, getAllData, getLastData}\nexport const connectDevice = ({\n  _id,\n  name,\n  kind,\n  deviceId = _id || `${kind}_${name}`,\n  url,\n  protocol = DEFAULT_PROTOCOL,\n  port = DEFAULT_PORT,\n  topic,\n  username,\n  password,\n}) => {\n  const clientPromise = new Promise(async (resolve, reject) => {\n    try {\n      const mqttClient = await connect(url, protocol, port, username, password);\n      const dbClient = DB(deviceId);\n\n      const _subscribe = (onSubscribe, onError) => {\n        const unsubscribe = subscribe(\n          mqttClient,\n          topic,\n          (payload) => {\n            dbClient.put({ _id: Date.now().toString(), ...payload });\n            isFunction(onSubscribe) && onSubscribe(payload);\n          },\n          onError,\n        );\n        return unsubscribe;\n      };\n\n      const _disconnect = () => disconnect(mqttClient);\n\n      const getAllData = () =>\n        dbClient.getAll().then((res) => res.rows.map((i) => i.doc));\n\n      const getLastData = () =>\n        dbClient\n          .getAll({ descending: true, limit: 1 })\n          .then((res) => res.rows.map((i) => i.doc));\n\n      const getPageData = (skip, limit) =>\n        dbClient\n          .getAll({ descending: true, skip: skip, limit: limit })\n          .then((res) => res.rows.map((i) => i.doc));\n\n      const getAllDataCount = () =>\n        dbClient.getAll().then((res) => res.total_rows);\n\n      resolve({\n        subscribe: _subscribe,\n        disconnect: _disconnect,\n        getAllData,\n        getLastData,\n        getPageData,\n        getAllDataCount,\n      });\n    } catch (e) {\n      // connection error\n      reject(e);\n    }\n  });\n\n  return clientPromise;\n};\n\nexport const testDeviceConnection = ({\n  url,\n  protocol = DEFAULT_PROTOCOL,\n  port = DEFAULT_PORT,\n  topic,\n  username,\n  password,\n}) => {\n  const clientPromise = new Promise(async (resolve, reject) => {\n    try {\n      const mqttClient = await connect(url, protocol, port, username, password);\n      const unsubscribe = subscribe(\n        mqttClient,\n        topic,\n        (payload) => {\n          unsubscribe();\n          disconnect(mqttClient, () => resolve(payload));\n        },\n        reject,\n      );\n    } catch (e) {\n      // connection error\n      reject(e);\n    }\n  });\n\n  return clientPromise;\n};\n","import { isFunction } from 'lodash';\nimport { useState } from 'react';\nimport {\n  Spinner,\n  SvgOutlineChevronRight,\n  SvgSolidCog,\n  SvgSolidTrash,\n} from '../../components/tailwind-ui';\n\nconst DevicesList = ({ data, onSelect, onEdit, onDelete }) => {\n  const [selectedElement, setSelectedElement] = useState();\n\n  const handleSelect = async (element, e) => {\n    // ignore click if another element is already selected (is loading)\n    if (!selectedElement) {\n      setSelectedElement(element);\n      const callback = () => setSelectedElement(null);\n      isFunction(onSelect) && onSelect(element, e, callback);\n    }\n  };\n  return (\n    <div className=\"overflow-hidden bg-white shadow sm:rounded-md\">\n      {data.map((element) => (\n        <li\n          key={element.kind + element.name}\n          className=\"block transition duration-150 ease-in-out hover:bg-gray-50 focus:outline-none focus:bg-gray-50 cursor-pointer\"\n          onClick={(e) => handleSelect(element, e)}\n        >\n          <div className=\"relative flex items-center px-4 py-4 sm:px-6\">\n            {selectedElement === element && ( // if element is selected, display spinner\n              <div className=\"absolute top-0 left-0 w-full h-full opacity-30 bg-neutral-300\">\n                <div className=\"w-full h-full flex justify-center items-center\">\n                  <Spinner className=\"w-8 h-8 text-primary-800\" />\n                </div>\n              </div>\n            )}\n            <div className=\"flex items-center flex-1 min-w-0\">\n              <div className=\"flex-1 min-w-0 px-4 sm:grid sm:grid-col-2 sm:gap-4\">\n                <p className=\"col-span-2 text-lg font-semibold truncate text-primary-700\">\n                  {element.name}\n                </p>\n                <div className=\"flex flex-col text-xs font-italic text-neutral-600\">\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">Device kind : </span>\n                    {element.kind}\n                  </p>\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">URL : </span>\n                    {`${element.protocol}://${element.url}:${element.port}`}\n                  </p>\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">Topic : </span>\n                    {element.topic}\n                  </p>\n                </div>\n                <div className=\"pt-2 sm:pt-0 flex justify-end items-center cursor-default\">\n                  <button\n                    className=\"mx-1 p-2 border rounded shadow-sm bg-neutral-100 focus:outline-none active:bg-neutral-200\"\n                    onClick={(e) => onEdit(element, e)}\n                  >\n                    <SvgSolidCog className=\"text-gray-700\" />\n                  </button>\n                  <button\n                    className=\"mx-1 p-2 border rounded shadow-sm bg-neutral-100 focus:outline-none active:bg-neutral-200\"\n                    onClick={(e) => onDelete(element, e)}\n                  >\n                    <SvgSolidTrash className=\"text-gray-700\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div>\n              <SvgOutlineChevronRight className=\"w-5 h-5 text-neutral-400\" />\n            </div>\n          </div>\n          <div className=\"w-full border-t border-neutral-100\" />\n        </li>\n      ))}\n    </div>\n  );\n};\n\nexport default DevicesList;\n","import { useRef, useState, useEffect } from 'react';\nimport * as Yup from 'yup';\nimport { isFunction, isEmpty } from 'lodash';\nimport {\n  Form,\n  InputField,\n  Modal,\n  SvgOutlinePlus,\n  FormError,\n  SubmitButton,\n  SvgOutlineUser,\n  SvgOutlineKey,\n  SvgOutlineLink,\n  SvgOutlineX,\n  SelectField,\n  Spinner,\n  SvgOutlineCheck,\n} from '../../components/tailwind-ui';\n\nimport { testDeviceConnection } from '../../services/broadCastDeviceService';\nimport {\n  DEFAULT_PORT,\n  DEVICE_KINDS,\n  DEVICE_PROTOCOLS,\n} from '../../services/devicesOptions';\n\n//\n// Pre-defined Vars\nconst protocolOptions = DEVICE_PROTOCOLS.map((val) => {\n  return { label: val.toUpperCase(), value: val };\n});\nconst kindOptions = DEVICE_KINDS.map((val) => {\n  return { label: val, value: val };\n});\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .max(50, 'Name too Long!')\n    .matches(\n      /^[A-z0-9_-]*$/,\n      'Field supports only : letters / numbers / _ / - ',\n    )\n    .required('Required'),\n  url: Yup.string().required('Required'),\n  port: Yup.number().positive().integer(),\n  protocol: Yup.string(),\n  kind: Yup.string().required('Required'),\n  topic: Yup.string().required('Required'),\n  username: Yup.string().required('Required'),\n});\n//\n\nconst DeviceModal = ({ isOpen, onClose, onSave, onUpdate, initialValues }) => {\n  const updateMode = !isEmpty(initialValues); // if initialValues defined : updates the recode; else: add the record\n  const [footerMessage, setFooterMessage] = useState(<div />);\n  const formRef = useRef(null); // Ref the Form\n\n  const _initialValues = {\n    name: 'Computer',\n    url: 'mqtt.hackuarium.org',\n    protocol: protocolOptions[0].value,\n    port: DEFAULT_PORT,\n    kind: kindOptions[0].value,\n    topic: 'lpatiny/Computer/server',\n    username: 'testUser',\n    password: 'word',\n    ...initialValues,\n  };\n\n  useEffect(() => {\n    // clear footer when modal is closed\n    !isOpen && setTimeout(() => setFooterMessage(<div />), 500);\n  }, [isOpen]);\n\n  // events functions\n  const onSubmit = async (values) => {\n    try {\n      //await addDevice(values);\n      updateMode\n        ? isFunction(onUpdate) && (await onUpdate(values))\n        : isFunction(onSave) && (await onSave(values));\n      isFunction(onClose) && onClose();\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  const testConnection = (e) => {\n    e.stopPropagation();\n    renderFooterMessage('connecting', 'Connecting ...');\n    setTimeout(() => {\n      testDeviceConnection(formRef.current.values)\n        .then(() => {\n          renderFooterMessage('success', 'Connected');\n        })\n        .catch((err) => {\n          renderFooterMessage('error', `Connection Error: ${err.message}`);\n        });\n    }, 500);\n  };\n\n  // helper function for testConnection event\n  const renderFooterMessage = (state, message) => {\n    switch (state) {\n      case 'connecting':\n        setFooterMessage(\n          <div className=\"mx-6 flex flex-row items-center text-sm text-left text-neutral-500\">\n            <Spinner className=\"w-6 h-6 mr-2\" />\n            <span>{message}</span>\n          </div>,\n        );\n        break;\n\n      case 'success':\n        setFooterMessage(\n          <div className=\"mx-4 flex flex-row items-center text-sm text-left text-success-500\">\n            <SvgOutlineCheck className=\"h-6 w-6 mr-4\" />\n            <span>{message}</span>\n          </div>,\n        );\n        break;\n\n      case 'error':\n        setFooterMessage(\n          <div className=\"mx-4 flex flex-row items-center text-sm text-left text-danger-500\">\n            <SvgOutlineX className=\"h-6 w-6 mr-4\" />\n            <span>{message}</span>\n          </div>,\n        );\n        break;\n\n      default:\n        setFooterMessage(<div />);\n        break;\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={onClose}\n      icon={<SvgOutlinePlus />}\n      iconColor=\"neutral\"\n      animated\n      hasCloseButton\n      requestCloseOnBackdrop\n      requestCloseOnEsc\n      fluid\n      wrapperComponent={Form}\n      wrapperProps={{\n        innerRef: formRef,\n        initialValues: _initialValues,\n        validationSchema,\n        onSubmit: onSubmit,\n        className: 'h-full',\n      }}\n    >\n      <Modal.Header>Connect New Device</Modal.Header>\n      <Modal.Body>\n        <div className=\"p-2 mt-2\">\n          <InputField\n            name=\"name\"\n            id=\"name\"\n            label=\"Custom name\"\n            placeholder=\"Device name\"\n            disabled={updateMode}\n            required\n            className=\"w-full\"\n            inputClassName=\"w-full\"\n          ></InputField>\n          <div className=\"flex flex-col sm:flex-row sm:justify-between mt-4 sm:mt-0 border-t border-neutral sm:border-0\">\n            <InputField\n              name=\"url\"\n              id=\"url\"\n              label=\"URL\"\n              placeholder=\"mqtt.domain.com\"\n              required\n              leadingInlineAddon={<SvgOutlineLink />}\n              className=\"mt-4 sm:mr-4 w-full sm:w-1/2\"\n              inputClassName=\"w-full\"\n            ></InputField>\n            <div className=\"flex flex-row justify-between items-start flex-1\">\n              <SelectField\n                name=\"protocol\"\n                id=\"protocol\"\n                label=\"Protocol\"\n                options={protocolOptions}\n                renderOption={(o) => `${o.label}`}\n                getValue={(o) => o.value}\n                className=\"mt-4 mr-4 w-1/2\"\n                inputClassName=\"w-full\"\n              ></SelectField>\n              <InputField\n                name=\"port\"\n                id=\"port\"\n                label=\"Port\"\n                className=\"mt-4 flex-1\"\n                inputClassName=\"w-full\"\n              ></InputField>\n            </div>\n          </div>\n          <div className=\"flex flex-row justify-between items-start\">\n            <SelectField\n              name=\"kind\"\n              id=\"kind\"\n              label=\"Device kind\"\n              options={kindOptions}\n              renderOption={(o) => `${o.label}`}\n              getValue={(o) => o.value}\n              required\n              className=\"mt-4 mr-4 w-1/3 \"\n              inputClassName=\"w-full bg-gray-500\"\n            ></SelectField>\n            <InputField\n              name=\"topic\"\n              id=\"topic\"\n              label=\"Topic\"\n              required\n              className=\"mt-4 flex-1\"\n              inputClassName=\"w-full\"\n            ></InputField>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row sm:justify-between mt-4 sm:mt-0 border-t border-neutral sm:border-0\">\n            <InputField\n              name=\"username\"\n              id=\"username\"\n              label=\"Username\"\n              placeholder=\"Username\"\n              required\n              leadingInlineAddon={<SvgOutlineUser />}\n              className=\"mt-4 w-full sm:mr-4 sm:w-1/2\"\n              inputClassName=\"w-full\"\n            ></InputField>\n            <InputField\n              name=\"password\"\n              id=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              placeholder=\"********\"\n              required\n              leadingInlineAddon={<SvgOutlineKey />}\n              className=\"mt-4 w-full sm:flex-1\"\n              inputClassName=\"w-full\"\n            ></InputField>\n          </div>\n        </div>\n        <FormError />\n      </Modal.Body>\n      <Modal.Footer>\n        <div className=\"flex flex-col sm:flex-row items-center\">\n          {footerMessage}\n          <button\n            onClick={testConnection}\n            type=\"button\"\n            className=\"w-full sm:w-max mt-2 sm:my-0 px-4 py-2 sm:mr-4 text-sm font-semibold text-neutral-700 border rounded-md shadow bg-neutral-200 focus:outline-none flex-1 sm:flex-none\"\n          >\n            Test connection\n          </button>\n          <SubmitButton className=\"w-full my-2 sm:my-0 sm:w-max \">\n            {updateMode ? 'Update' : 'Add'}\n          </SubmitButton>\n        </div>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default DeviceModal;\n","import { useState, useEffect } from 'react';\nimport { isFunction } from 'lodash';\n\nimport { Button } from '../../components/tailwind-ui';\nimport {\n  addDevice,\n  updateDevice,\n  deleteDevice,\n  getSavedDevices,\n  testDeviceConnection,\n} from '../../services/broadCastDeviceService';\nimport useNotification from '../../hooks/useNotification';\nimport DevicesList from './DevicesList';\nimport DeviceModal from './DeviceModal';\n\nconst BroadcastDevices = ({ history, match }) => {\n  const [render, setRender] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [devicesList, setDevicesList] = useState([]);\n  const [onEditValues, setOnEditValues] = useState({});\n  const { addErrorNotification } = useNotification();\n\n  useEffect(() => {\n    // get saved devices from DB\n    getSavedDevices().then((list) => setDevicesList(list));\n  }, [render]);\n\n  const onOpenModal = () => {\n    setOnEditValues({});\n    setIsModalOpen(true);\n  };\n\n  const onCloseModal = () => {\n    setRender(!render); // refresh devices list\n    setIsModalOpen(false); // close modal\n  };\n\n  const onSelectItem = (device, e, callback) => {\n    setTimeout(async () => {\n      testDeviceConnection(device)\n        .then(() => {\n          isFunction(callback) && callback();\n          history.push(match.url + '/device/' + device._id);\n        })\n        .catch((err) => {\n          addErrorNotification(e.name, e.message);\n          isFunction(callback) && callback();\n        });\n    }, 500);\n  };\n\n  const onEditItem = (device, e) => {\n    e.stopPropagation();\n    setOnEditValues(device);\n    setIsModalOpen(true);\n  };\n\n  const onDeleteItem = (device, e) => {\n    e.stopPropagation();\n    deleteDevice(device._id)\n      .then(() => setRender(!render))\n      .catch((e) => addErrorNotification(e.name, e.message));\n  };\n\n  return (\n    <div className=\"p-8\">\n      <h2 className=\"text-3xl font-semibold mb-10\">Broadcast devices</h2>\n      <div className=\"w-full flex justify-end mb-4\">\n        <Button onClick={onOpenModal}>Add device</Button>\n      </div>\n      <div>\n        <div className=\"w-full my-2 flex flex-row items-center \">\n          <h3 className=\"w-max ml-2 mr-4 text-neutral-600 text-sm whitespace-nowrap \">\n            Available devices\n          </h3>\n          <div className=\"w-full border-t border-neutral-300\" />\n        </div>\n        <DevicesList\n          data={devicesList}\n          onSelect={onSelectItem}\n          onEdit={onEditItem}\n          onDelete={onDeleteItem}\n        />\n      </div>\n\n      <DeviceModal\n        isOpen={isModalOpen}\n        onClose={onCloseModal}\n        initialValues={onEditValues}\n        onSave={addDevice}\n        onUpdate={updateDevice}\n      ></DeviceModal>\n    </div>\n  );\n};\n\nexport default BroadcastDevices;\n"],"sourceRoot":""}