{"version":3,"sources":["hooks/useNotification.js","services/localDeviceService.js","pages/LocalDevices/SelectDeviceComponent.jsx","components/DividerCustom.jsx","pages/LocalDevices/ValueCard.jsx","pages/LocalDevices/GeneralTab.jsx","pages/LocalDevices/HistoryTab.jsx","pages/LocalDevices/ConfigTab.jsx","pages/LocalDevices/index.jsx","services/devicesOptions.js"],"names":["useNotification","notificationContext","useNotificationCenter","addNotification","title","message","textColor","Icon","timeout","className","clsx","content","icon","addErrorNotification","SvgSolidExclamation","addWarningNotification","addInfoNotification","SvgOutlineExclamationCircle","devicesManager","DevicesManager","navigator","serial","requestDevices","a","getConnectedDevices","updateDevices","getDevicesList","ready","connectedDevices","continuousUpdateDevices","callback","scanInterval","interval","setInterval","isFunction","sendCommand","deviceId","command","typeOptions","DEVICE_KINDS","map","type","label","SelectDeviceComponent","device","deviceType","filter","o","onSelectDevice","onSelectType","useState","devices","setDevices","useEffect","updateConnectedDevices","cleanUp","newList","handleDevicesListChange","then","intervalId","clearInterval","length","id","renderOptions","onRequest","document","activeElement","blur","list","options","onSelect","onClick","DividerCustom","justify","ValueCard","value","unit","placeholder","editable","onChange","name","event","target","GeneralTab","data","onSendCommand","resultMsg","console","log","COMMANDS","runExpirement","kinetic","epoch","parametersArray","param","index","factor","HistoryTab","headers","setHeaders","heads","h","Row","useCallback","val","classnames","compact","p","headerValues","useTable","itemsPerPage","withText","pagination","sliceData","d","Header","Tr","intervals","v","ConfigTab","refreshInterval","setRefreshInterval","writableParams","setWritableParams","_refreshInterval","_setRefreshInterval","render","setRender","showSpinner","setShowSpinner","parameters","values","Object","keys","key","writable","reRender","setTimeout","onReset","reset","onSleep","sleep","onSave","saved","edited","setParameter","option","variant","description","newValue","newValues","onValueChanged","tabs","LocalDevices","selectedDevice","setSelectedDevice","selectedType","setSelectedType","selectedTab","setSelectedTab","currentData","setCurrentData","allData","setAlltData","getData","compactSettings","compressedResults","results","parseCurrentSettings","kind","parameterInfo","newDevice","selected","tab","renderTabContent","DEVICES_DB","DEFAULT_PORT","DEFAULT_PROTOCOL","DEVICE_PROTOCOLS","legoinoDeviceInformation"],"mappings":"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","file":"static/js/8.2096e80c.chunk.js","sourcesContent":["import clsx from 'clsx';\nimport {\n  SvgOutlineExclamationCircle,\n  SvgSolidExclamation,\n  useNotificationCenter,\n} from '../components/tailwind-ui';\n\nexport default function useNotification() {\n  const notificationContext = useNotificationCenter();\n\n  const addNotification = (title, message, { textColor, Icon, timeout }) => {\n    notificationContext.addNotification(\n      {\n        title: (\n          <span className={clsx('text-base font-semibold', textColor + '500')}>\n            {title}\n          </span>\n        ),\n        content: <span className=\"text-sm text-neutral-500\">{message}</span>,\n        icon: <Icon className={clsx('w-8 h-8', textColor + '600')} />,\n      },\n      timeout,\n    );\n  };\n\n  const addInfoNotification = (title, message) => {\n    addNotification(title, message, {\n      textColor: 'text-primary-',\n      Icon: SvgOutlineExclamationCircle,\n      timeout: 1000,\n    });\n  };\n\n  const addWarningNotification = (title, message) => {\n    addNotification(title, message, {\n      textColor: 'text-warning-',\n      Icon: SvgSolidExclamation,\n      timeout: 2500,\n    });\n  };\n\n  const addErrorNotification = (title, message) => {\n    addNotification(title, message, {\n      textColor: 'text-danger-',\n      Icon: SvgSolidExclamation,\n      timeout: 5000,\n    });\n  };\n\n  return { addErrorNotification, addWarningNotification, addInfoNotification };\n}\n","import { isFunction } from 'lodash';\nimport { DevicesManager } from 'legoino-navigator-serial';\n\nconst SCAN_INTERVAL = 3000;\n\nconst devicesManager = new DevicesManager(navigator.serial);\n\n/**\n * By calling this method from a click you give users the possibility to allow access to some devices\n */\nconst requestDevices = async () => {\n  await devicesManager.requestDevices();\n};\n\n/**\n * @returns {Array<object>}\n */\nconst getConnectedDevices = async () => {\n  await devicesManager.updateDevices();\n  const connectedDevices = await devicesManager.getDevicesList({\n    ready: true, // If ready==`true` returns only currently connected device, else returns all devices ever connected.\n  });\n  return connectedDevices;\n};\n\n/**\n * Update updated devices list every `scanInterval` [ms].\n * @param {Function} callback(devicesList): Callback to execute on each update\n * @param {number} scanInterval Delay between calls\n */\nconst continuousUpdateDevices = async (\n  callback,\n  scanInterval = SCAN_INTERVAL,\n) => {\n  const interval = setInterval(async () => {\n    const connectedDevices = await getConnectedDevices();\n    isFunction(callback) && callback(connectedDevices);\n  }, scanInterval);\n  return interval;\n};\n\n/**\n * Send a serial command to a device.\n * @param {number} id ID of the device\n * @param {string} command Command to send\n * @returns ??????\n */\nconst sendCommand = async (deviceId, command) => {\n  return await devicesManager.sendCommand(deviceId, command);\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  requestDevices,\n  getConnectedDevices,\n  continuousUpdateDevices,\n  sendCommand,\n};\n","import { useEffect, useState } from 'react';\n\nimport devicesManager from '../../services/localDeviceService';\nimport { DEVICE_KINDS } from '../../services/devicesOptions';\nimport { Dropdown, Button } from '../../components/tailwind-ui';\nimport useNotification from '../../hooks/useNotification';\n\nconst typeOptions = DEVICE_KINDS.map((type) => ({\n  label: type,\n  type: 'option',\n}));\n\nconst SelectDeviceComponent = ({\n  device = { label: '--' },\n  deviceType = typeOptions.filter((o) => o.label === 'SimpleSpectro')[0],\n  onSelectDevice,\n  onSelectType,\n}) => {\n  const { addInfoNotification, addWarningNotification } = useNotification();\n  const [devices, setDevices] = useState([]);\n\n  useEffect(() => {\n    onSelectType(deviceType);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // continuous update of devices list\n  useEffect(() => {\n    updateConnectedDevices();\n    const cleanUp = devicesManager.continuousUpdateDevices((newList) => {\n      handleDevicesListChange(newList);\n    });\n    return () => cleanUp.then((intervalId) => clearInterval(intervalId));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [devices.length]);\n\n  const updateConnectedDevices = async () => {\n    const newList = await devicesManager.getConnectedDevices();\n    if (newList.length > 0) {\n      if (!device?.id) onSelectDevice(renderOptions(newList)[0]);\n      setDevices(newList);\n    }\n  };\n\n  // When connected devices are changed : show notification + set selected + set devicesList\n  const handleDevicesListChange = (newList) => {\n    if (newList.length > devices.length) {\n      addInfoNotification('New device connected');\n      if (!device?.id) onSelectDevice(renderOptions(newList)[0]);\n    } else if (newList.length < devices.length) {\n      addWarningNotification('Device disconnected');\n      if (newList.length === 0) onSelectDevice({ label: '--' });\n    }\n    setDevices(newList);\n  };\n\n  const onRequest = async () => {\n    document.activeElement.blur();\n    await devicesManager.requestDevices();\n    const newList = await devicesManager.getConnectedDevices();\n    handleDevicesListChange(newList);\n  };\n\n  const renderOptions = (list) =>\n    list.map((device) => ({\n      id: device.id,\n      label: 'Device-' + device.id,\n      type: 'option',\n    }));\n\n  return (\n    <div className=\"m-4 py-3 px-4 flex flex-col-reverse sm:flex-row sm:justify-between sm:items-center rounded-md bg-white shadow \">\n      <div className=\"flex flex-row flex-wrap justify-between\">\n        <div className=\"my-1 mx-2 w-full sm:w-max flex items-center justify-end flex-nowrap\">\n          <h3 className=\"mr-2 text-base font-medium text-neutral-800 \">\n            Device Type :\n          </h3>\n          <Dropdown\n            title={deviceType.label}\n            options={[typeOptions]}\n            onSelect={onSelectType}\n          />\n        </div>\n        <div className=\"my-1 mx-2 w-full sm:w-max flex items-center justify-end flex-nowrap\">\n          <h3 className=\"mr-2 text-base font-medium text-neutral-800\">\n            Select device :\n          </h3>\n          <Dropdown\n            title={device.label}\n            options={[renderOptions(devices)]}\n            onSelect={onSelectDevice}\n          />\n        </div>\n      </div>\n      <Button className=\"mb-3 sm:mb-0\" onClick={onRequest}>\n        Request device\n      </Button>\n    </div>\n  );\n};\n\nexport default SelectDeviceComponent;\n","import React from 'react';\nimport { Divider } from './tailwind-ui';\n\nconst DividerCustom = ({ title }) => {\n  return (\n    <div className=\"my-4\">\n      <Divider justify=\"start\">\n        <span className=\"px-2 bg-white text-xs font-medium text-neutral-400\">\n          {title}\n        </span>\n      </Divider>\n    </div>\n  );\n};\n\nexport default DividerCustom;\n","import clsx from 'clsx';\n\nconst ValueCard = ({\n  title,\n  value,\n  unit,\n  placeholder,\n  type = 'text',\n  editable,\n  onChange,\n  className,\n}) => {\n  return (\n    <div className={clsx('flex', className)}>\n      <div className=\"w-full m-1 p-2 flex flex-col justify-between items-center sm:items-start rounded-md bg-white shadow\">\n        <h3 className=\"py-1 text-sm font-medium text-gray-500\">{title}</h3>\n        <div className=\"w-full mt-2 flex flex-row justify-center sm:justify-end items-center\">\n          {editable ? (\n            <input\n              className=\"w-full p-1 bg-neutral-50 border-neutral-200 text-right text-black text-sm font-bold placeholder-neutral-500 placeholder-opacity-30 rounded  focus:outline-none focus:ring-0 leading-none\"\n              id={title}\n              name={title}\n              type={type}\n              placeholder={placeholder}\n              value={value}\n              onChange={(event) => onChange(event.target.value)}\n            />\n          ) : (\n            <p className=\"text-xl font-bold text-black\">{value}</p>\n          )}\n          <p className=\"ml-1 text-sm font-medium text-gray-400\">{unit}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ValueCard;\n","import useNotification from '../../hooks/useNotification';\nimport devicesManager from '../../services/localDeviceService';\nimport { COMMANDS } from './../../services/devicesOptions';\n\nimport DividerCustom from '../../components/DividerCustom';\nimport { Button } from '../../components/tailwind-ui';\nimport ValueCard from './ValueCard';\n\nconst GeneralTab = ({ data, device }) => {\n  const { addInfoNotification, addErrorNotification } = useNotification();\n\n  const onSendCommand = async (command) => {\n    try {\n      const resultMsg = await devicesManager.sendCommand(device.id, command);\n      console.log('runExpirement');\n      console.log(resultMsg);\n      addInfoNotification(resultMsg);\n    } catch (e) {\n      console.log('runExpirement error');\n      console.log(e);\n      addErrorNotification(e);\n    }\n    document.activeElement.blur();\n  };\n\n  return (\n    <div className=\"flex flex-col mt-2\">\n      <div className=\"flex flex-row justify-end\">\n        <Button\n          className=\"mx-2\"\n          onClick={() => onSendCommand(COMMANDS.runExpirement)}\n        >\n          Run experiment\n        </Button>\n        <Button\n          className=\"mx-2\"\n          onClick={() => onSendCommand(COMMANDS.kinetic)}\n        >\n          Run Kinetic\n        </Button>\n      </div>\n      {data?.epoch && (\n        <DividerCustom\n          title={\n            <p className=\" text-base font-medium text-black self-start\">\n              Awake time:\n              <span className=\"mx-1 text-sm text-neutral-500\">\n                {data?.epoch / 1000 + 's'}\n              </span>\n            </p>\n          }\n        />\n      )}\n      <div className=\" flex flex-row justify-around flex-wrap\">\n        {data?.parametersArray?.map((param, index) => (\n          <ValueCard\n            key={index}\n            title={param.name || param.label}\n            value={param.value * param.factor}\n            unit={param.unit}\n            className=\"w-full sm:w-1/2  md:w-1/3 lg:w-1/4 flex\"\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default GeneralTab;\n","import { useCallback, useState, useEffect } from 'react';\nimport { Table, Td, Th, useTable } from '../../components/tailwind-ui';\n\nconst HistoryTab = ({ data, deviceType }) => {\n  const [headers, setHeaders] = useState([]);\n\n  // extract headers from the first element on data (just one time whenever deviceType is changed)\n  useEffect(() => {\n    const heads =\n      data && data.length > 0\n        ? data[0].parametersArray?.map((h) => h.name || h.label)\n        : [];\n    setHeaders(['Epoch', ...heads]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [deviceType]);\n\n  const Row = useCallback((val) => {\n    const classnames = 'text-xs text-center p-2';\n    return (\n      <tr>\n        <Td compact={true} className={classnames + ' font-medium'}>\n          {val.value.epoch}\n        </Td>\n        {val.value.parametersArray?.map((p, index) => (\n          <Td key={index} compact={true} className={classnames}>\n            {p.value}\n          </Td>\n        ))}\n      </tr>\n    );\n  }, []);\n\n  const headerValues = useCallback(() => {\n    return (\n      <tr>\n        {headers?.map((h) => (\n          <Th\n            key={h}\n            className=\"p-2 text-center font-normal normal-case\"\n            compact={true}\n          >\n            {h}\n          </Th>\n        ))}\n      </tr>\n    );\n  }, [headers]);\n\n  const { pagination, data: sliceData } = useTable(data, {\n    itemsPerPage: 10,\n    withText: true,\n  });\n\n  return (\n    <div className=\"w-full p-1 overflow-x-auto\">\n      <Table\n        pagination={pagination}\n        data={sliceData.map((d) => ({ ...d, id: d.epoch }))}\n        Header={headerValues}\n        Tr={Row}\n      />\n    </div>\n  );\n};\n\nexport default HistoryTab;\n","import { useState, useEffect } from 'react';\n\nimport { Button, Spinner, Dropdown } from '../../components/tailwind-ui';\nimport DividerCustom from '../../components/DividerCustom';\nimport useNotification from '../../hooks/useNotification';\nimport devicesManager from '../../services/localDeviceService';\nimport { COMMANDS } from './../../services/devicesOptions';\nimport ValueCard from './ValueCard';\n\nconst intervals = [1, 2, 5, 10, 30, 60, 120, 300].map((v) => ({\n  label: v > 59 ? `${v / 60} m` : `${v} s`,\n  value: v * 1000,\n  type: 'option',\n}));\n\nconst ConfigTab = ({\n  device,\n  data,\n  refreshInterval = 1000,\n  setRefreshInterval,\n}) => {\n  const { addInfoNotification, addErrorNotification } = useNotification();\n  const [writableParams, setWritableParams] = useState([]);\n  const [_refreshInterval, _setRefreshInterval] = useState({\n    label: refreshInterval / 1000 + ' s',\n    value: refreshInterval,\n    type: 'option',\n  });\n  const [render, setRender] = useState(false);\n  const [showSpinner, setShowSpinner] = useState(false);\n\n  useEffect(() => {\n    const parameters = data?.parameters;\n    const values =\n      parameters &&\n      Object.keys(parameters)\n        .filter((key) => parameters[key].writable)\n        .map((key) => ({ ...parameters[key], key }));\n    setWritableParams(values);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [render]);\n\n  const reRender = () => {\n    setTimeout(() => {\n      setRender(!render);\n    }, 1000);\n  };\n\n  const OnRefreshIntervalChanged = (option) => {\n    _setRefreshInterval(option);\n    setRefreshInterval(option.value);\n    document.activeElement.blur();\n  };\n\n  const onReset = async () => {\n    try {\n      const resultMsg = await devicesManager.sendCommand(\n        device.id,\n        COMMANDS.reset,\n      );\n      addInfoNotification(resultMsg);\n      reRender();\n    } catch (e) {\n      addErrorNotification(e.message);\n    }\n    document.activeElement.blur();\n  };\n\n  const onSleep = async () => {\n    try {\n      await devicesManager.sendCommand(device.id, COMMANDS.sleep);\n    } catch (e) {\n      addErrorNotification(e.message);\n    }\n    document.activeElement.blur();\n  };\n\n  const onValueChanged = (label, value) => {\n    const newValues = writableParams.map((v) =>\n      v.label === label ? { ...v, value: value / v.factor, edited: true } : v,\n    );\n    setWritableParams(newValues);\n  };\n\n  const onSave = async () => {\n    setShowSpinner(true);\n    let saved = false;\n    try {\n      for (let v of writableParams) {\n        if (v.edited) {\n          console.log(v.key + v.value);\n          await devicesManager.sendCommand(\n            device.id,\n            COMMANDS.setParameter(v.key, v.value),\n          );\n          saved = true;\n        }\n      }\n      saved\n        ? addInfoNotification('Saved')\n        : addInfoNotification('No changes to save');\n      reRender();\n    } catch (e) {\n      addErrorNotification(e.message);\n    }\n    setShowSpinner(false);\n    document.activeElement.blur();\n  };\n\n  return (\n    <div className=\"w-full flex flex-col \">\n      <div className=\"mt-2 flex flex-col sm:flex-row justify-between\">\n        <div className=\"my-1 mx-2 flex flex-row items-center justify-end\">\n          <p className=\"mx-1 text-sm font-medium text-neutral-700\">\n            Refresh inreval :\n          </p>\n          <Dropdown\n            title={_refreshInterval.label}\n            options={[intervals]}\n            onSelect={OnRefreshIntervalChanged}\n          />\n        </div>\n        <div className=\"my-1 flex flex-row justify-end\">\n          <Button className=\"mx-2\" variant=\"white\" onClick={onSleep}>\n            Sleep\n          </Button>\n          <Button className=\"mx-2 \" variant=\"white\" onClick={onReset}>\n            Reset Device\n          </Button>\n        </div>\n      </div>\n\n      {writableParams?.length > 0 && (\n        <>\n          <DividerCustom title=\"Edit parameters\" />\n          <div className=\"flex flex-row justify-start flex-wrap\">\n            {writableParams.map((p, index) => (\n              <ValueCard\n                key={index}\n                title={p.name || p.label}\n                value={p.value * p.factor}\n                placeholder={p.description}\n                unit={p.unit}\n                editable={true}\n                onChange={(newValue) => onValueChanged(p.label, newValue)}\n                className=\"w-full sm:w-1/2  md:w-1/3 lg:w-1/4 flex\"\n              />\n            ))}\n          </div>\n\n          <Button\n            className=\"mx-2 mt-2 flex self-end\"\n            variant=\"white\"\n            onClick={onSave}\n          >\n            {showSpinner && (\n              <Spinner className=\"text-primary-600 w-5 mr-2\"></Spinner>\n            )}\n            Save\n          </Button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ConfigTab;\n","import { useState, useEffect, useCallback } from 'react';\nimport { parseCurrentSettings } from 'legoino-util';\n\nimport { HorizontalNavigation } from '../../components/tailwind-ui';\nimport useNotification from '../../hooks/useNotification';\nimport devicesManager from '../../services/localDeviceService';\nimport { COMMANDS } from './../../services/devicesOptions';\nimport SelectDeviceComponent from './SelectDeviceComponent';\nimport GeneralTab from './GeneralTab';\nimport HistoryTab from './HistoryTab';\nimport ConfigTab from './ConfigTab';\n\nconst tabs = ['General', 'History', 'Configuration'].map((v) => ({\n  value: v,\n  label: v,\n}));\n\nconst LocalDevices = () => {\n  const [selectedDevice, setSelectedDevice] = useState();\n  const [selectedType, setSelectedType] = useState();\n  const [selectedTab, setSelectedTab] = useState(tabs[0]);\n  const [currentData, setCurrentData] = useState({});\n  const [allData, setAlltData] = useState([]);\n  const [refreshInterval, setRefreshInterval] = useState(10000);\n  const { addErrorNotification } = useNotification();\n\n  const getData = useCallback(\n    async (deviceId) => {\n      if (deviceId) {\n        try {\n          const compressedResults = await devicesManager.sendCommand(\n            deviceId,\n            COMMANDS.compactSettings,\n          );\n          const results = parseCurrentSettings(compressedResults, {\n            kind: selectedType?.label, // parameterLabel: true,\n            parameterInfo: true,\n            parametersArray: true,\n          });\n\n          setCurrentData(results);\n          const d = [results, ...allData];\n          console.log(d);\n          setAlltData(d);\n        } catch (e) {\n          addErrorNotification(e.message);\n        }\n      } else {\n        setCurrentData({});\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [allData, selectedType?.label, selectedDevice?.id],\n  );\n\n  useEffect(() => {\n    if (selectedDevice?.id) {\n      const timeout = setInterval(\n        () => getData(selectedDevice?.id),\n        refreshInterval,\n      );\n      return () => {\n        clearInterval(timeout);\n      };\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [refreshInterval, getData]);\n\n  // if selectedType or selectedDevice: delete HistoryData + get the new data\n  useEffect(() => {\n    setAlltData([]);\n    getData(selectedDevice?.id);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedType?.label, selectedDevice?.id]);\n\n  const renderTabContent = (tab) => {\n    switch (tab.value) {\n      case 'General':\n        return <GeneralTab data={currentData} device={selectedDevice} />;\n      case 'History':\n        return <HistoryTab data={allData} deviceType={selectedType?.label} />;\n      case 'Configuration':\n        return (\n          <ConfigTab\n            device={selectedDevice}\n            data={currentData}\n            refreshInterval={refreshInterval}\n            setRefreshInterval={setRefreshInterval}\n          />\n        );\n      default:\n        return <div />;\n    }\n  };\n\n  return (\n    <>\n      <SelectDeviceComponent\n        deviceType={selectedType}\n        onSelectType={setSelectedType}\n        device={selectedDevice}\n        onSelectDevice={(newDevice) => {\n          setSelectedDevice(newDevice);\n          getData(newDevice?.id);\n        }}\n      />\n      {selectedDevice?.id ? (\n        <div className=\"mx-4 pb-4\">\n          <HorizontalNavigation\n            onSelect={setSelectedTab}\n            selected={selectedTab}\n            options={tabs}\n          />\n          <div className=\"p-3 mt-4 sm:m-0 flex flex-col items-center rounded-md sm:rounded-t-none bg-white shadow \">\n            {renderTabContent(selectedTab)}\n          </div>\n        </div>\n      ) : (\n        <div className=\"mx-5 mt-16 flex flex-col items-center\">\n          <h3 className=\"text-base font-bold text-gray-300 leading-loose\">\n            No connected Device\n          </h3>\n          <h3 className=\"text-sm font-base text-gray-300\">\n            Please plug your device into the computer\n          </h3>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default LocalDevices;\n","import legoinoDeviceInformation from 'legoino-device-information';\n\n// Default Values\n\nexport const DEVICES_DB = 'BIOREACTOR_devices';\nexport const DEFAULT_PORT = '9001';\nexport const DEFAULT_PROTOCOL = 'tcp';\n\n// Static Values\n\nexport const DEVICE_TYPE = {\n  broadcast: 'broadcast',\n  interactive: 'interactive',\n  local: 'local',\n};\n\nexport const DEVICE_PROTOCOLS = ['tcp', 'http','wss'];\n\nexport const DEVICE_KINDS = Object.keys(legoinoDeviceInformation).map(\n  (key) => legoinoDeviceInformation[key].kind,\n);\n\nexport const DEVICE_STATUS = {\n  opening: 1,\n  opened: 2,\n  closed: 3,\n  missing: 9,\n  error: 10,\n};\n\nexport const COMMANDS = {\n  compactSettings: 'uc',\n  runExpirement: 'r',\n  kinetic: 'k',\n  reset: 'ur1234',\n  sleep: 'l',\n  setParameter: (label, value) => `${label}${value}`,\n};\n"],"sourceRoot":""}