{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/delay/index.js","../node_modules/legoino-navigator-serial/src/Action.js","../node_modules/legoino-navigator-serial/src/Device.js","../node_modules/legoino-navigator-serial/src/util/checkSerial.js","../node_modules/legoino-navigator-serial/src/DevicesManager.js","../node_modules/legoino-navigator-serial/src/util/EventEmitter.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","createAbortError","error","Error","name","createDelay","defaultClear","clearTimeout","set","setTimeout","willResolve","ms","timeoutId","settle","rejectFn","signal","aborted","Promise","reject","clear","signalListener","cleanup","removeEventListener","delayPromise","resolve","addEventListener","once","delay","range","minimum","maximum","options","Math","floor","random","randomInteger","createWithTimers","module","exports","default","Action","command","this","currentTimeout","undefined","timeout","answer","status","creationTimestamp","Date","now","promise","finishedPromise","finished","startTimestamp","buffer","string","TextDecoder","decode","replace","endsWith","lines","split","filter","line","join","Device","serialPort","id","baudRate","queue","action","interCommandDelay","defaultCommandExpirationDelay","encoder","TextEncoder","decoder","a","currentProcessQueue","runProcessQueue","shift","start","write","read","open","reader","readable","getReader","writer","writable","getWriter","get","commandExpirationDelay","push","ensureProcessQueue","port","path","emit","event","data","dataArrayBuffer","encode","isFinished","appendAnswer","checkSerial","serial","console","DevicesManager","devices","portFilter","usbProductId","usbVendorId","requestPort","filters","updateDevices","getPorts","serialPorts","missingDevicesSerialPort","device","includes","close","ensureOpen","newDevice","scanInterval","callback","ready","isReady","map","queueLength","findDevice","callbacks","cb","cbs","forEach"],"mappings":"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","file":"static/js/9.6b41a9d0.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","'use strict';\n\n// From https://github.com/sindresorhus/random-int/blob/c37741b56f76b9160b0b63dae4e9c64875128146/index.js#L13-L15\nconst randomInteger = (minimum, maximum) => Math.floor((Math.random() * (maximum - minimum + 1)) + minimum);\n\nconst createAbortError = () => {\n\tconst error = new Error('Delay aborted');\n\terror.name = 'AbortError';\n\treturn error;\n};\n\nconst createDelay = ({clearTimeout: defaultClear, setTimeout: set, willResolve}) => (ms, {value, signal} = {}) => {\n\tif (signal && signal.aborted) {\n\t\treturn Promise.reject(createAbortError());\n\t}\n\n\tlet timeoutId;\n\tlet settle;\n\tlet rejectFn;\n\tconst clear = defaultClear || clearTimeout;\n\n\tconst signalListener = () => {\n\t\tclear(timeoutId);\n\t\trejectFn(createAbortError());\n\t};\n\n\tconst cleanup = () => {\n\t\tif (signal) {\n\t\t\tsignal.removeEventListener('abort', signalListener);\n\t\t}\n\t};\n\n\tconst delayPromise = new Promise((resolve, reject) => {\n\t\tsettle = () => {\n\t\t\tcleanup();\n\t\t\tif (willResolve) {\n\t\t\t\tresolve(value);\n\t\t\t} else {\n\t\t\t\treject(value);\n\t\t\t}\n\t\t};\n\n\t\trejectFn = reject;\n\t\ttimeoutId = (set || setTimeout)(settle, ms);\n\t});\n\n\tif (signal) {\n\t\tsignal.addEventListener('abort', signalListener, {once: true});\n\t}\n\n\tdelayPromise.clear = () => {\n\t\tclear(timeoutId);\n\t\ttimeoutId = null;\n\t\tsettle();\n\t};\n\n\treturn delayPromise;\n};\n\nconst delay = createDelay({willResolve: true});\ndelay.reject = createDelay({willResolve: false});\ndelay.range = (minimum, maximum, options) => delay(randomInteger(minimum, maximum), options);\ndelay.createWithTimers = ({clearTimeout, setTimeout}) => {\n\tconst delay = createDelay({clearTimeout, setTimeout, willResolve: true});\n\tdelay.reject = createDelay({clearTimeout, setTimeout, willResolve: false});\n\treturn delay;\n};\n\nmodule.exports = delay;\n// TODO: Remove this for the next major release\nmodule.exports.default = delay;\n","const STATUS_CREATED = 0;\nconst STATUS_COMMAND_SENT = 1;\nconst STATUS_ANSWER_PARTIALLY_RECEIVED = 2;\nconst STATUS_ANSWER_RECEIVED = 3;\nconst STATUS_RESOLVED = 4;\nconst STATUS_ERROR = 5;\n\nexport class Action {\n  constructor(command, options = {}) {\n    this.currentTimeout = undefined;\n    this.command = command;\n    this.timeout = options.timeout === undefined ? 1000 : options.timeout;\n    this.answer = '';\n    this.status = STATUS_CREATED;\n    this.creationTimestamp = Date.now();\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n    this.finishedPromise = new Promise((resolve) => {\n      this.finished = resolve;\n    });\n  }\n\n  isFinished() {\n    return this.status === STATUS_RESOLVED || this.status === STATUS_ERROR;\n  }\n\n  setTimeout() {\n    if (this.currentTimeout) {\n      clearTimeout(this.currentTimeout);\n    }\n    this.currentTimeout = setTimeout(() => {\n      if (this.status === STATUS_RESOLVED || this.status === STATUS_ERROR) {\n        return;\n      }\n      this.status = STATUS_ERROR;\n      this.reject('Timeout');\n      this.finished();\n    }, this.timeout);\n  }\n\n  start() {\n    this.startTimestamp = Date.now();\n    this.status = STATUS_COMMAND_SENT;\n    this.setTimeout();\n  }\n\n  appendAnswer(buffer) {\n    let string = new TextDecoder().decode(buffer);\n    this.status = STATUS_ANSWER_PARTIALLY_RECEIVED;\n    this.answer += string;\n    if (!this.answer.replace(/\\r/g, '').endsWith('\\n\\n')) return;\n    let lines = this.answer.split(/\\r?\\n/);\n    if (lines.length > 0 && lines[lines.length - 1] === '') {\n      lines = lines.filter((line) => line);\n      this.status = STATUS_ANSWER_RECEIVED;\n      this.resolve(lines.join('\\n'));\n      this.finished();\n      this.status = STATUS_RESOLVED;\n    }\n  }\n}\n","/* eslint-disable no-await-in-loop */\n\nimport delay from 'delay';\n\nimport { Action } from './Action';\n\nconst debug = () => {};\n\nexport const STATUS_OPENING = 1;\nexport const STATUS_OPENED = 2;\nexport const STATUS_CLOSED = 3;\nexport const STATUS_MISSING = 9;\nexport const STATUS_ERROR = 10;\n\nexport class Device {\n  constructor(serialPort, options = {}) {\n    this.status = STATUS_OPENING;\n    this.id = undefined;\n    this.serialPort = serialPort;\n    this.baudRate = options.baudRate || 115200;\n    this.queue = [];\n    this.action = undefined;\n    this.interCommandDelay = options.interCommandDelay;\n    this.defaultCommandExpirationDelay = 2000;\n    this.encoder = new TextEncoder();\n    this.decoder = new TextDecoder();\n  }\n\n  isReady() {\n    return this.status === STATUS_OPENED;\n  }\n\n  /** restart process queue if the previous one was finished */\n  async ensureProcessQueue() {\n    debug('ensureProcessQueue');\n    if (!this.currentProcessQueue) {\n      this.currentProcessQueue = this.runProcessQueue();\n    }\n    return this.currentProcessQueue;\n  }\n\n  async runProcessQueue() {\n    while (this.queue.length > 0) {\n      this.action = this.queue.shift();\n\n      if (this.action) {\n        this.action.start();\n        await this.write(`${this.action.command}\\n`);\n        await this.read(this.action);\n        await this.action.finishedPromise;\n        this.action = undefined;\n        await delay(this.interCommandDelay);\n      }\n    }\n    this.currentProcessQueue = undefined;\n  }\n\n  async getStatus() {\n    return {\n      value: this.status,\n    };\n  }\n\n  async ensureOpen() {\n    debug(`Ensure open`);\n    if (this.status !== STATUS_OPENED) {\n      return this.open();\n    }\n  }\n\n  async open() {\n    debug(`Opening`);\n    await this.serialPort.open({\n      baudRate: this.baudRate,\n    });\n    this.reader = this.serialPort.readable.getReader();\n    this.writer = this.serialPort.writable.getWriter();\n    this.id = await this.get('uq');\n    this.status = STATUS_OPENED;\n  }\n\n  /*\n   We need to add this command in the queue and wait it resolves or rejects\n  */\n  async get(command, options = {}) {\n    const {\n      commandExpirationDelay = this.defaultCommandExpirationDelay,\n    } = options;\n\n    const action = new Action(command, {\n      timeout: commandExpirationDelay,\n    });\n\n    this.queue.push(action);\n    this.ensureProcessQueue();\n    return action.promise;\n  }\n\n  error(error) {\n    debug(`Error ${this.port.path}`);\n    debug(error);\n    this.status = STATUS_ERROR;\n    this.emit('adapter', {\n      event: 'Error',\n      value: error,\n    });\n  }\n\n  close() {\n    debug(`Close`);\n    this.status = STATUS_CLOSED;\n  }\n\n  async write(data) {\n    const dataArrayBuffer = this.encoder.encode(`${data}\\n`);\n    return this.writer.write(dataArrayBuffer);\n  }\n\n  async read(action) {\n    while (!action.isFinished()) {\n      action.appendAnswer((await this.reader.read()).value);\n      delay(10);\n    }\n  }\n}\n","/* eslint-disable no-console */\nexport default function checkSerial(serial) {\n  if (!serial) {\n    console.error(\n      \"Web serial doesn't seem to be enabled in your browser. Try enabling it by visiting:\",\n    );\n    console.error('chrome://flags/#enable-experimental-web-platform-features');\n    console.error('opera://flags/#enable-experimental-web-platform-features');\n    console.error('edge://flags/#enable-experimental-web-platform-features');\n  }\n}\n","/* eslint-disable no-await-in-loop */\nimport delay from 'delay';\n\nimport { Device, STATUS_MISSING, STATUS_OPENED, STATUS_CLOSED } from './Device';\nimport EventEmitter from './util/EventEmitter';\nimport checkSerial from './util/checkSerial';\n\nconst debug = () => {};\n\n/**\n * Class creating a new serial bridge to manage serial ports.\n * @param {object} [options={}]\n * @param {function} [options.portFilter=[{usbProductId:37384, usbVendorId:6991}]] Filter the serial ports to address.\n * @param {number} [options.baudRate=57200] Baud rate\n * @param {number} [options.interCommandDelay=100] Time to wait between commands in [ms]\n * @param {number} [options.defaultCommandExpirationDelay=100] Time to wait for answer before timeout\n */\nexport class DevicesManager extends EventEmitter {\n  constructor(serial, options = {}) {\n    super();\n    checkSerial(serial);\n    this.serial = serial;\n    this.devices = [];\n    this.portFilter =\n      options.portFilter === undefined\n        ? [{ usbProductId: 37384, usbVendorId: 6991 }]\n        : options.portFilter;\n    this.baudRate = options.baudRate || 115200;\n    this.interCommandDelay =\n      options.interCommandDelay === undefined ? 100 : options.interCommandDelay;\n    this.defaultCommandExpirationDelay =\n      options.defaultCommandExpirationDelay === undefined\n        ? 100\n        : options.defaultCommandExpirationDelay;\n  }\n\n  /**\n   * By calling this method from a click you give users the possibility to allow access to some devices\n   */\n  async requestDevices() {\n    await this.serial.requestPort({\n      filters: this.portFilter,\n    });\n    return this.updateDevices();\n  }\n\n  /**\n   * Update this.devices\n   */\n  async updateDevices() {\n    const serialPorts = await this.serial.getPorts();\n\n    debug('updateDevices');\n\n    const missingDevicesSerialPort = this.devices.filter(\n      (device) => !serialPorts.includes(device.serialPort),\n    );\n    for (let device of missingDevicesSerialPort) {\n      if (device.status !== STATUS_MISSING && device.status !== STATUS_CLOSED) {\n        device.close();\n      }\n      device.status = STATUS_MISSING;\n    }\n\n    for (let serialPort of serialPorts) {\n      let device = this.devices.filter(\n        (device) => device.serialPort === serialPort,\n      )[0];\n      if (device) {\n        await device.ensureOpen();\n      } else {\n        let newDevice = new Device(serialPort, {\n          baudRate: this.baudRate,\n          interCommandDelay: this.interCommandDelay,\n          defaultCommandExpirationDelay: this.defaultCommandExpirationDelay,\n        });\n        this.devices.push(newDevice);\n        await newDevice.open();\n      }\n    }\n    // check if there are any new ports\n  }\n\n  /**\n   * Update this.devices every `scanInterval` [ms].\n   * @param {object} [options={}]\n   * @param {number} [options.scanInterval=1000] Delay between `updateDevices()` calls\n   * @param {number} [options.callback] Callback to execute on each update\n   */\n  async continuousUpdateDevices(options = {}) {\n    const { scanInterval = 1000, callback } = options;\n    while (true) {\n      await this.updateDevices();\n      if (callback) {\n        callback(this.devices);\n      }\n      await delay(scanInterval);\n    }\n  }\n\n  /**\n   * Returns this.devices\n   * @param {object} [options={}]\n   * @param {bool} [options.ready=false] If `true` returns only currently connected device. If `false` returns all devices ever connected.\n   * @returns {Array<object>}\n   */\n  getDevicesList(options = {}) {\n    let { ready = false } = options;\n    return this.devices\n      .filter((device) => !ready || device.isReady())\n      .map((device) => ({\n        status: device.status,\n        id: device.id,\n        queueLength: device.queue.length,\n      }));\n  }\n\n  // private function\n  findDevice(id) {\n    if (id === undefined) return undefined;\n    let devices = this.devices.filter(\n      (device) => device.id === id && device.status === STATUS_OPENED,\n    );\n    if (devices.length === 0) return undefined;\n    if (devices.length > 1) {\n      throw new Error(`Many devices have the same id: ${id}`);\n    }\n    return devices[0];\n  }\n\n  /**\n   * Send a serial command to a device.\n   * @param {number} id ID of the device\n   * @param {string} command Command to send\n   */\n  async sendCommand(id, command) {\n    const device = this.findDevice(id);\n    if (!device) {\n      throw Error(`Device ${id} not found`);\n    }\n    if (device && device.isReady()) return device.get(command);\n    throw Error(`Device ${id} not ready: ${device.port.path}`);\n  }\n}\n","export default class EventEmitter {\n  constructor() {\n    this.callbacks = {};\n  }\n\n  on(event, cb) {\n    if (!this.callbacks[event]) this.callbacks[event] = [];\n    this.callbacks[event].push(cb);\n  }\n\n  emit(event, data) {\n    let cbs = this.callbacks[event];\n    if (cbs) {\n      cbs.forEach((cb) => cb(data));\n    }\n  }\n}\n"],"sourceRoot":""}