{"version":3,"file":"static/js/610.6d188a38.chunk.js","mappings":"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","sources":["pages/BroadcastDevices/DeviceModal.jsx","services/mqttService.js","services/broadCastDeviceService.js","services/db.js","services/devicesOptions.js","services/devicesService.js"],"sourcesContent":["import { useRef, useState, useEffect } from 'react';\nimport * as Yup from 'yup';\nimport { isEmpty } from 'lodash';\nimport {\n  Form,\n  InputField,\n  Modal,\n  SvgOutlinePlus,\n  FormError,\n  SubmitButton,\n  SvgOutlineUser,\n  SvgOutlineKey,\n  SvgOutlineLink,\n  SvgOutlineX,\n  SelectField,\n  Spinner,\n  SvgOutlineCheck,\n} from '../../components/tailwind-ui';\n\nimport { testDeviceConnection } from '../../services/broadCastDeviceService';\nimport {\n  DEFAULT_PORT,\n  DEFAULT_PROTOCOL,\n  DEVICE_KINDS,\n  DEVICE_PROTOCOLS,\n} from '../../services/devicesOptions';\n\n//\n// Pre-defined variables\nconst protocolOptions = DEVICE_PROTOCOLS.map((val) => {\n  return { label: val.toUpperCase(), value: val };\n});\nconst kindOptions = DEVICE_KINDS.map((option) => {\n  return { ...option, label: option.name, value: option.kind };\n});\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .max(50, 'Name too Long!')\n    .matches(\n      /^[A-z0-9_-]*$/,\n      'Field supports only : letters / numbers / _ / - ',\n    )\n    .required('Required'),\n  url: Yup.string().required('Required'),\n  port: Yup.number().positive().integer(),\n  protocol: Yup.string(),\n  kind: Yup.string().required('Required'),\n  topic: Yup.string().required('Required'),\n  username: Yup.string().required('Required'),\n});\n//\n\nconst DeviceModal = ({ isOpen, onClose, onSave, onUpdate, initialValues }) => {\n  const updateMode = !isEmpty(initialValues); // if initialValues defined : updates the recode; else: add the record\n  const [footerMessage, setFooterMessage] = useState(<div />);\n  const formRef = useRef(null); // Ref the Form\n\n  const _initialValues = updateMode\n    ? {\n        ...initialValues,\n        kind: initialValues.kind.kind,\n      }\n    : {\n        name: 'Computer_01',\n        url: 'mqtt.hackuarium.org',\n        protocol: protocolOptions.filter((v) => v.value === DEFAULT_PROTOCOL)[0]\n          .value,\n        port: DEFAULT_PORT,\n        kind: 'Computer',\n        topic: 'lpatiny/Computer/server',\n        username: 'user',\n        password: 'password',\n      };\n\n  useEffect(() => {\n    // clear footer when modal is closed\n    !isOpen && setTimeout(() => setFooterMessage(<div />), 500);\n  }, [isOpen]);\n\n  // events functions\n  const onSubmit = async (values) => {\n    try {\n      const { kind, ...deviceInfo } = values;\n      const _kind = DEVICE_KINDS.filter((k) => k.kind === kind)[0];\n      updateMode\n        ? await onUpdate({ ...deviceInfo, kind: _kind })\n        : await onSave({ ...deviceInfo, kind: _kind });\n      onClose();\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  const testConnection = (e) => {\n    e.stopPropagation();\n    renderFooterMessage('connecting', 'Connecting ...');\n    setTimeout(() => {\n      testDeviceConnection(formRef.current.values)\n        .then(() => {\n          renderFooterMessage('success', 'Connected');\n        })\n        .catch((err) => {\n          renderFooterMessage('error', `Connection Error: ${err.message}`);\n        });\n    }, 500);\n  };\n\n  // helper function for testConnection event\n  const renderFooterMessage = (state, message) => {\n    switch (state) {\n      case 'connecting':\n        setFooterMessage(\n          <div className=\"mx-6 flex flex-row items-center text-sm text-left text-neutral-500\">\n            <Spinner className=\"w-6 h-6 mr-2\" />\n            <span>{message}</span>\n          </div>,\n        );\n        break;\n\n      case 'success':\n        setFooterMessage(\n          <div className=\"mx-4 flex flex-row items-center text-sm text-left text-success-500\">\n            <SvgOutlineCheck className=\"h-6 w-6 mr-4\" />\n            <span>{message}</span>\n          </div>,\n        );\n        break;\n\n      case 'error':\n        setFooterMessage(\n          <div className=\"mx-4 flex flex-row items-center text-sm text-left text-danger-500\">\n            <SvgOutlineX className=\"h-6 w-6 mr-4\" />\n            <span>{message}</span>\n          </div>,\n        );\n        break;\n\n      default:\n        setFooterMessage(<div />);\n        break;\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={onClose}\n      icon={<SvgOutlinePlus />}\n      iconColor=\"neutral\"\n      animated\n      hasCloseButton\n      requestCloseOnBackdrop\n      requestCloseOnEsc\n      fluid\n      wrapperComponent={Form}\n      wrapperProps={{\n        innerRef: formRef,\n        initialValues: _initialValues,\n        validationSchema,\n        onSubmit: onSubmit,\n        className: 'h-full',\n      }}\n    >\n      <Modal.Header>\n        {updateMode ? 'Update Device' : 'Connect New Device'}\n      </Modal.Header>\n      <Modal.Body>\n        <div className=\"p-2 mt-2\">\n          <InputField\n            name=\"name\"\n            id=\"name\"\n            label=\"Custom name\"\n            placeholder=\"Device name\"\n            disabled={updateMode}\n            required\n            className=\"w-full\"\n            inputClassName=\"w-full\"\n          ></InputField>\n          <div className=\"flex flex-col sm:flex-row sm:justify-between mt-4 sm:mt-0 border-t border-neutral sm:border-0\">\n            <InputField\n              name=\"url\"\n              id=\"url\"\n              label=\"URL\"\n              placeholder=\"mqtt.domain.com\"\n              required\n              leadingInlineAddon={<SvgOutlineLink />}\n              className=\"mt-4 sm:mr-4 w-full sm:w-1/2\"\n              inputClassName=\"w-full\"\n            ></InputField>\n            <div className=\"flex flex-row justify-between items-start flex-1\">\n              <SelectField\n                name=\"protocol\"\n                id=\"protocol\"\n                label=\"Protocol\"\n                options={protocolOptions}\n                renderOption={(o) => `${o.label}`}\n                getValue={(o) => o.value}\n                className=\"mt-4 mr-4 w-1/2\"\n                inputClassName=\"w-full\"\n              ></SelectField>\n              <InputField\n                name=\"port\"\n                id=\"port\"\n                label=\"Port\"\n                className=\"mt-4 flex-1\"\n                inputClassName=\"w-full\"\n              ></InputField>\n            </div>\n          </div>\n          <div className=\"flex flex-row justify-between items-start\">\n            <SelectField\n              name=\"kind\"\n              id=\"kind\"\n              label=\"Kind\"\n              options={kindOptions}\n              renderOption={(o) => `${o.label}`}\n              getValue={(o) => o.value}\n              required\n              className=\"mt-4 mr-4 w-1/2 \"\n              inputClassName=\"w-full bg-gray-500\"\n            ></SelectField>\n            <InputField\n              name=\"topic\"\n              id=\"topic\"\n              label=\"Topic\"\n              required\n              className=\"mt-4 flex-1\"\n              inputClassName=\"w-full\"\n            ></InputField>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row sm:justify-between mt-4 sm:mt-0 border-t border-neutral sm:border-0\">\n            <InputField\n              name=\"username\"\n              id=\"username\"\n              label=\"Username\"\n              placeholder=\"Username\"\n              required\n              leadingInlineAddon={<SvgOutlineUser />}\n              className=\"mt-4 w-full sm:mr-4 sm:w-1/2\"\n              inputClassName=\"w-full\"\n            ></InputField>\n            <InputField\n              name=\"password\"\n              id=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              placeholder=\"********\"\n              required\n              leadingInlineAddon={<SvgOutlineKey />}\n              className=\"mt-4 w-full sm:flex-1\"\n              inputClassName=\"w-full\"\n            ></InputField>\n          </div>\n        </div>\n        <FormError />\n      </Modal.Body>\n      <Modal.Footer>\n        <div className=\"flex flex-col sm:flex-row items-center\">\n          {footerMessage}\n          <button\n            onClick={testConnection}\n            type=\"button\"\n            className=\"w-full sm:w-max mt-2 sm:my-0 px-4 py-2 sm:mr-4 text-sm font-semibold text-neutral-700 border rounded-md shadow bg-neutral-200 focus:outline-none flex-1 sm:flex-none\"\n          >\n            Test connection\n          </button>\n          <SubmitButton className=\"w-full my-2 sm:my-0 sm:w-max \">\n            {updateMode ? 'Update' : 'Add'}\n          </SubmitButton>\n        </div>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default DeviceModal;\n","import mqtt from 'mqtt-packet';\nimport { isFunction } from 'lodash';\nimport { parseCurrentSettings } from 'legoino-util';\n\n// Private Functions\n\nconst getClientInstance = (\n  url,\n  protocol,\n  port,\n  username,\n  password,\n  onSuccess,\n  onError,\n) => {\n  const brokerUrl = `${protocol}://${url}:${port}`;\n  const client = mqtt.connect(brokerUrl, {\n    keepalive: 300,\n    reconnectPeriod: 5000,\n  });\n\n  client.on('connect', () => {\n    // console.log(`connected to ${brokerUrl} : ${client.connected}`);\n    isFunction(onSuccess) && onSuccess(client);\n  });\n\n  client.stream.on('error', (err) => {\n    // console.log(err);\n    const error = new Error(`Couldn't connect to BROKER \"${brokerUrl}\"`);\n    error.name = 'Mqtt Error';\n    client.end();\n    isFunction(onError) && onError(error);\n  });\n};\n\nconst parseToJson = (data) => {\n  return parseCurrentSettings(data.toString(), {});\n};\n\n// Public Functions\n\nexport const connect = (url, protocol, port, username, password) => {\n  const clientPromise = new Promise((resolve, reject) => {\n    getClientInstance(\n      url,\n      protocol,\n      port,\n      username,\n      password,\n      (client) => resolve(client),\n      (error) => reject(error),\n    );\n  });\n  return clientPromise;\n};\n\n// TO DO: update function\n\nexport const subscribe = (client, topic, onMessageReceived, onError) => {\n  client.subscribe(topic, { qos: 2 }, (err) => {\n    err\n      ? isFunction(onError) && onError(err)\n      : client.on('message', (topic, payload) => {\n          isFunction(onMessageReceived) &&\n            onMessageReceived(parseToJson(payload));\n        });\n  });\n\n  const unsubscribe = (onError) => client.unsubscribe(topic, {}, onError);\n\n  return unsubscribe;\n};\n\nexport const disconnect = (client, callback) =>\n  client.end(() => {\n    // console.log(`mqtt broker \"${client.options.hostname}\" disconnected`);\n    isFunction(callback) && callback();\n  });\n","import { isFunction } from 'lodash';\nimport DB from './db';\nimport { connect, subscribe, disconnect } from './mqttService';\nimport { DEFAULT_PORT, DEFAULT_PROTOCOL, DEVICE_TYPE } from './devicesOptions';\nimport { concatDeviceId } from './devicesService';\n\nconst SCAN_INTERVAL_CONNECTED_DEVICES = 10000;\n\n// Public Functions\n\n/**\n * return device information to be stored in DB\n */\nexport const broadcastDeviceInfo = (deviceInfo) => {\n  return {\n    ...deviceInfo,\n    _id: concatDeviceId(\n      DEVICE_TYPE.broadcast,\n      deviceInfo.kind?.kind,\n      deviceInfo.name,\n    ),\n    protocol: deviceInfo?.protocol ? deviceInfo?.protocol : DEFAULT_PROTOCOL,\n    port: deviceInfo?.port ? deviceInfo?.port : DEFAULT_PORT,\n  };\n};\n\n//\n// connect to broadcast device & return a client instance with {subscribe, disconnect, getAllData, getLastData}\nexport const connectDevice = ({\n  _id,\n  name,\n  kind,\n  deviceId = _id || `${kind}_${name}`,\n  url,\n  protocol = DEFAULT_PROTOCOL,\n  port = DEFAULT_PORT,\n  topic,\n  username,\n  password,\n}) => {\n  const clientPromise = new Promise(async (resolve, reject) => {\n    try {\n      // await new Promise((resolve) => setTimeout(resolve, 1000));\n      const mqttClient = await connect(url, protocol, port, username, password);\n      const dbClient = DB(deviceId);\n\n      const _subscribe = (onSubscribe, onError) => {\n        const unsubscribe = subscribe(\n          mqttClient,\n          topic,\n          (payload) => {\n            dbClient\n              .put({ _id: `${Date.now()}_${payload.epoch}`, ...payload })\n              .then(() => onSubscribe(payload))\n              .catch(() => {});\n          },\n          onError,\n        );\n        return unsubscribe;\n      };\n\n      const _disconnect = (callback) => disconnect(mqttClient, callback);\n\n      const getAllData = () =>\n        dbClient.getAll().then((res) => res.rows.map((i) => i.doc));\n\n      const getLastData = () =>\n        dbClient\n          .getAll({ descending: true, limit: 1 })\n          .then((res) => res.rows.map((i) => i.doc));\n\n      const getPageData = (skip, limit) =>\n        dbClient\n          .getAll({ descending: true, skip: skip, limit: limit })\n          .then((res) => res.rows.map((i) => i.doc));\n\n      const getAllDataCount = () =>\n        dbClient.getAll().then((res) => res.total_rows);\n\n      resolve({\n        subscribe: _subscribe,\n        disconnect: _disconnect,\n        getAllData,\n        getLastData,\n        getPageData,\n        getAllDataCount,\n      });\n    } catch (e) {\n      // connection error\n      reject(e);\n    }\n  });\n\n  return clientPromise;\n};\n\nexport const testDeviceConnection = ({\n  url,\n  protocol = DEFAULT_PROTOCOL,\n  port = DEFAULT_PORT,\n  topic,\n  username,\n  password,\n}) => {\n  const clientPromise = new Promise(async (resolve, reject) => {\n    try {\n      const mqttClient = await connect(url, protocol, port, username, password);\n      const unsubscribe = subscribe(\n        mqttClient,\n        topic,\n        (payload) => {\n          unsubscribe();\n          disconnect(mqttClient, () => resolve(payload));\n        },\n        reject,\n      );\n    } catch (e) {\n      // connection error\n      reject(e);\n    }\n  });\n\n  return clientPromise;\n};\n\n/**\n *\n * @param {object[]} devicesList\n * @param {function} callback res=> array of Promise results (fulfilled/rejected)\n * @param {integer} scanInterval in ms\n * @returns {object}  to clear interval later on\n */\nexport const continuousListenToDevices = async (\n  devicesList,\n  callback,\n  scanInterval = SCAN_INTERVAL_CONNECTED_DEVICES,\n) => {\n  const testConnection = async () => {\n    const promiseArray = [];\n    devicesList.forEach((device) =>\n      promiseArray.push(\n        testDeviceConnection(device)\n          .then((res) => ({ device, payload: res }))\n          .catch((err) => {\n            err.device = device;\n            throw err;\n          }),\n      ),\n    );\n    isFunction(callback) && callback(await Promise.allSettled(promiseArray));\n  };\n  // execute it every scanInterval\n  testConnection();\n  const interval = setInterval(\n    async () => await testConnection(),\n    scanInterval,\n  );\n\n  return interval;\n};\n","import PouchDB from 'pouchdb';\n\n// Wrap Db interface in case of switching to another Db other than \"PouchDb\"\nlet connectedDBs = {};\n\nconst DB = (dbName) => {\n  const connect = () => {\n    if (!(dbName in connectedDBs)) {\n      connectedDBs[dbName] = new PouchDB(dbName, {\n        revs_limit: 1,\n        auto_compaction: true,\n      });\n    }\n    return connectedDBs[dbName];\n  };\n\n  // DB operations to return\n\n  const getInfo = () =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      db.info()\n        .then((res) => resolve(res))\n        .catch((err) => reject(err));\n    });\n\n  const getAll = async (options) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      db.allDocs({\n        include_docs: true,\n        ...options,\n      })\n        .then((res) => resolve(res))\n        .catch((err) => reject(err));\n    });\n\n  const get = (docId) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      docId\n        ? db\n            .get(docId)\n            .then((res) => resolve(res))\n            .catch((err) => reject(err))\n        : reject(new Error('Doc fetch : docId is required'));\n    });\n\n  const put = (doc) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      !('_id' in doc)\n        ? reject(new Error('Doc create : _id is required in doc'))\n        : db\n            .put(doc)\n            .then((res) => resolve(res))\n            .catch((err) => reject(err));\n    });\n\n  const update = (doc) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      !('_id' in doc)\n        ? reject(new Error('Doc update : _id is required in doc'))\n        : db\n            .get(doc._id)\n            .then((resGet) =>\n              db\n                .put({ ...doc, _rev: resGet._rev })\n                .then((resPut) => resolve(resPut))\n                .catch((errPut) => reject(errPut)),\n            )\n            .catch((err) => reject(err));\n    });\n\n  const remove = (docId) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      docId\n        ? db\n            .get(docId)\n            .then((resGet) =>\n              db\n                .remove({ _id: docId, _rev: resGet._rev })\n                .then((resRm) => resolve(resRm))\n                .catch((errRm) => reject(errRm)),\n            )\n            .catch((err) => reject(err))\n        : reject(new Error('Doc remove : docId is required'));\n    });\n\n  // const removeAll = () => {\n  //   const db = connect();\n  //   return db\n  //     .allDocs()\n  //     .then((result) =>\n  //       Promise.all(result.rows.map((row) => db.remove(row.id, row.value.rev))),\n  //     );\n  // };\n\n  const listenToChanges = (successCallback, errorCallBack, options) => {\n    const db = connect();\n    let unsubscribe = db\n      .changes({\n        since: 'now',\n        live: true,\n        include_docs: true,\n        ...options,\n      })\n      .on('change', successCallback)\n      // .on('complete', successCallback)\n      .on('error', errorCallBack);\n    return unsubscribe;\n  };\n\n  const close = () => {\n    const db = connect();\n    delete connectedDBs[dbName];\n    return db.close();\n  };\n  const destroy = () => {\n    const db = connect();\n    delete connectedDBs[dbName];\n    return db.destroy();\n  };\n\n  return {\n    getInfo,\n    getAll,\n    get,\n    put,\n    update,\n    remove,\n    listenToChanges,\n    close,\n    destroy,\n  };\n};\n\nexport default DB;\n","import legoinoDeviceInformation from 'legoino-device-information';\n\n// Default Values\n\nexport const DEVICES_DB = 'BIOREACTOR-UI_devices';\nexport const DEFAULT_PORT =\n  window.location.protocol === 'https:' ? '443' : '80'; // old '8080'\nexport const DEFAULT_PROTOCOL =\n  window.location.protocol === 'https:' ? 'wss' : 'http'; // old tcp\n\n// Static Values\n\nexport const DEVICE_PROTOCOLS = ['http', 'tcp', 'wss'];\n\nexport const DEVICE_TYPE = {\n  broadcast: 'broadcast',\n  interactive: 'interactive',\n  local: 'local',\n};\n\nexport const COMMANDS = {\n  help: 'h',\n  settings: 'u',\n  compactSettings: 'uc',\n  runExperiment: 'r',\n  kinetic: 'k',\n  reset: 'ur1234',\n  sleep: 'l',\n  setParameter: (label, value) => `${label}${value}`,\n};\n\nexport const DEVICE_KINDS = Object.keys(legoinoDeviceInformation)\n  .filter((key) => legoinoDeviceInformation[key].kind)\n  .map((key) => {\n    const { events, parameters, ...info } = legoinoDeviceInformation[key];\n    return info;\n  });\n\nexport const DEVICE_STATUS = {\n  opening: 1,\n  opened: 2,\n  closed: 3,\n  missing: 9,\n  error: 10,\n};\n","import legoinoDeviceInformation from 'legoino-device-information';\nimport DB from './db';\nimport { DEVICES_DB } from './devicesOptions';\n\n// Private Functions\n\nconst throwDbError = (error, additionalMsg) => {\n  console.log(error);\n  const err = new Error(`${additionalMsg} \\n${error?.message}`);\n  err.name = 'DATABASE_ERROR';\n  throw err;\n};\n\n// Public Functions\n\n/**\n * return device _id\n */\nexport const concatDeviceId = (type, kind, id) => `${type}_${kind}_${id}`;\n\n/**\n * Get device Kind from its ID\n */\nexport const getDeviceKind = (deviceId) => {\n  try {\n    if (deviceId) {\n      const selectedDeviceKind = legoinoDeviceInformation.fromDeviceID(\n        Number(deviceId),\n      );\n      return selectedDeviceKind;\n    }\n  } catch (e) {\n    console.log(e);\n    return undefined;\n  }\n};\n\n/**\n * map parameters based on kind\n */\nexport const mapParameters = (kind, params) =>\n  kind && params\n    ? legoinoDeviceInformation[kind]?.parameters?.map((p) => ({\n        ...p,\n        value: params[p.label],\n      }))\n    : undefined;\n\n//=====================================\n/**\n * Devices DB operations\n */\n\nexport const getDevices = async (type) =>\n  DB(DEVICES_DB)\n    .getAll({ startkey: `${type}`, endkey: `${type}\\uffff` })\n    .then((res) => res.rows.map((i) => i.doc))\n    .catch((e) => throwDbError(e, `Get locally saved devices error`));\n\nexport const getDevicesByKind = async (type, kind) =>\n  DB(DEVICES_DB)\n    .getAll({ startkey: `${type}_${kind}`, endkey: `${type}_${kind}\\uffff` })\n    .then((res) => res.rows)\n    .catch((e) => throwDbError(e, `Get locally saved devices error`));\n\nexport const getDevice = async (deviceId) =>\n  DB(DEVICES_DB)\n    .get(deviceId)\n    .catch((e) => throwDbError(e, `Get device error`));\n\nexport const updateDevice = async (deviceData) =>\n  DB(DEVICES_DB)\n    .update(deviceData)\n    .catch((e) => throwDbError(e, `Update device error`));\n\nexport const deleteDevice = (deviceID) =>\n  DB(DEVICES_DB)\n    .remove(deviceID)\n    .catch((e) => throwDbError(e, `Delete device error`));\n\nexport const addDevice = (device) =>\n  DB(DEVICES_DB)\n    .put(device)\n    .catch((e) =>\n      e.name === 'conflict'\n        ? throwDbError(e, `Device name must be unique`)\n        : throwDbError(e, `Insert device error`),\n    );\n\n//=====================================\n/**\n * Device Data operations\n */\n\n// Ps: don't forget to close Db connection in cleanup function\n\nexport const saveDataRow = (deviceId, data) =>\n  DB(deviceId).put({ _id: Date.now().toString(), ...data });\n\nexport const getSavedData = (deviceId) =>\n  DB(deviceId)\n    .getAll({\n      descending: true,\n    })\n    .then((res) => res.rows.map((d) => d.doc));\n\nexport const getSavedDataByPage = (deviceId, page, itemsByPage) =>\n  DB(deviceId)\n    .getAll({\n      descending: true,\n      skip: (page - 1) * itemsByPage,\n      limit: itemsByPage,\n    })\n    .then((res) => res.rows.map((d) => d.doc));\n\nexport const getSavedDataCount = (deviceId) =>\n  DB(deviceId)\n    .getAll({\n      include_docs: false,\n    })\n    .then((res) => res.total_rows);\n\nexport const getLastSavedData = (deviceId) =>\n  DB(deviceId)\n    .getAll({\n      descending: true,\n      limit: 1,\n    })\n    .then((res) => res.rows.map((d) => d.doc));\n\nexport const clearSavedData = (deviceId) => DB(deviceId).destroy();\n\nexport const listenToDataChanges = (deviceId, successCallback, errorCallBack) =>\n  DB(deviceId).listenToChanges(successCallback, errorCallBack);\n\nexport const closeDbConnection = (dbName) => DB(dbName).close();\n"],"names":["protocolOptions","DEVICE_PROTOCOLS","val","label","toUpperCase","value","kindOptions","DEVICE_KINDS","option","name","kind","validationSchema","Yup","shape","max","matches","required","url","port","positive","integer","protocol","topic","username","isOpen","onClose","onSave","onUpdate","initialValues","updateMode","isEmpty","useState","footerMessage","setFooterMessage","formRef","useRef","_initialValues","filter","v","DEFAULT_PROTOCOL","DEFAULT_PORT","password","useEffect","setTimeout","onSubmit","values","deviceInfo","_kind","k","Error","message","renderFooterMessage","state","className","onRequestClose","icon","iconColor","animated","hasCloseButton","requestCloseOnBackdrop","requestCloseOnEsc","fluid","wrapperComponent","Form","wrapperProps","innerRef","id","placeholder","disabled","inputClassName","leadingInlineAddon","options","renderOption","o","getValue","type","onClick","e","stopPropagation","testDeviceConnection","current","then","catch","err","connect","clientPromise","Promise","resolve","reject","onSuccess","onError","brokerUrl","client","mqtt","keepalive","reconnectPeriod","on","isFunction","stream","error","end","getClientInstance","subscribe","onMessageReceived","qos","payload","data","parseCurrentSettings","toString","unsubscribe","disconnect","callback","SCAN_INTERVAL_CONNECTED_DEVICES","broadcastDeviceInfo","_id","concatDeviceId","DEVICE_TYPE","connectDevice","deviceId","mqttClient","dbClient","DB","onSubscribe","put","Date","now","epoch","getAllData","getAll","res","rows","map","i","doc","getLastData","descending","limit","getPageData","skip","getAllDataCount","total_rows","continuousListenToDevices","devicesList","scanInterval","testConnection","promiseArray","forEach","device","push","allSettled","interval","setInterval","connectedDBs","dbName","PouchDB","revs_limit","auto_compaction","allDocs","include_docs","getInfo","info","get","docId","db","update","resGet","_rev","resPut","errPut","remove","resRm","errRm","listenToChanges","successCallback","errorCallBack","changes","since","live","close","destroy","DEVICES_DB","window","location","broadcast","interactive","local","COMMANDS","help","settings","compactSettings","runExperiment","kinetic","reset","sleep","setParameter","Object","keys","legoinoDeviceInformation","key","events","parameters","throwDbError","additionalMsg","console","log","getDeviceKind","Number","mapParameters","params","p","undefined","getDevices","startkey","endkey","getDevice","updateDevice","deviceData","deleteDevice","deviceID","addDevice","saveDataRow","getSavedData","d","getSavedDataByPage","page","itemsByPage","getSavedDataCount","getLastSavedData","clearSavedData","listenToDataChanges","closeDbConnection"],"sourceRoot":""}