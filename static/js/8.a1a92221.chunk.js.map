{"version":3,"sources":["services/devicesOptions.js","services/devicesService.js","services/db.js","services/util.js","services/mqttService.js","services/broadCastDeviceService.js","pages/BroadcastDevices/DeviceModal.jsx","pages/BroadcastDeviceDetails/HistoryTab.jsx","pages/BroadcastDeviceDetails/GeneralTab.jsx","pages/BroadcastDeviceDetails/DeviceCardInfo.jsx","pages/BroadcastDeviceDetails/index.jsx"],"names":["DEVICES_DB","DEFAULT_PORT","window","location","protocol","DEFAULT_PROTOCOL","DEVICE_PROTOCOLS","DEVICE_TYPE","broadcast","interactive","local","COMMANDS","help","settings","compactSettings","runExperiment","kinetic","reset","sleep","setParameter","label","value","DEVICE_KINDS","Object","keys","legoinoDeviceInformation","filter","key","kind","map","events","parameters","throwDbError","error","additionalMsg","console","log","err","Error","message","name","concatDeviceId","type","id","getDeviceKind","deviceId","fromDeviceID","Number","e","mapParameters","params","p","undefined","getDevices","DB","getAll","startkey","endkey","then","res","rows","i","doc","catch","getDevice","get","updateDevice","deviceData","update","deleteDevice","deviceID","remove","addDevice","device","put","saveDataRow","data","_id","Date","now","toString","getSavedData","descending","d","getSavedDataByPage","page","itemsByPage","skip","limit","getSavedDataCount","include_docs","total_rows","getLastSavedData","clearSavedData","destroy","listenToDataChanges","successCallback","errorCallBack","listenToChanges","closeDbConnection","dbName","close","connectedDBs","connect","PouchDB","revs_limit","auto_compaction","getInfo","Promise","resolve","reject","info","options","allDocs","docId","db","resGet","_rev","resPut","errPut","resRm","errRm","changes","since","live","on","diffDeviceLists","firstArray","secondArray","otherArray","current","other","length","msToTime","duration","seconds","Math","floor","minutes","hours","time","url","port","username","password","onSuccess","onError","brokerUrl","client","mqtt","keepalive","reconnectPeriod","isFunction","stream","end","getClientInstance","subscribe","topic","onMessageReceived","qos","payload","parseCurrentSettings","unsubscribe","disconnect","callback","broadcastDeviceInfo","deviceInfo","connectDevice","mqttClient","dbClient","onSubscribe","epoch","getAllData","getLastData","getPageData","getAllDataCount","testDeviceConnection","continuousListenToDevices","devicesList","scanInterval","testConnection","a","promiseArray","forEach","push","allSettled","interval","setInterval","protocolOptions","val","toUpperCase","kindOptions","option","validationSchema","Yup","shape","max","matches","required","positive","integer","DeviceModal","isOpen","onClose","onSave","onUpdate","initialValues","updateMode","isEmpty","useState","footerMessage","setFooterMessage","formRef","useRef","_initialValues","v","useEffect","setTimeout","onSubmit","values","_kind","k","renderFooterMessage","state","className","onRequestClose","icon","iconColor","animated","hasCloseButton","requestCloseOnBackdrop","requestCloseOnEsc","fluid","wrapperComponent","Form","wrapperProps","innerRef","Header","Body","placeholder","disabled","inputClassName","leadingInlineAddon","renderOption","o","getValue","Footer","onClick","stopPropagation","HistoryTab","headers","setHeaders","setData","setPage","count","setCount","initDataListener","setInitDataListener","initHeaders","useCallback","dataArray","heads","parametersArray","h","getDataByPage","throttle","_page","_data","trailing","cancel","headerValues","compact","Row","classnames","index","size","variant","document","activeElement","blur","pagination","totalCount","onPageChange","withText","itemsPerPage","maxVisiblePages","Tr","Empty","GeneralTab","param","title","String","factor","unit","description","DeviceCardInfo","isConnected","goBack","onOpenModel","dot","rounded","BadgeSize","SMALL","color","TABS","DeviceDetails","match","history","currentDevice","setCurrentDevice","selectedTab","setSelectedTab","isModalOpen","setModelOpen","setConnected","forceRender","setForceRender","updateData","deviceClient","onSelect","selected","tab","renderTabContent"],"mappings":"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","file":"static/js/8.a1a92221.chunk.js","sourcesContent":["import legoinoDeviceInformation from 'legoino-device-information';\n\n// Default Values\n\nexport const DEVICES_DB = 'BIOREACTOR-UI_devices';\nexport const DEFAULT_PORT =\n  window.location.protocol === 'https:' ? '443' : '80'; // old '8080'\nexport const DEFAULT_PROTOCOL =\n  window.location.protocol === 'https:' ? 'wss' : 'http'; // old tcp\n\n// Static Values\n\nexport const DEVICE_PROTOCOLS = ['http', 'tcp', 'wss'];\n\nexport const DEVICE_TYPE = {\n  broadcast: 'broadcast',\n  interactive: 'interactive',\n  local: 'local',\n};\n\nexport const COMMANDS = {\n  help: 'h',\n  settings: 'u',\n  compactSettings: 'uc',\n  runExperiment: 'r',\n  kinetic: 'k',\n  reset: 'ur1234',\n  sleep: 'l',\n  setParameter: (label, value) => `${label}${value}`,\n};\n\nexport const DEVICE_KINDS = Object.keys(legoinoDeviceInformation)\n  .filter((key) => legoinoDeviceInformation[key].kind)\n  .map((key) => {\n    const { events, parameters, ...info } = legoinoDeviceInformation[key];\n    return info;\n  });\n\nexport const DEVICE_STATUS = {\n  opening: 1,\n  opened: 2,\n  closed: 3,\n  missing: 9,\n  error: 10,\n};\n","import legoinoDeviceInformation from 'legoino-device-information';\nimport DB from './db';\nimport { DEVICES_DB } from './devicesOptions';\n\n// Private Functions\n\nconst throwDbError = (error, additionalMsg) => {\n  console.log(error);\n  const err = new Error(`${additionalMsg} \\n${error?.message}`);\n  err.name = 'DATABASE_ERROR';\n  throw err;\n};\n\n// Public Functions\n\n/**\n * return device _id\n */\nexport const concatDeviceId = (type, kind, id) => `${type}_${kind}_${id}`;\n\n/**\n * Get device Kind from its ID\n */\nexport const getDeviceKind = (deviceId) => {\n  try {\n    if (deviceId) {\n      const selectedDeviceKind = legoinoDeviceInformation.fromDeviceID(\n        Number(deviceId),\n      );\n      return selectedDeviceKind;\n    }\n  } catch (e) {\n    console.log(e);\n    return undefined;\n  }\n};\n\n/**\n * map parameters based on kind\n */\nexport const mapParameters = (kind, params) =>\n  kind && params\n    ? legoinoDeviceInformation[kind]?.parameters?.map((p) => ({\n        ...p,\n        value: params[p.label],\n      }))\n    : undefined;\n\n//=====================================\n/**\n * Devices DB operations\n */\n\nexport const getDevices = async (type) =>\n  DB(DEVICES_DB)\n    .getAll({ startkey: `${type}`, endkey: `${type}\\uffff` })\n    .then((res) => res.rows.map((i) => i.doc))\n    .catch((e) => throwDbError(e, `Get locally saved devices error`));\n\nexport const getDevicesByKind = async (type, kind) =>\n  DB(DEVICES_DB)\n    .getAll({ startkey: `${type}_${kind}`, endkey: `${type}_${kind}\\uffff` })\n    .then((res) => res.rows)\n    .catch((e) => throwDbError(e, `Get locally saved devices error`));\n\nexport const getDevice = async (deviceId) =>\n  DB(DEVICES_DB)\n    .get(deviceId)\n    .catch((e) => throwDbError(e, `Get device error`));\n\nexport const updateDevice = async (deviceData) =>\n  DB(DEVICES_DB)\n    .update(deviceData)\n    .catch((e) => throwDbError(e, `Update device error`));\n\nexport const deleteDevice = (deviceID) =>\n  DB(DEVICES_DB)\n    .remove(deviceID)\n    .catch((e) => throwDbError(e, `Delete device error`));\n\nexport const addDevice = (device) =>\n  DB(DEVICES_DB)\n    .put(device)\n    .catch((e) =>\n      e.name === 'conflict'\n        ? throwDbError(e, `Device name must be unique`)\n        : throwDbError(e, `Insert device error`),\n    );\n\n//=====================================\n/**\n * Device Data operations\n */\n\n// Ps: don't forget to close Db connection in cleanup function\n\nexport const saveDataRow = (deviceId, data) =>\n  DB(deviceId).put({ _id: Date.now().toString(), ...data });\n\nexport const getSavedData = (deviceId) =>\n  DB(deviceId)\n    .getAll({\n      descending: true,\n    })\n    .then((res) => res.rows.map((d) => d.doc));\n\nexport const getSavedDataByPage = (deviceId, page, itemsByPage) =>\n  DB(deviceId)\n    .getAll({\n      descending: true,\n      skip: (page - 1) * itemsByPage,\n      limit: itemsByPage,\n    })\n    .then((res) => res.rows.map((d) => d.doc));\n\nexport const getSavedDataCount = (deviceId) =>\n  DB(deviceId)\n    .getAll({\n      include_docs: false,\n    })\n    .then((res) => res.total_rows);\n\nexport const getLastSavedData = (deviceId) =>\n  DB(deviceId)\n    .getAll({\n      descending: true,\n      limit: 1,\n    })\n    .then((res) => res.rows.map((d) => d.doc));\n\nexport const clearSavedData = (deviceId) => DB(deviceId).destroy();\n\nexport const listenToDataChanges = (deviceId, successCallback, errorCallBack) =>\n  DB(deviceId).listenToChanges(successCallback, errorCallBack);\n\nexport const closeDbConnection = (dbName) => DB(dbName).close();\n","import PouchDB from 'pouchdb';\n\n// Wrap Db interface in case of switching to another Db other than \"PouchDb\"\nlet connectedDBs = {};\n\nconst DB = (dbName) => {\n  const connect = () => {\n    if (!(dbName in connectedDBs)) {\n      connectedDBs[dbName] = new PouchDB(dbName, {\n        revs_limit: 1,\n        auto_compaction: true,\n      });\n    }\n    return connectedDBs[dbName];\n  };\n\n  // DB operations to return\n\n  const getInfo = () =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      db.info()\n        .then((res) => resolve(res))\n        .catch((err) => reject(err));\n    });\n\n  const getAll = async (options) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      db.allDocs({\n        include_docs: true,\n        ...options,\n      })\n        .then((res) => resolve(res))\n        .catch((err) => reject(err));\n    });\n\n  const get = (docId) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      docId\n        ? db\n            .get(docId)\n            .then((res) => resolve(res))\n            .catch((err) => reject(err))\n        : reject(new Error('Doc fetch : docId is required'));\n    });\n\n  const put = (doc) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      !('_id' in doc)\n        ? reject(new Error('Doc create : _id is required in doc'))\n        : db\n            .put(doc)\n            .then((res) => resolve(res))\n            .catch((err) => reject(err));\n    });\n\n  const update = (doc) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      !('_id' in doc)\n        ? reject(new Error('Doc update : _id is required in doc'))\n        : db\n            .get(doc._id)\n            .then((resGet) =>\n              db\n                .put({ ...doc, _rev: resGet._rev })\n                .then((resPut) => resolve(resPut))\n                .catch((errPut) => reject(errPut)),\n            )\n            .catch((err) => reject(err));\n    });\n\n  const remove = (docId) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      docId\n        ? db\n            .get(docId)\n            .then((resGet) =>\n              db\n                .remove({ _id: docId, _rev: resGet._rev })\n                .then((resRm) => resolve(resRm))\n                .catch((errRm) => reject(errRm)),\n            )\n            .catch((err) => reject(err))\n        : reject(new Error('Doc remove : docId is required'));\n    });\n\n  // const removeAll = () => {\n  //   const db = connect();\n  //   return db\n  //     .allDocs()\n  //     .then((result) =>\n  //       Promise.all(result.rows.map((row) => db.remove(row.id, row.value.rev))),\n  //     );\n  // };\n\n  const listenToChanges = (successCallback, errorCallBack, options) => {\n    const db = connect();\n    let unsubscribe = db\n      .changes({\n        since: 'now',\n        live: true,\n        include_docs: true,\n        ...options,\n      })\n      .on('change', successCallback)\n      // .on('complete', successCallback)\n      .on('error', errorCallBack);\n    return unsubscribe;\n  };\n\n  const close = () => {\n    const db = connect();\n    delete connectedDBs[dbName];\n    return db.close();\n  };\n  const destroy = () => {\n    const db = connect();\n    delete connectedDBs[dbName];\n    return db.destroy();\n  };\n\n  return {\n    getInfo,\n    getAll,\n    get,\n    put,\n    update,\n    remove,\n    listenToChanges,\n    close,\n    destroy,\n  };\n};\n\nexport default DB;\n","/**\n *\n * @param {Array} firstArray\n * @param {Array} secondArray\n * @returns {Array} elements in firstArray & not in secondArray\n */\n\nexport const diffDeviceLists = (firstArray, secondArray) => {\n  const compare = (otherArray) => (current) =>\n    otherArray.filter((other) => other.id === current.id).length === 0;\n\n  return firstArray.filter(compare(secondArray));\n};\n\nexport const msToTime = (duration) => {\n  const seconds = Math.floor((duration / 1000) % 60),\n    minutes = Math.floor((duration / (1000 * 60)) % 60),\n    hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n  let time = `${seconds}s`;\n  if (hours) {\n    time = `${hours}h ${minutes}m ` + time;\n  } else if (minutes) {\n    time = `${minutes}m ` + time;\n  }\n  return time;\n};\n","import mqtt from 'mqtt';\nimport { isFunction } from 'lodash';\nimport { parseCurrentSettings } from 'legoino-util';\n\n// Private Functions\n\nconst getClientInstance = (\n  url,\n  protocol,\n  port,\n  username,\n  password,\n  onSuccess,\n  onError,\n) => {\n  const brokerUrl = `${protocol}://${url}:${port}`;\n  const client = mqtt.connect(brokerUrl, {\n    keepalive: 300,\n    reconnectPeriod: 5000,\n  });\n\n  client.on('connect', () => {\n    // console.log(`connected to ${brokerUrl} : ${client.connected}`);\n    isFunction(onSuccess) && onSuccess(client);\n  });\n\n  client.stream.on('error', (err) => {\n    // console.log(err);\n    const error = new Error(`Couldn't connect to BROKER \"${brokerUrl}\"`);\n    error.name = 'Mqtt Error';\n    client.end();\n    isFunction(onError) && onError(error);\n  });\n};\n\nconst parseToJson = (data) => {\n  return parseCurrentSettings(data.toString(), {});\n};\n\n// Public Functions\n\nexport const connect = (url, protocol, port, username, password) => {\n  const clientPromise = new Promise((resolve, reject) => {\n    getClientInstance(\n      url,\n      protocol,\n      port,\n      username,\n      password,\n      (client) => resolve(client),\n      (error) => reject(error),\n    );\n  });\n  return clientPromise;\n};\n\n// TO DO: update function\n\nexport const subscribe = (client, topic, onMessageReceived, onError) => {\n  client.subscribe(topic, { qos: 2 }, (err) => {\n    err\n      ? isFunction(onError) && onError(err)\n      : client.on('message', (topic, payload) => {\n          isFunction(onMessageReceived) &&\n            onMessageReceived(parseToJson(payload));\n        });\n  });\n\n  const unsubscribe = (onError) => client.unsubscribe(topic, {}, onError);\n\n  return unsubscribe;\n};\n\nexport const disconnect = (client, callback) =>\n  client.end(() => {\n    // console.log(`mqtt broker \"${client.options.hostname}\" disconnected`);\n    isFunction(callback) && callback();\n  });\n","import { isFunction } from 'lodash';\nimport DB from './db';\nimport { connect, subscribe, disconnect } from './mqttService';\nimport { DEFAULT_PORT, DEFAULT_PROTOCOL, DEVICE_TYPE } from './devicesOptions';\nimport { concatDeviceId } from './devicesService';\n\nconst SCAN_INTERVAL_CONNECTED_DEVICES = 10000;\n\n// Public Functions\n\n/**\n * return device information to be stored in DB\n */\nexport const broadcastDeviceInfo = (deviceInfo) => {\n  return {\n    ...deviceInfo,\n    _id: concatDeviceId(\n      DEVICE_TYPE.broadcast,\n      deviceInfo.kind?.kind,\n      deviceInfo.name,\n    ),\n    protocol: deviceInfo?.protocol ? deviceInfo?.protocol : DEFAULT_PROTOCOL,\n    port: deviceInfo?.port ? deviceInfo?.port : DEFAULT_PORT,\n  };\n};\n\n//\n// connect to broadcast device & return a client instance with {subscribe, disconnect, getAllData, getLastData}\nexport const connectDevice = ({\n  _id,\n  name,\n  kind,\n  deviceId = _id || `${kind}_${name}`,\n  url,\n  protocol = DEFAULT_PROTOCOL,\n  port = DEFAULT_PORT,\n  topic,\n  username,\n  password,\n}) => {\n  const clientPromise = new Promise(async (resolve, reject) => {\n    try {\n      // await new Promise((resolve) => setTimeout(resolve, 1000));\n      const mqttClient = await connect(url, protocol, port, username, password);\n      const dbClient = DB(deviceId);\n\n      const _subscribe = (onSubscribe, onError) => {\n        const unsubscribe = subscribe(\n          mqttClient,\n          topic,\n          (payload) => {\n            dbClient\n              .put({ _id: `${Date.now()}_${payload.epoch}`, ...payload })\n              .then(() => onSubscribe(payload))\n              .catch(() => {});\n          },\n          onError,\n        );\n        return unsubscribe;\n      };\n\n      const _disconnect = (callback) => disconnect(mqttClient, callback);\n\n      const getAllData = () =>\n        dbClient.getAll().then((res) => res.rows.map((i) => i.doc));\n\n      const getLastData = () =>\n        dbClient\n          .getAll({ descending: true, limit: 1 })\n          .then((res) => res.rows.map((i) => i.doc));\n\n      const getPageData = (skip, limit) =>\n        dbClient\n          .getAll({ descending: true, skip: skip, limit: limit })\n          .then((res) => res.rows.map((i) => i.doc));\n\n      const getAllDataCount = () =>\n        dbClient.getAll().then((res) => res.total_rows);\n\n      resolve({\n        subscribe: _subscribe,\n        disconnect: _disconnect,\n        getAllData,\n        getLastData,\n        getPageData,\n        getAllDataCount,\n      });\n    } catch (e) {\n      // connection error\n      reject(e);\n    }\n  });\n\n  return clientPromise;\n};\n\nexport const testDeviceConnection = ({\n  url,\n  protocol = DEFAULT_PROTOCOL,\n  port = DEFAULT_PORT,\n  topic,\n  username,\n  password,\n}) => {\n  const clientPromise = new Promise(async (resolve, reject) => {\n    try {\n      const mqttClient = await connect(url, protocol, port, username, password);\n      const unsubscribe = subscribe(\n        mqttClient,\n        topic,\n        (payload) => {\n          unsubscribe();\n          disconnect(mqttClient, () => resolve(payload));\n        },\n        reject,\n      );\n    } catch (e) {\n      // connection error\n      reject(e);\n    }\n  });\n\n  return clientPromise;\n};\n\n/**\n *\n * @param {object[]} devicesList\n * @param {function} callback res=> array of Promise results (fulfilled/rejected)\n * @param {integer} scanInterval in ms\n * @returns {object}  to clear interval later on\n */\nexport const continuousListenToDevices = async (\n  devicesList,\n  callback,\n  scanInterval = SCAN_INTERVAL_CONNECTED_DEVICES,\n) => {\n  const testConnection = async () => {\n    const promiseArray = [];\n    devicesList.forEach((device) =>\n      promiseArray.push(\n        testDeviceConnection(device)\n          .then((res) => ({ device, payload: res }))\n          .catch((err) => {\n            err.device = device;\n            throw err;\n          }),\n      ),\n    );\n    isFunction(callback) && callback(await Promise.allSettled(promiseArray));\n  };\n  // execute it every scanInterval\n  testConnection();\n  const interval = setInterval(\n    async () => await testConnection(),\n    scanInterval,\n  );\n\n  return interval;\n};\n","import { useRef, useState, useEffect } from 'react';\nimport * as Yup from 'yup';\nimport { isEmpty } from 'lodash';\nimport {\n  Form,\n  InputField,\n  Modal,\n  SvgOutlinePlus,\n  FormError,\n  SubmitButton,\n  SvgOutlineUser,\n  SvgOutlineKey,\n  SvgOutlineLink,\n  SvgOutlineX,\n  SelectField,\n  Spinner,\n  SvgOutlineCheck,\n} from '../../components/tailwind-ui';\n\nimport { testDeviceConnection } from '../../services/broadCastDeviceService';\nimport {\n  DEFAULT_PORT,\n  DEFAULT_PROTOCOL,\n  DEVICE_KINDS,\n  DEVICE_PROTOCOLS,\n} from '../../services/devicesOptions';\n\n//\n// Pre-defined variables\nconst protocolOptions = DEVICE_PROTOCOLS.map((val) => {\n  return { label: val.toUpperCase(), value: val };\n});\nconst kindOptions = DEVICE_KINDS.map((option) => {\n  return { ...option, label: option.name, value: option.kind };\n});\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .max(50, 'Name too Long!')\n    .matches(\n      /^[A-z0-9_-]*$/,\n      'Field supports only : letters / numbers / _ / - ',\n    )\n    .required('Required'),\n  url: Yup.string().required('Required'),\n  port: Yup.number().positive().integer(),\n  protocol: Yup.string(),\n  kind: Yup.string().required('Required'),\n  topic: Yup.string().required('Required'),\n  username: Yup.string().required('Required'),\n});\n//\n\nconst DeviceModal = ({ isOpen, onClose, onSave, onUpdate, initialValues }) => {\n  const updateMode = !isEmpty(initialValues); // if initialValues defined : updates the recode; else: add the record\n  const [footerMessage, setFooterMessage] = useState(<div />);\n  const formRef = useRef(null); // Ref the Form\n\n  const _initialValues = updateMode\n    ? {\n        ...initialValues,\n        kind: initialValues.kind.kind,\n      }\n    : {\n        name: 'Computer_01',\n        url: 'mqtt.hackuarium.org',\n        protocol: protocolOptions.filter((v) => v.value === DEFAULT_PROTOCOL)[0]\n          .value,\n        port: DEFAULT_PORT,\n        kind: 'Computer',\n        topic: 'lpatiny/Computer/server',\n        username: 'user',\n        password: 'password',\n      };\n\n  useEffect(() => {\n    // clear footer when modal is closed\n    !isOpen && setTimeout(() => setFooterMessage(<div />), 500);\n  }, [isOpen]);\n\n  // events functions\n  const onSubmit = async (values) => {\n    try {\n      const { kind, ...deviceInfo } = values;\n      const _kind = DEVICE_KINDS.filter((k) => k.kind === kind)[0];\n      updateMode\n        ? await onUpdate({ ...deviceInfo, kind: _kind })\n        : await onSave({ ...deviceInfo, kind: _kind });\n      onClose();\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  const testConnection = (e) => {\n    e.stopPropagation();\n    renderFooterMessage('connecting', 'Connecting ...');\n    setTimeout(() => {\n      testDeviceConnection(formRef.current.values)\n        .then(() => {\n          renderFooterMessage('success', 'Connected');\n        })\n        .catch((err) => {\n          renderFooterMessage('error', `Connection Error: ${err.message}`);\n        });\n    }, 500);\n  };\n\n  // helper function for testConnection event\n  const renderFooterMessage = (state, message) => {\n    switch (state) {\n      case 'connecting':\n        setFooterMessage(\n          <div className=\"mx-6 flex flex-row items-center text-sm text-left text-neutral-500\">\n            <Spinner className=\"w-6 h-6 mr-2\" />\n            <span>{message}</span>\n          </div>,\n        );\n        break;\n\n      case 'success':\n        setFooterMessage(\n          <div className=\"mx-4 flex flex-row items-center text-sm text-left text-success-500\">\n            <SvgOutlineCheck className=\"h-6 w-6 mr-4\" />\n            <span>{message}</span>\n          </div>,\n        );\n        break;\n\n      case 'error':\n        setFooterMessage(\n          <div className=\"mx-4 flex flex-row items-center text-sm text-left text-danger-500\">\n            <SvgOutlineX className=\"h-6 w-6 mr-4\" />\n            <span>{message}</span>\n          </div>,\n        );\n        break;\n\n      default:\n        setFooterMessage(<div />);\n        break;\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={onClose}\n      icon={<SvgOutlinePlus />}\n      iconColor=\"neutral\"\n      animated\n      hasCloseButton\n      requestCloseOnBackdrop\n      requestCloseOnEsc\n      fluid\n      wrapperComponent={Form}\n      wrapperProps={{\n        innerRef: formRef,\n        initialValues: _initialValues,\n        validationSchema,\n        onSubmit: onSubmit,\n        className: 'h-full',\n      }}\n    >\n      <Modal.Header>\n        {updateMode ? 'Update Device' : 'Connect New Device'}\n      </Modal.Header>\n      <Modal.Body>\n        <div className=\"p-2 mt-2\">\n          <InputField\n            name=\"name\"\n            id=\"name\"\n            label=\"Custom name\"\n            placeholder=\"Device name\"\n            disabled={updateMode}\n            required\n            className=\"w-full\"\n            inputClassName=\"w-full\"\n          ></InputField>\n          <div className=\"flex flex-col sm:flex-row sm:justify-between mt-4 sm:mt-0 border-t border-neutral sm:border-0\">\n            <InputField\n              name=\"url\"\n              id=\"url\"\n              label=\"URL\"\n              placeholder=\"mqtt.domain.com\"\n              required\n              leadingInlineAddon={<SvgOutlineLink />}\n              className=\"mt-4 sm:mr-4 w-full sm:w-1/2\"\n              inputClassName=\"w-full\"\n            ></InputField>\n            <div className=\"flex flex-row justify-between items-start flex-1\">\n              <SelectField\n                name=\"protocol\"\n                id=\"protocol\"\n                label=\"Protocol\"\n                options={protocolOptions}\n                renderOption={(o) => `${o.label}`}\n                getValue={(o) => o.value}\n                className=\"mt-4 mr-4 w-1/2\"\n                inputClassName=\"w-full\"\n              ></SelectField>\n              <InputField\n                name=\"port\"\n                id=\"port\"\n                label=\"Port\"\n                className=\"mt-4 flex-1\"\n                inputClassName=\"w-full\"\n              ></InputField>\n            </div>\n          </div>\n          <div className=\"flex flex-row justify-between items-start\">\n            <SelectField\n              name=\"kind\"\n              id=\"kind\"\n              label=\"Kind\"\n              options={kindOptions}\n              renderOption={(o) => `${o.label}`}\n              getValue={(o) => o.value}\n              required\n              className=\"mt-4 mr-4 w-1/2 \"\n              inputClassName=\"w-full bg-gray-500\"\n            ></SelectField>\n            <InputField\n              name=\"topic\"\n              id=\"topic\"\n              label=\"Topic\"\n              required\n              className=\"mt-4 flex-1\"\n              inputClassName=\"w-full\"\n            ></InputField>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row sm:justify-between mt-4 sm:mt-0 border-t border-neutral sm:border-0\">\n            <InputField\n              name=\"username\"\n              id=\"username\"\n              label=\"Username\"\n              placeholder=\"Username\"\n              required\n              leadingInlineAddon={<SvgOutlineUser />}\n              className=\"mt-4 w-full sm:mr-4 sm:w-1/2\"\n              inputClassName=\"w-full\"\n            ></InputField>\n            <InputField\n              name=\"password\"\n              id=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              placeholder=\"********\"\n              required\n              leadingInlineAddon={<SvgOutlineKey />}\n              className=\"mt-4 w-full sm:flex-1\"\n              inputClassName=\"w-full\"\n            ></InputField>\n          </div>\n        </div>\n        <FormError />\n      </Modal.Body>\n      <Modal.Footer>\n        <div className=\"flex flex-col sm:flex-row items-center\">\n          {footerMessage}\n          <button\n            onClick={testConnection}\n            type=\"button\"\n            className=\"w-full sm:w-max mt-2 sm:my-0 px-4 py-2 sm:mr-4 text-sm font-semibold text-neutral-700 border rounded-md shadow bg-neutral-200 focus:outline-none flex-1 sm:flex-none\"\n          >\n            Test connection\n          </button>\n          <SubmitButton className=\"w-full my-2 sm:my-0 sm:w-max \">\n            {updateMode ? 'Update' : 'Add'}\n          </SubmitButton>\n        </div>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default DeviceModal;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport { throttle } from 'lodash';\nimport { Button, Table, Td, Th } from '../../components/tailwind-ui';\n\nimport {\n  getSavedDataCount,\n  getSavedDataByPage,\n  mapParameters,\n  clearSavedData,\n  listenToDataChanges,\n} from '../../services/devicesService';\nimport { msToTime } from '../../services/util';\n\nconst ROWS_BY_PAGE = 10;\n\nconst HistoryTab = ({ device }) => {\n  const [headers, setHeaders] = useState([]);\n  const [data, setData] = useState([]);\n  const [page, setPage] = useState(1);\n  const [count, setCount] = useState(0);\n  const [initDataListener, setInitDataListener] = useState(false);\n\n  // initialize headers the first time the data is received\n  const initHeaders = useCallback(\n    (dataArray) => {\n      if (headers.length === 0 && dataArray && dataArray.length > 0) {\n        const heads = dataArray[0]?.parametersArray?.map(\n          (h) => h.name || h.label,\n        );\n        setHeaders(['Time', ...heads]);\n      }\n    },\n    [headers.length],\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const getDataByPage = useCallback(\n    throttle(\n      (_page) => {\n        if (device?._id) {\n          getSavedDataByPage(device?._id, _page, ROWS_BY_PAGE).then((_data) => {\n            const params = _data.map((d) => ({\n              epoch: msToTime(d?.epoch),\n              parametersArray: mapParameters(device?.kind?.kind, d?.parameters),\n            }));\n            initHeaders(params);\n            setData(params);\n            getSavedDataCount(device?._id).then(setCount);\n          });\n        }\n      },\n      1000, // execute it just one time if it's called multiple times in 500ms\n      { trailing: true },\n    ),\n    [device?._id, device?.kind?.kind, initHeaders],\n  );\n\n  useEffect(() => {\n    let unsubscribe;\n    if (device?._id) {\n      unsubscribe = listenToDataChanges(\n        device?._id,\n        (res) => {\n          getDataByPage(page);\n        },\n        (err) => console.log(err),\n      );\n    }\n    return () => unsubscribe && unsubscribe.cancel();\n  }, [device?._id, getDataByPage, page, initDataListener]);\n\n  useEffect(() => {\n    getDataByPage(page);\n  }, [getDataByPage, page]);\n\n  const onClear = () => {\n    // destroy & re-create DB\n    clearSavedData(device?._id).then(() => {\n      getSavedDataCount(device?._id).then(() => {\n        setInitDataListener(!initDataListener);\n        setData([]);\n        setPage(1);\n        setCount(0);\n        document.activeElement.blur();\n      });\n    });\n  };\n\n  const headerValues = useCallback(() => {\n    return (\n      <tr>\n        {headers?.map((h) => (\n          <Th\n            key={h}\n            className=\"p-2 text-center font-normal normal-case\"\n            compact={true}\n          >\n            {h}\n          </Th>\n        ))}\n      </tr>\n    );\n  }, [headers]);\n\n  const Row = useCallback((val) => {\n    const classnames = 'text-xs text-center p-2';\n    return (\n      <tr>\n        <Td compact={true} className={classnames + ' font-medium'}>\n          {val.value.epoch}\n        </Td>\n        {val.value.parametersArray?.map((p, index) => (\n          <Td key={index} compact={true} className={classnames}>\n            {p.value}\n          </Td>\n        ))}\n      </tr>\n    );\n  }, []);\n\n  const Empty = () => (\n    <div className=\"mx-5 mt-4 flex flex-col items-center\">\n      <h3 className=\"text-md font-semibold text-gray-300 leading-loose\">\n        No saved data\n      </h3>\n    </div>\n  );\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"w-full p-2 flex flex-row justify-end\">\n        <Button size=\"small\" variant=\"white\" onClick={onClear}>\n          Clear\n        </Button>\n      </div>\n      <div className=\"w-full p-1 pb-4 overflow-x-auto\">\n        <Table\n          pagination={{\n            totalCount: count,\n            page: page,\n            onPageChange: setPage,\n            withText: true,\n            itemsPerPage: ROWS_BY_PAGE,\n            maxVisiblePages: 1,\n          }}\n          data={data.map((d, index) => ({\n            ...d,\n            id: d.epoch + index,\n          }))}\n          Header={headerValues}\n          Tr={Row}\n          itemsPerPage={ROWS_BY_PAGE}\n          Empty={Empty}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default HistoryTab;\n","import React from 'react';\nimport { CardValue } from '../../components';\n\nconst GeneralTab = ({ data }) => {\n  return (\n    <div className=\" flex flex-row justify-around flex-wrap\">\n      {data?.parameters?.map((param, index) => (\n        <CardValue\n          key={index}\n          title={param.name || param.label}\n          value={String(param.value * param.factor)}\n          unit={param.unit}\n          info={param.description}\n          className=\"w-full sm:w-1/2  md:w-1/4 lg:w-1/5 flex\"\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default GeneralTab;\n","import React from 'react';\nimport {\n  BadgeSize,\n  Badge,\n  Button,\n  SvgSolidPencilAlt,\n  SvgSolidArrowCircleLeft,\n} from '../../components/tailwind-ui';\n\nconst DeviceCardInfo = ({ device, isConnected, goBack, onOpenModel }) => {\n  return (\n    <div className=\"my-2 p-2 flex flex-row items-start rounded-md bg-white shadow \">\n      <SvgSolidArrowCircleLeft\n        className=\"my-3 mr-2 h-6 w-6 text-neutral-300 cursor-pointer\"\n        onClick={goBack}\n      />\n      <div className=\"w-full my-2 flex flex-col\">\n        <div className=\"flex flex-row items-center\">\n          <h1 className=\"mr-4 text-lg font-semibold truncate text-primary-800\">\n            {device?.name}\n          </h1>\n          <Badge\n            dot\n            rounded\n            label={isConnected ? 'Active' : 'Inactive'}\n            size={BadgeSize.SMALL}\n            color={isConnected ? 'success' : 'neutral'}\n            className=\"w-min h-min\"\n          />\n        </div>\n        <div className=\"flex flex-row flex-wrap justify-between items-end\">\n          <div className=\"flex flex-col\">\n            <h3 className=\"mt-2 text-xs font-italic text-neutral-600 font-base truncate\">\n              <span className=\"font-semibold\">Kind: </span>\n              {`${device?.kind?.name} (${device?.kind?.kind})`}\n            </h3>\n            <h3 className=\"mt-2 text-xs font-italic text-neutral-600 font-base truncate\">\n              <span className=\"font-semibold\">URL: </span>\n              {`${device?.protocol}://${device?.url}:${device?.port}`}\n            </h3>\n            <h3 className=\"mt-2 text-xs font-italic text-neutral-600 font-base truncate\">\n              <span className=\"font-semibold\">Topic: </span>\n              {`${device?.topic}`}\n            </h3>\n          </div>\n          <div className=\"flex flex-row mt-2 \">\n            <Button\n              size=\"small\"\n              variant=\"white\"\n              className=\"mr-2 \"\n              onClick={() => onOpenModel(true)}\n            >\n              <SvgSolidPencilAlt className=\"text-gray-700\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DeviceCardInfo;\n","import { useState, useEffect, useCallback } from 'react';\nimport { throttle } from 'lodash';\nimport { HorizontalNavigation } from '../../components/tailwind-ui';\n\nimport HistoryTab from './HistoryTab';\nimport GeneralTab from './GeneralTab';\nimport DeviceCardInfo from './DeviceCardInfo';\nimport DeviceModal from '../BroadcastDevices/DeviceModal';\nimport { connectDevice } from '../../services/broadCastDeviceService';\nimport {\n  getDevice,\n  updateDevice,\n  mapParameters,\n  getLastSavedData,\n  closeDbConnection,\n} from '../../services/devicesService';\n\nconst TABS = ['General', 'Data'].map((value) => ({\n  value: value,\n  label: value,\n}));\n\nconst DeviceDetails = ({ match, history }) => {\n  const [currentDevice, setCurrentDevice] = useState();\n  const [selectedTab, setSelectedTab] = useState(TABS[0]);\n  const [data, setData] = useState({});\n  const [isModalOpen, setModelOpen] = useState(false);\n  const [isConnected, setConnected] = useState(false);\n  const [forceRender, setForceRender] = useState(false);\n\n  const deviceId = `${match.params.id}`;\n\n  // get device from DB at the first render\n  useEffect(() => {\n    if (deviceId) {\n      console.log('getDevice');\n      getDevice(deviceId).then(setCurrentDevice).catch(console.log);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // if it's called multiple times, execute it once in 1000ms\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const updateData = useCallback(\n    throttle(\n      (_data) => {\n        // console.log(currentDevice?.kind?.kind);\n        const params = mapParameters(\n          currentDevice.kind?.kind,\n          _data?.parameters,\n        );\n        setData({ ..._data, parameters: params });\n      },\n      1000,\n      { trailing: true },\n    ),\n    [currentDevice?.kind?.kind],\n  );\n\n  // fetch data locally at first render when remote data is not received yet\n  useEffect(() => {\n    if (currentDevice?._id) {\n      getLastSavedData(currentDevice?._id).then((_data) => {\n        if (_data.length > 0) updateData(_data[0]);\n      });\n    }\n    return () => currentDevice?._id && closeDbConnection(currentDevice?._id);\n  }, [currentDevice?._id, updateData]);\n\n  // get remote data : subscribe to device & listen to data\n  useEffect(() => {\n    let unsubscribe;\n    if (currentDevice?._id) {\n      // let isFirstTime = true;\n      connectDevice(currentDevice)\n        .then((deviceClient) => {\n          unsubscribe = deviceClient?.subscribe(\n            (_data) => {\n              // set device connected\n              !isConnected && setConnected(true);\n              updateData(_data);\n              // set the correct device kind (extracted from deviceId)\n              // if (isFirstTime) {\n              //   const kind = getDeviceKind(_data.deviceId);\n              //   if (kind?.kind !== currentDevice.kind?.kind) {\n              //     updateDevice({ ...currentDevice, kind }).then(() => {\n              //       setCurrentDevice({ ...currentDevice, kind });\n              //     });\n              //   }\n              //   isFirstTime = false;\n              // }\n            },\n            (err) => {\n              console.log(err);\n              isConnected && setConnected(false);\n            },\n          );\n        })\n        .catch((err) => {\n          console.log(err);\n          isConnected && setConnected(false);\n        });\n    }\n    return () => {\n      unsubscribe &&\n        unsubscribe(() => {\n          console.log('unsubscribe');\n          // deviceClient?.disconnect();\n        });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentDevice?._id, isConnected, forceRender]);\n\n  const renderTabContent = (tab) => {\n    switch (tab.value) {\n      case 'General':\n        return <GeneralTab data={data} device={currentDevice} />;\n      case 'Data':\n        return <HistoryTab device={currentDevice} />;\n      default:\n        return <div />;\n    }\n  };\n\n  const goBack = () => history.goBack();\n\n  const onUpdateDevice = (values) =>\n    updateDevice(values).then(() => {\n      setCurrentDevice(values);\n      setForceRender(!forceRender);\n    });\n\n  const onCloseModal = () => setModelOpen(false);\n\n  return (\n    <div className=\"mx-4 pb-4\">\n      <DeviceCardInfo\n        device={currentDevice}\n        isConnected\n        goBack={goBack}\n        onOpenModel={setModelOpen}\n      />\n\n      <HorizontalNavigation\n        onSelect={setSelectedTab}\n        selected={selectedTab}\n        options={TABS}\n      />\n\n      <div className=\"p-3 mt-4 sm:m-0 flex flex-col items-center rounded-md sm:rounded-t-none bg-white shadow \">\n        {renderTabContent(selectedTab)}\n      </div>\n\n      <DeviceModal\n        isOpen={isModalOpen}\n        initialValues={currentDevice}\n        onClose={onCloseModal}\n        onUpdate={onUpdateDevice}\n      />\n    </div>\n  );\n};\n\nexport default DeviceDetails;\n"],"sourceRoot":""}