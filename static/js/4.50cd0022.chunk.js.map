{"version":3,"sources":["services/devicesOptions.js","services/db.js","services/devicesService.js","hooks/useNotification.js","../node_modules/legoino-navigator-serial/src/Action.js","../node_modules/legoino-navigator-serial/src/Device.js","../node_modules/legoino-navigator-serial/src/util/checkSerial.js","../node_modules/legoino-navigator-serial/src/DevicesManager.js","../node_modules/legoino-navigator-serial/src/util/EventEmitter.js","services/localDeviceService.js","pages/LocalDevices/LocalDeviceModal.jsx","../node_modules/delay/index.js"],"names":["DEVICES_DB","DEFAULT_PORT","window","location","protocol","DEFAULT_PROTOCOL","DEVICE_PROTOCOLS","DEVICE_TYPE","broadcast","interactive","local","COMMANDS","help","settings","compactSettings","runExperiment","kinetic","reset","sleep","setParameter","label","value","DEVICE_KINDS","Object","keys","legoinoDeviceInformation","filter","key","kind","map","events","parameters","DB","dbName","connect","PouchDB","revs_limit","auto_compaction","getInfo","Promise","resolve","reject","db","info","then","res","close","catch","err","getAll","options","a","allDocs","include_docs","get","docId","Error","put","doc","update","_id","resGet","_rev","resPut","errPut","remove","resRm","errRm","destroy","throwDbError","error","additionalMsg","console","log","message","name","concatDeviceId","type","id","getDevices","startkey","endkey","rows","i","e","getDevice","deviceId","updateDevice","deviceData","deleteDevice","deviceID","addDevice","url","port","topic","username","password","addDevice2","device","useNotification","notificationContext","useNotificationCenter","addNotification","title","textColor","Icon","timeout","className","clsx","content","icon","addErrorNotification","SvgSolidExclamation","addWarningNotification","addInfoNotification","SvgOutlineExclamationCircle","Action","command","this","currentTimeout","undefined","answer","status","creationTimestamp","Date","now","promise","finishedPromise","finished","clearTimeout","setTimeout","startTimestamp","buffer","string","TextDecoder","decode","replace","endsWith","lines","split","length","line","join","Device","serialPort","baudRate","queue","action","interCommandDelay","defaultCommandExpirationDelay","encoder","TextEncoder","decoder","currentProcessQueue","runProcessQueue","shift","start","write","read","delay","open","reader","readable","getReader","writer","writable","getWriter","commandExpirationDelay","push","ensureProcessQueue","path","emit","event","data","dataArrayBuffer","encode","isFinished","appendAnswer","checkSerial","serial","DevicesManager","devices","portFilter","usbProductId","usbVendorId","requestPort","filters","updateDevices","getPorts","serialPorts","missingDevicesSerialPort","includes","ensureOpen","newDevice","scanInterval","callback","ready","isReady","queueLength","findDevice","callbacks","cb","cbs","forEach","devicesManager","navigator","localDeviceInfo","getDeviceKind","fromDeviceID","Number","requestDevices","getConnectedDevices","getDevicesList","connectedDevices","continuousUpdateDevices","interval","setInterval","isFunction","sendCommand","saveDataRow","toString","getSavedData","descending","d","getLastSavedData","limit","clearSavedData","validationSchema","Yup","shape","max","matches","required","kindOptions","option","LocalDeviceModal","initialValues","isOpen","onClose","onSave","_initialValues","onRequestClose","iconColor","animated","hasCloseButton","requestCloseOnBackdrop","requestCloseOnEsc","fluid","wrapperComponent","Form","wrapperProps","onSubmit","values","Header","Body","renderOption","o","getValue","inputClassName","Footer","createAbortError","createDelay","defaultClear","set","willResolve","ms","timeoutId","settle","rejectFn","signal","aborted","clear","signalListener","cleanup","removeEventListener","delayPromise","addEventListener","once","range","minimum","maximum","Math","floor","random","randomInteger","createWithTimers","module","exports","default"],"mappings":"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","file":"static/js/4.50cd0022.chunk.js","sourcesContent":["import legoinoDeviceInformation from 'legoino-device-information';\n\n// Default Values\n\nexport const DEVICES_DB = 'BIOREACTOR-UI_devices';\nexport const DEFAULT_PORT =\n  window.location.protocol === 'https:' ? '443' : '80'; // old '8080'\nexport const DEFAULT_PROTOCOL =\n  window.location.protocol === 'https:' ? 'wss' : 'http'; // old tcp\n\n// Static Values\n\nexport const DEVICE_PROTOCOLS = ['http', 'tcp', 'wss'];\n\nexport const DEVICE_TYPE = {\n  broadcast: 'broadcast',\n  interactive: 'interactive',\n  local: 'local',\n};\n\nexport const COMMANDS = {\n  help: 'h',\n  settings: 'u',\n  compactSettings: 'uc',\n  runExperiment: 'r',\n  kinetic: 'k',\n  reset: 'ur1234',\n  sleep: 'l',\n  setParameter: (label, value) => `${label}${value}`,\n};\n\nexport const DEVICE_KINDS = Object.keys(legoinoDeviceInformation)\n  .filter((key) => legoinoDeviceInformation[key].kind)\n  .map((key) => {\n    const { events, parameters, ...info } = legoinoDeviceInformation[key];\n    return info;\n  });\n\nexport const DEVICE_STATUS = {\n  opening: 1,\n  opened: 2,\n  closed: 3,\n  missing: 9,\n  error: 10,\n};\n","import PouchDB from 'pouchdb';\n\n// Wrap Db interface in case of switching to another Db other than \"PouchDb\"\n\nconst DB = (dbName) => {\n  const connect = () =>\n    new PouchDB(dbName, { revs_limit: 1, auto_compaction: true });\n\n  // DB operations to return\n\n  const getInfo = () =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      db.info()\n        .then((res) => db.close(() => resolve(res)))\n        .catch((err) => db.close(() => reject(err)));\n    });\n\n  const getAll = async (options) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      db.allDocs({\n        include_docs: true,\n        ...options,\n      })\n        .then((res) => db.close(() => resolve(res)))\n        .catch((err) => db.close(() => reject(err)));\n    });\n\n  const get = (docId) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      docId\n        ? db\n            .get(docId)\n            .then((res) => db.close(() => resolve(res)))\n            .catch((err) => db.close(() => reject(err)))\n        : reject(new Error('Doc fetch : docId is required'));\n    });\n\n  const put = (doc) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      !('_id' in doc)\n        ? reject(new Error('Doc create : _id is required in doc'))\n        : db\n            .put(doc)\n            .then((res) => db.close(() => resolve(res)))\n            .catch((err) => db.close(() => reject(err)));\n    });\n\n  const update = (doc) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      !('_id' in doc)\n        ? reject(new Error('Doc update : _id is required in doc'))\n        : db\n            .get(doc._id)\n            .then((resGet) =>\n              db\n                .put({ ...doc, _rev: resGet._rev })\n                .then((resPut) => db.close(() => resolve(resPut)))\n                .catch((errPut) => reject(errPut)),\n            )\n            .catch((err) => db.close(() => reject(err)));\n    });\n\n  const remove = (docId) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      docId\n        ? db\n            .get(docId)\n            .then((resGet) =>\n              db\n                .remove({ _id: docId, _rev: resGet._rev })\n                .then((resRm) => db.close(() => resolve(resRm)))\n                .catch((errRm) => reject(errRm)),\n            )\n            .catch((err) => db.close(() => reject(err)))\n        : reject(new Error('Doc remove : docId is required'));\n    });\n\n  const destroy = () => {\n    const db = connect();\n    return db.destroy();\n  };\n\n  return {\n    getInfo,\n    getAll,\n    get,\n    put,\n    update,\n    remove,\n    destroy,\n  };\n};\n\nexport default DB;\n","import DB from './db';\nimport { DEVICES_DB, DEFAULT_PORT, DEFAULT_PROTOCOL } from './devicesOptions';\n\n// Private Functions\n\nconst throwDbError = (error, additionalMsg) => {\n  console.log(error);\n  const err = new Error(`${additionalMsg} \\n${error?.message}`);\n  err.name = 'DATABASE_ERROR';\n  throw err;\n};\n\nexport const concatDeviceId = (type, kind, id) => `${type}_${kind}_${id}`;\n\nexport const getDevices = async (type) =>\n  DB(DEVICES_DB)\n    .getAll({ startkey: `${type}`, endkey: `${type}\\uffff` })\n    .then((res) => res.rows.map((i) => i.doc))\n    .catch((e) => throwDbError(e, `Get locally saved devices error`));\n\nexport const getDevicesByKind = async (type, kind) =>\n  DB(DEVICES_DB)\n    .getAll({ startkey: `${type}_${kind}`, endkey: `${type}_${kind}\\uffff` })\n    .then((res) => res.rows)\n    .catch((e) => throwDbError(e, `Get locally saved devices error`));\n\nexport const getDevice = async (deviceId) =>\n  DB(DEVICES_DB)\n    .get(deviceId)\n    .catch((e) => throwDbError(e, `Get device error`));\n\nexport const updateDevice = async (deviceData) =>\n  DB(DEVICES_DB)\n    .update(deviceData)\n    .catch((e) => throwDbError(e, `Update device error`));\n\nexport const deleteDevice = (deviceID) =>\n  DB(DEVICES_DB)\n    .remove(deviceID)\n    .catch((e) => throwDbError(e, `Delete device error`));\n\n// add device to devices DB\n\nexport const addDevice = (\n  type,\n  {\n    kind,\n    name,\n    url,\n    protocol = DEFAULT_PROTOCOL,\n    port = DEFAULT_PORT,\n    topic,\n    username,\n    password,\n  },\n) =>\n  DB(DEVICES_DB)\n    .put({\n      _id: `${type}_${kind}_${name}`,\n      name,\n      url,\n      protocol,\n      port,\n      topic,\n      kind,\n      username,\n      password,\n    })\n    .catch((e) =>\n      e.name === 'conflict'\n        ? throwDbError(e, `Device name must be unique`)\n        : throwDbError(e, `Insert device error`),\n    );\n\nexport const addDevice2 = (device) =>\n  DB(DEVICES_DB)\n    .put(device)\n    .catch((e) =>\n      e.name === 'conflict'\n        ? throwDbError(e, `Device name must be unique`)\n        : throwDbError(e, `Insert device error`),\n    );\n","import clsx from 'clsx';\nimport {\n  SvgOutlineExclamationCircle,\n  SvgSolidExclamation,\n  useNotificationCenter,\n} from '../components/tailwind-ui';\n\nexport default function useNotification() {\n  const notificationContext = useNotificationCenter();\n\n  const addNotification = (title, message, { textColor, Icon, timeout }) => {\n    notificationContext.addNotification(\n      {\n        title: (\n          <span className={clsx('text-base font-semibold', textColor + '500')}>\n            {title}\n          </span>\n        ),\n        content: <span className=\"text-sm text-neutral-500\">{message}</span>,\n        icon: <Icon className={clsx('w-8 h-8', textColor + '600')} />,\n      },\n      timeout,\n    );\n  };\n\n  const addInfoNotification = (title, message, timeout = 1000) => {\n    addNotification(title, message, {\n      textColor: 'text-primary-',\n      Icon: SvgOutlineExclamationCircle,\n      timeout: timeout,\n    });\n  };\n\n  const addWarningNotification = (title, message, timeout = 2500) => {\n    addNotification(title, message, {\n      textColor: 'text-warning-',\n      Icon: SvgSolidExclamation,\n      timeout: timeout,\n    });\n  };\n\n  const addErrorNotification = (title, message, timeout = 5000) => {\n    addNotification(title, message, {\n      textColor: 'text-danger-',\n      Icon: SvgSolidExclamation,\n      timeout: timeout,\n    });\n  };\n\n  return { addErrorNotification, addWarningNotification, addInfoNotification };\n}\n","const STATUS_CREATED = 0;\nconst STATUS_COMMAND_SENT = 1;\nconst STATUS_ANSWER_PARTIALLY_RECEIVED = 2;\nconst STATUS_ANSWER_RECEIVED = 3;\nconst STATUS_RESOLVED = 4;\nconst STATUS_ERROR = 5;\n\nexport class Action {\n  constructor(command, options = {}) {\n    this.currentTimeout = undefined;\n    this.command = command;\n    this.timeout = options.timeout === undefined ? 1000 : options.timeout;\n    this.answer = '';\n    this.status = STATUS_CREATED;\n    this.creationTimestamp = Date.now();\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n    this.finishedPromise = new Promise((resolve) => {\n      this.finished = resolve;\n    });\n  }\n\n  isFinished() {\n    return this.status === STATUS_RESOLVED || this.status === STATUS_ERROR;\n  }\n\n  setTimeout() {\n    if (this.currentTimeout) {\n      clearTimeout(this.currentTimeout);\n    }\n    this.currentTimeout = setTimeout(() => {\n      if (this.status === STATUS_RESOLVED || this.status === STATUS_ERROR) {\n        return;\n      }\n      this.status = STATUS_ERROR;\n      this.reject('Timeout');\n      this.finished();\n    }, this.timeout);\n  }\n\n  start() {\n    this.startTimestamp = Date.now();\n    this.status = STATUS_COMMAND_SENT;\n    this.setTimeout();\n  }\n\n  appendAnswer(buffer) {\n    let string = new TextDecoder().decode(buffer);\n    this.status = STATUS_ANSWER_PARTIALLY_RECEIVED;\n    this.answer += string;\n    if (!this.answer.replace(/\\r/g, '').endsWith('\\n\\n')) return;\n    let lines = this.answer.split(/\\r?\\n/);\n    if (lines.length > 0 && lines[lines.length - 1] === '') {\n      lines = lines.filter((line) => line);\n      this.status = STATUS_ANSWER_RECEIVED;\n      this.resolve(lines.join('\\n'));\n      this.finished();\n      this.status = STATUS_RESOLVED;\n    }\n  }\n}\n","/* eslint-disable no-await-in-loop */\n\nimport delay from 'delay';\n\nimport { Action } from './Action';\n\nconst debug = () => {};\n\nexport const STATUS_OPENING = 1;\nexport const STATUS_OPENED = 2;\nexport const STATUS_CLOSED = 3;\nexport const STATUS_MISSING = 9;\nexport const STATUS_ERROR = 10;\n\nexport class Device {\n  constructor(serialPort, options = {}) {\n    this.status = STATUS_OPENING;\n    this.id = undefined;\n    this.serialPort = serialPort;\n    this.baudRate = options.baudRate || 115200;\n    this.queue = [];\n    this.action = undefined;\n    this.interCommandDelay = options.interCommandDelay;\n    this.defaultCommandExpirationDelay = 2000;\n    this.encoder = new TextEncoder();\n    this.decoder = new TextDecoder();\n  }\n\n  isReady() {\n    return this.status === STATUS_OPENED;\n  }\n\n  /** restart process queue if the previous one was finished */\n  async ensureProcessQueue() {\n    debug('ensureProcessQueue');\n    if (!this.currentProcessQueue) {\n      this.currentProcessQueue = this.runProcessQueue();\n    }\n    return this.currentProcessQueue;\n  }\n\n  async runProcessQueue() {\n    while (this.queue.length > 0) {\n      this.action = this.queue.shift();\n\n      if (this.action) {\n        this.action.start();\n        await this.write(`${this.action.command}\\n`);\n        await this.read(this.action);\n        await this.action.finishedPromise;\n        this.action = undefined;\n        await delay(this.interCommandDelay);\n      }\n    }\n    this.currentProcessQueue = undefined;\n  }\n\n  async getStatus() {\n    return {\n      value: this.status,\n    };\n  }\n\n  async ensureOpen() {\n    debug(`Ensure open`);\n    if (this.status !== STATUS_OPENED) {\n      return this.open();\n    }\n  }\n\n  async open() {\n    debug(`Opening`);\n    await this.serialPort.open({\n      baudRate: this.baudRate,\n    });\n    this.reader = this.serialPort.readable.getReader();\n    this.writer = this.serialPort.writable.getWriter();\n    this.id = await this.get('uq');\n    this.status = STATUS_OPENED;\n  }\n\n  /*\n   We need to add this command in the queue and wait it resolves or rejects\n  */\n  async get(command, options = {}) {\n    const {\n      commandExpirationDelay = this.defaultCommandExpirationDelay,\n    } = options;\n\n    const action = new Action(command, {\n      timeout: commandExpirationDelay,\n    });\n\n    this.queue.push(action);\n    this.ensureProcessQueue();\n    return action.promise;\n  }\n\n  error(error) {\n    debug(`Error ${this.port.path}`);\n    debug(error);\n    this.status = STATUS_ERROR;\n    this.emit('adapter', {\n      event: 'Error',\n      value: error,\n    });\n  }\n\n  close() {\n    debug(`Close`);\n    this.status = STATUS_CLOSED;\n  }\n\n  async write(data) {\n    const dataArrayBuffer = this.encoder.encode(`${data}\\n`);\n    return this.writer.write(dataArrayBuffer);\n  }\n\n  async read(action) {\n    while (!action.isFinished()) {\n      action.appendAnswer((await this.reader.read()).value);\n      delay(10);\n    }\n  }\n}\n","/* eslint-disable no-console */\nexport default function checkSerial(serial) {\n  if (!serial) {\n    console.error(\n      \"Web serial doesn't seem to be enabled in your browser. Try enabling it by visiting:\",\n    );\n    console.error('chrome://flags/#enable-experimental-web-platform-features');\n    console.error('opera://flags/#enable-experimental-web-platform-features');\n    console.error('edge://flags/#enable-experimental-web-platform-features');\n  }\n}\n","/* eslint-disable no-await-in-loop */\nimport delay from 'delay';\n\nimport { Device, STATUS_MISSING, STATUS_OPENED, STATUS_CLOSED } from './Device';\nimport EventEmitter from './util/EventEmitter';\nimport checkSerial from './util/checkSerial';\n\nconst debug = () => {};\n\n/**\n * Class creating a new serial bridge to manage serial ports.\n * @param {object} [options={}]\n * @param {function} [options.portFilter=[{usbProductId:37384, usbVendorId:6991}]] Filter the serial ports to address.\n * @param {number} [options.baudRate=57200] Baud rate\n * @param {number} [options.interCommandDelay=100] Time to wait between commands in [ms]\n * @param {number} [options.defaultCommandExpirationDelay=100] Time to wait for answer before timeout\n */\nexport class DevicesManager extends EventEmitter {\n  constructor(serial, options = {}) {\n    super();\n    checkSerial(serial);\n    this.serial = serial;\n    this.devices = [];\n    this.portFilter =\n      options.portFilter === undefined\n        ? [{ usbProductId: 37384, usbVendorId: 6991 }]\n        : options.portFilter;\n    this.baudRate = options.baudRate || 115200;\n    this.interCommandDelay =\n      options.interCommandDelay === undefined ? 100 : options.interCommandDelay;\n    this.defaultCommandExpirationDelay =\n      options.defaultCommandExpirationDelay === undefined\n        ? 100\n        : options.defaultCommandExpirationDelay;\n  }\n\n  /**\n   * By calling this method from a click you give users the possibility to allow access to some devices\n   */\n  async requestDevices() {\n    await this.serial.requestPort({\n      filters: this.portFilter,\n    });\n    return this.updateDevices();\n  }\n\n  /**\n   * Update this.devices\n   */\n  async updateDevices() {\n    const serialPorts = await this.serial.getPorts();\n\n    debug('updateDevices');\n\n    const missingDevicesSerialPort = this.devices.filter(\n      (device) => !serialPorts.includes(device.serialPort),\n    );\n    for (let device of missingDevicesSerialPort) {\n      if (device.status !== STATUS_MISSING && device.status !== STATUS_CLOSED) {\n        device.close();\n      }\n      device.status = STATUS_MISSING;\n    }\n\n    for (let serialPort of serialPorts) {\n      let device = this.devices.filter(\n        (device) => device.serialPort === serialPort,\n      )[0];\n      if (device) {\n        await device.ensureOpen();\n      } else {\n        let newDevice = new Device(serialPort, {\n          baudRate: this.baudRate,\n          interCommandDelay: this.interCommandDelay,\n          defaultCommandExpirationDelay: this.defaultCommandExpirationDelay,\n        });\n        this.devices.push(newDevice);\n        await newDevice.open();\n      }\n    }\n    // check if there are any new ports\n  }\n\n  /**\n   * Update this.devices every `scanInterval` [ms].\n   * @param {object} [options={}]\n   * @param {number} [options.scanInterval=1000] Delay between `updateDevices()` calls\n   * @param {number} [options.callback] Callback to execute on each update\n   */\n  async continuousUpdateDevices(options = {}) {\n    const { scanInterval = 1000, callback } = options;\n    while (true) {\n      await this.updateDevices();\n      if (callback) {\n        callback(this.devices);\n      }\n      await delay(scanInterval);\n    }\n  }\n\n  /**\n   * Returns this.devices\n   * @param {object} [options={}]\n   * @param {bool} [options.ready=false] If `true` returns only currently connected device. If `false` returns all devices ever connected.\n   * @returns {Array<object>}\n   */\n  getDevicesList(options = {}) {\n    let { ready = false } = options;\n    return this.devices\n      .filter((device) => !ready || device.isReady())\n      .map((device) => ({\n        status: device.status,\n        id: device.id,\n        queueLength: device.queue.length,\n      }));\n  }\n\n  // private function\n  findDevice(id) {\n    if (id === undefined) return undefined;\n    let devices = this.devices.filter(\n      (device) => device.id === id && device.status === STATUS_OPENED,\n    );\n    if (devices.length === 0) return undefined;\n    if (devices.length > 1) {\n      throw new Error(`Many devices have the same id: ${id}`);\n    }\n    return devices[0];\n  }\n\n  /**\n   * Send a serial command to a device.\n   * @param {number} id ID of the device\n   * @param {string} command Command to send\n   */\n  async sendCommand(id, command) {\n    const device = this.findDevice(id);\n    if (!device) {\n      throw Error(`Device ${id} not found`);\n    }\n    if (device && device.isReady()) return device.get(command);\n    throw Error(`Device ${id} not ready: ${device.port.path}`);\n  }\n}\n","export default class EventEmitter {\n  constructor() {\n    this.callbacks = {};\n  }\n\n  on(event, cb) {\n    if (!this.callbacks[event]) this.callbacks[event] = [];\n    this.callbacks[event].push(cb);\n  }\n\n  emit(event, data) {\n    let cbs = this.callbacks[event];\n    if (cbs) {\n      cbs.forEach((cb) => cb(data));\n    }\n  }\n}\n","import legoinoDeviceInformation from 'legoino-device-information';\nimport DB from './db';\n\nimport { isFunction } from 'lodash';\nimport { DevicesManager } from 'legoino-navigator-serial';\nimport { DEVICE_TYPE } from './devicesOptions';\nimport { concatDeviceId } from './devicesService';\n\nconst SCAN_INTERVAL = 1000;\n\nconst devicesManager = new DevicesManager(navigator.serial);\n\n/**\n * return device information to be stored in DB\n */\nexport const localDeviceInfo = ({ id, name }) => {\n  const kind = getDeviceKind(id);\n  return {\n    _id: concatDeviceId(DEVICE_TYPE.local, kind?.kind, id),\n    id: id,\n    name: name ? name : `${kind?.kind}-${id}`,\n    kind: kind,\n  };\n};\n\n/**\n * Get device Kind from its ID\n */\nexport const getDeviceKind = (deviceId) => {\n  try {\n    if (deviceId) {\n      const selectedDeviceType = legoinoDeviceInformation.fromDeviceID(\n        Number(deviceId),\n      );\n      return selectedDeviceType;\n    }\n  } catch (e) {\n    console.log(e);\n    return undefined;\n  }\n};\n\n/**\n * By calling this method from a click you give users the possibility to allow access to some devices\n */\nexport const requestDevices = async () => {\n  await devicesManager.requestDevices();\n};\n\n/**\n * @returns {Array<object>}\n */\nexport const getConnectedDevices = async () => {\n  await devicesManager.updateDevices();\n  const connectedDevices = await devicesManager.getDevicesList({\n    ready: true, // If ready==`true` returns only currently connected device, else returns all devices ever connected.\n  });\n  return connectedDevices;\n};\n\n/**\n * Update updated devices list every `scanInterval` [ms].\n * @param {Function} callback(devicesList): Callback to execute on each update\n * @param {number} scanInterval Delay between calls\n */\nexport const continuousUpdateDevices = async (\n  callback,\n  scanInterval = SCAN_INTERVAL,\n) => {\n  const interval = setInterval(async () => {\n    const connectedDevices = await getConnectedDevices();\n    isFunction(callback) && callback(connectedDevices);\n  }, scanInterval);\n  return interval;\n};\n\n/**\n * Send a serial command to a device.\n * @param {number} id ID of the device\n * @param {string} command Command to send\n * @returns ??????\n */\nexport const sendCommand = async (deviceId, command) => {\n  return await devicesManager.sendCommand(deviceId, command);\n};\n\nexport const saveDataRow = (deviceId, data) => {\n  const dbClient = DB(deviceId);\n  return dbClient.put({ _id: Date.now().toString(), ...data });\n};\n\nexport const getSavedData = (deviceId) => {\n  const dbClient = DB(deviceId);\n  return dbClient\n    .getAll({\n      descending: true,\n    })\n    .then((res) => res.rows.map((d) => d.doc));\n};\n\nexport const getLastSavedData = (deviceId) => {\n  const dbClient = DB(deviceId);\n  return dbClient\n    .getAll({\n      descending: true,\n      limit: 1,\n    })\n    .then((res) => res.rows.map((d) => d.doc));\n};\n\nexport const clearSavedData = (deviceId) => {\n  const dbClient = DB(deviceId);\n  return dbClient.destroy();\n};\n","import React from 'react';\nimport * as Yup from 'yup';\nimport {\n  Modal,\n  Form,\n  SvgOutlinePlus,\n  SelectField,\n  FormError,\n  SubmitButton,\n  InputField,\n} from '../../components/tailwind-ui';\nimport { DEVICE_KINDS } from '../../services/devicesOptions';\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .max(50, 'Name too Long!')\n    .matches(\n      /^[A-z0-9_-]*$/,\n      'Field supports only : letters / numbers / _ / - ',\n    )\n    .required('Required'),\n});\n\nconst kindOptions = DEVICE_KINDS.map((option) => ({\n  ...option,\n  label: option.name,\n  value: option.kind,\n}));\n\nconst LocalDeviceModal = ({ initialValues, isOpen, onClose, onSave }) => {\n  const _initialValues = {\n    name: initialValues?.name,\n    kind: initialValues?.kind?.kind,\n  };\n\n  const onSubmit = (values) => {\n    const device = {\n      ...initialValues,\n      name: values.name,\n      kind: DEVICE_KINDS.filter((option) => option.kind === values.kind)[0],\n    };\n    onSave(device);\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={onClose}\n      icon={<SvgOutlinePlus />}\n      iconColor=\"neutral\"\n      animated\n      hasCloseButton\n      requestCloseOnBackdrop\n      requestCloseOnEsc\n      fluid\n      wrapperComponent={Form}\n      wrapperProps={{\n        initialValues: _initialValues,\n        validationSchema,\n        onSubmit: onSubmit,\n        className: 'h-full',\n      }}\n    >\n      <Modal.Header>Edit device information</Modal.Header>\n      <Modal.Body>\n        <div className=\"w-full mr-32 pr-16 mt-4 mb-20 items-center\">\n          <SelectField\n            name=\"kind\"\n            id=\"kind\"\n            label=\"Kind\"\n            options={kindOptions}\n            renderOption={(o) => `${o.label}`}\n            getValue={(o) => o.value}\n            required\n            className=\"mt-4 flex-1\"\n          ></SelectField>\n          <InputField\n            name=\"name\"\n            id=\"name\"\n            label=\"Name\"\n            required\n            className=\"mt-8 flex-1\"\n            inputClassName=\"w-full\"\n          ></InputField>\n        </div>\n        <FormError />\n      </Modal.Body>\n      <Modal.Footer>\n        <SubmitButton className=\"w-full sm:w-max \">Save</SubmitButton>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default LocalDeviceModal;\n","'use strict';\n\n// From https://github.com/sindresorhus/random-int/blob/c37741b56f76b9160b0b63dae4e9c64875128146/index.js#L13-L15\nconst randomInteger = (minimum, maximum) => Math.floor((Math.random() * (maximum - minimum + 1)) + minimum);\n\nconst createAbortError = () => {\n\tconst error = new Error('Delay aborted');\n\terror.name = 'AbortError';\n\treturn error;\n};\n\nconst createDelay = ({clearTimeout: defaultClear, setTimeout: set, willResolve}) => (ms, {value, signal} = {}) => {\n\tif (signal && signal.aborted) {\n\t\treturn Promise.reject(createAbortError());\n\t}\n\n\tlet timeoutId;\n\tlet settle;\n\tlet rejectFn;\n\tconst clear = defaultClear || clearTimeout;\n\n\tconst signalListener = () => {\n\t\tclear(timeoutId);\n\t\trejectFn(createAbortError());\n\t};\n\n\tconst cleanup = () => {\n\t\tif (signal) {\n\t\t\tsignal.removeEventListener('abort', signalListener);\n\t\t}\n\t};\n\n\tconst delayPromise = new Promise((resolve, reject) => {\n\t\tsettle = () => {\n\t\t\tcleanup();\n\t\t\tif (willResolve) {\n\t\t\t\tresolve(value);\n\t\t\t} else {\n\t\t\t\treject(value);\n\t\t\t}\n\t\t};\n\n\t\trejectFn = reject;\n\t\ttimeoutId = (set || setTimeout)(settle, ms);\n\t});\n\n\tif (signal) {\n\t\tsignal.addEventListener('abort', signalListener, {once: true});\n\t}\n\n\tdelayPromise.clear = () => {\n\t\tclear(timeoutId);\n\t\ttimeoutId = null;\n\t\tsettle();\n\t};\n\n\treturn delayPromise;\n};\n\nconst delay = createDelay({willResolve: true});\ndelay.reject = createDelay({willResolve: false});\ndelay.range = (minimum, maximum, options) => delay(randomInteger(minimum, maximum), options);\ndelay.createWithTimers = ({clearTimeout, setTimeout}) => {\n\tconst delay = createDelay({clearTimeout, setTimeout, willResolve: true});\n\tdelay.reject = createDelay({clearTimeout, setTimeout, willResolve: false});\n\treturn delay;\n};\n\nmodule.exports = delay;\n// TODO: Remove this for the next major release\nmodule.exports.default = delay;\n"],"sourceRoot":""}