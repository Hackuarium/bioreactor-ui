{"version":3,"sources":["../node_modules/median-quickselect/lib/median-quickselect.min.js","../node_modules/spline-interpolator/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/nonIterableRest.js","../node_modules/spline-interpolator/node_modules/d3-array/build/d3-array.js","../node_modules/fft.js/lib/fft.js","../node_modules/assign-deep/index.js","../node_modules/assign-symbols/index.js","../node_modules/is-any-array/src/index.js","../node_modules/ml-spectra-processing/src/x/xFindClosestIndex.js","../node_modules/ml-spectra-processing/src/x/xGetFromToIndex.js","../node_modules/ml-array-min/lib-es6/index.js","../node_modules/ml-array-max/lib-es6/index.js","../node_modules/ml-peak-shape-generator/src/util/constants.js","../node_modules/ml-peak-shape-generator/src/util/erfinv.js","../node_modules/ml-peak-shape-generator/src/classes/Gaussian.js","../node_modules/ml-peak-shape-generator/src/classes/Lorentzian.js","../node_modules/ml-peak-shape-generator/src/classes/PseudoVoigt.js","../node_modules/ml-peak-shape-generator/src/classes/Gaussian2D.js","../node_modules/ml-array-rescale/lib-es6/index.js","../node_modules/ml-matrix/src/inspect.js","../node_modules/ml-matrix/src/util.js","../node_modules/ml-matrix/src/stat.js","../node_modules/ml-matrix/src/matrix.js","../node_modules/ml-matrix/src/mathOperations.js"],"names":["a","d","e","f","length","g","h","i","j","c","b","_ref","module","exports","window","median","bisectRight","require","smoothingSpline","x","y","sigma","lambda","n","Array","r","p","q","u","v","w","params","map","pop","mu","quincunx","SplineInterpolator","xIn","yIn","indices","_","sort","this","Math","min","max","step","xStart","xStop","delta","maxValue","Infinity","interpolate","minValue","nInterval","domain","vals","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","arr","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","TypeError","ascending","NaN","bisector","compare","ascendingComparator","left","lo","hi","mid","right","ascendingBisect","bisectLeft","descending","number$1","variance","array","m","s","isNaN","deviation","sqrt","extent","constant","identity","range","start","stop","arguments","ceil","e10","e5","e2","ticks","count","tickStep","floor","step0","abs","step1","pow","log","LN10","error","sturges","values","LN2","number","histogram","threshold","data","xz","x0","x1","tz","shift","bin","bins","thresholds","prototype","call","quantile","freedmanDiaconis","scott","mean","numbers","merge","arrays","merged","pairs","permute","indexes","permutes","scan","xi","xj","shuffle","i0","i1","t","random","sum","transpose","matrix","row","zip","version","bisect","thresholdFreedmanDiaconis","thresholdScott","thresholdSturges","factory","FFT","size","Error","_csize","table","angle","PI","cos","sin","power","_width","_bitrev","revShift","_out","_data","_inv","fromComplexArray","complex","storage","res","createComplexArray","toComplexArray","input","completeSpectrum","spectrum","half","transform","out","_transform4","realTransform","_realTransform4","inverseTransform","outOff","len","bitrev","off","_singleTransform2","_singleTransform4","inv","quarterLen","limit","k","A","B","C","D","Ar","Ai","Br","Bi","Cr","Ci","Dr","Di","MAr","MAi","tableBr","tableBi","MBr","MBi","tableCr","tableCi","MCr","MCi","tableDr","tableDi","MDr","MDi","T0r","T0i","T1r","T1i","T2r","T2i","T3r","T3i","FAr","FAi","FCr","FCi","FBr","FBi","FDr","FDi","evenR","evenI","oddR","oddI","leftR","leftI","rightR","rightI","step2","step3","_singleRealTransform2","_singleRealTransform4","halfLen","hquarterLen","SFAr","SFAi","SFBr","SFBi","SA","SB","toString","assignSymbols","isValidKey","key","assign","target","args","isPrimitive","isObject","keys","val","isEnumerable","propertyIsEnumerable","getSymbols","getOwnPropertySymbols","arg","names","isAnyArray","object","endsWith","xFindClosestIndex","low","high","middle","xGetFromToIndex","options","fromIndex","toIndex","from","to","_options$fromIndex","_options$toIndex","Number","isInteger","GAUSSIAN_EXP_FACTOR","ROOT_PI_OVER_LN2","ROOT_THREE","ROOT_2LN2","ROOT_2LN2_MINUS_ONE","erfinv","ln1MinusXSqrd","lnEtcBy2Plus2","firstSqrt","Gaussian","fwhm","sd","widthToFWHM","height","factor","getFactor","center","Float64Array","fct","area","getArea","width","fwhmToWidth","exp","Lorentzian","squareFWHM","tan","PseudoVoigt","axis","Gaussian2D","globalFWHM","xLength","xFactor","yLength","yFactor","xCenter","yCenter","volume","getVolume","axisLabel","axisName","toLowerCase","xFWHM","yFWHM","rescale","output","currentMin","currentMax","RangeError","_options$min","autoMinMax","_options$max","indent","repeat","indentData","inspectMatrixWithOptions","maxRows","maxColumns","maxNumSize","constructor","name","inspectData","rows","columns","maxI","maxJ","result","line","formatNumber","get","join","num","numStr","String","padEnd","precise","toPrecision","exponential","toExponential","eIndex","indexOf","slice","checkRowIndex","index","outer","checkColumnIndex","checkRowVector","vector","to1DArray","checkColumnVector","checkRowIndices","rowIndices","some","checkColumnIndices","columnIndices","checkRange","startRow","endRow","startColumn","endColumn","checkNumber","newArray","checkNonEmpty","isEmpty","varianceByRow","unbiased","cols","sum1","sum2","varianceByColumn","varianceAll","centerByRow","set","centerByColumn","centerAll","getScaleByRow","scale","scaleByRow","getScaleByColumn","scaleByColumn","getScaleAll","divider","scaleAll","AbstractMatrix","callback","copy","to2DArray","isSquare","previousColumn","isEchelonForm","checked","isReducedEchelonForm","clone","iMax","swapRows","tmp","echelonForm","maxRow","pivot","Matrix","setSubMatrix","mulS","rowVector","getRow","row1","row2","temp","column","columnVector","getColumn","column1","column2","idx","diag","type","vector2","isMatrix","vector1","dot","other","checkMatrix","Bcolj","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","c00","c01","c10","c11","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m6","m7","m8","m9","m12","m13","m14","m15","m16","m17","m18","c02","c12","c20","c21","c22","r1","c1","r2","c2","embed","mat","resultat","zeros","console","warn","blockMult","mmul","halfRows","parseInt","halfCols","subMatrix","add","sub","isFinite","newMatrix","setRow","setColumn","first","last","l","AxI","kroneckerProduct","eye","IxB","compareFunction","compareNumbers","checkIndices","rowIndex","columnIndex","trace","by","sumByRow","sumByColumn","sumAll","productByRow","productByColumn","productAll","newRows","newColumns","newData","fill","interval","round","matrix1","matrix2","klass","for","rand","randomInt","randInt","diagonal","negate","neg","tensorProduct","nRows","nColumns","arrayData","splice","newRow","addS","addM","subS","subM","subtract","subtractS","subtractM","mul","mulM","multiply","multiplyS","multiplyM","div","divS","divM","divide","divideS","divideM","mod","modS","modM","modulus","modulusS","modulusM","and","andS","andM","or","orS","orM","xor","xorS","xorM","leftShift","leftShiftS","leftShiftM","signPropagatingRightShift","signPropagatingRightShiftS","signPropagatingRightShiftM","rightShift","rightShiftS","rightShiftM","zeroFillRightShift","zeroFillRightShiftS","zeroFillRightShiftM","not","acos","acosh","asin","asinh","atan","atanh","cbrt","clz32","cosh","expm1","fround","log1p","log10","log2","sign","sinh","tanh","trunc","arg0","powS","powM"],"mappings":";0GAAA,WAAY,SAASA,EAAEC,GAAG,IAAI,IAAIC,EAAE,EAAEC,EAAEF,EAAEG,OAAO,EAAEC,OAAE,EAAOC,OAAE,EAAOC,OAAE,EAAOC,EAAEC,EAAEP,EAAEC,KAAO,CAAC,GAAGA,GAAGD,EAAE,OAAOD,EAAEO,GAAG,GAAGL,GAAGD,EAAE,EAAE,OAAOD,EAAEC,GAAGD,EAAEE,IAAIO,EAAET,EAAEC,EAAEC,GAAGF,EAAEO,GAAG,IAAaP,EAATI,EAAEI,EAAEP,EAAEC,IAAQF,EAAEE,IAAIO,EAAET,EAAEI,EAAEF,GAAGF,EAAEC,GAAGD,EAAEE,IAAIO,EAAET,EAAEC,EAAEC,GAAGF,EAAEI,GAAGJ,EAAEC,IAAIQ,EAAET,EAAEI,EAAEH,GAAGQ,EAAET,EAAEI,EAAEH,EAAE,GAAGI,EAAEJ,EAAE,EAAEK,EAAEJ,IAAM,CAAC,GAAGG,UAAUL,EAAEC,GAAGD,EAAEK,IAAI,GAAGC,UAAUN,EAAEM,GAAGN,EAAEC,IAAI,GAAGK,EAAED,EAAE,MAAMI,EAAET,EAAEK,EAAEC,GAAGG,EAAET,EAAEC,EAAEK,GAAGA,GAAGC,IAAIN,EAAEI,GAAGC,GAAGC,IAAIL,EAAEI,EAAE,IAAI,IAAIG,EAAE,SAAWT,EAAEC,EAAEC,GAAG,IAAIQ,EAAK,OAAOA,EAAK,CAACV,EAAEE,GAAGF,EAAEC,IAAID,EAAEC,GAAGS,EAAK,GAAGV,EAAEE,GAAGQ,EAAK,GAAGA,GAAMF,EAAE,SAAWR,EAAEC,GAAG,UAAUD,EAAEC,GAAG,IAAgCU,EAAOC,QAAQD,EAAOC,QAAQb,EAAEc,OAAOC,OAAOf,EAA/iB,I,mDCAOgB,EAAeC,EAAQ,KAAvBD,YA6BDE,EAAkB,SAACC,EAAGC,EAAGC,EAAOC,GACpC,IAAMC,EAAIJ,EAAEf,OAAS,EACfE,EAAI,IAAIkB,MAAMD,EAAI,GAClBE,EAAI,IAAID,MAAMD,EAAI,GAClBpB,EAAI,IAAIqB,MAAMD,EAAI,GAClBG,EAAI,IAAIF,MAAMD,EAAI,GAClBI,EAAI,IAAIH,MAAMD,EAAI,GAClBK,EAAI,IAAIJ,MAAMD,EAAI,GAClBM,EAAI,IAAIL,MAAMD,EAAI,GAClBO,EAAI,IAAIN,MAAMD,EAAI,GAClBQ,EAASZ,EAAEa,KAAI,iBAAM,CAAC,EAAG,EAAG,EAAG,MACrCD,EAAOE,MAGP,IADA,IAAMC,EAAK,GAAK,EAAIZ,IAAW,EAAIA,GAC1Bf,EAAI,EAAGA,EAAIgB,IAAKhB,EACvBD,EAAEC,GAAKY,EAAEZ,EAAI,GAAKY,EAAEZ,GACpBkB,EAAElB,GAAK,EAAID,EAAEC,GAEfoB,EAAE,GAAK,EACP,IAAK,IAAIpB,EAAI,EAAGA,EAAIgB,IAAKhB,EACvBJ,EAAEI,KAAOkB,EAAElB,EAAI,GAAKkB,EAAElB,IACtBmB,EAAEnB,GAAK,GAAKY,EAAEZ,EAAI,GAAKY,EAAEZ,EAAI,IAC7BoB,EAAEpB,GAAK,GAAKa,EAAEb,EAAI,GAAKa,EAAEb,IAAMD,EAAEC,GAAK,GAAKa,EAAEb,GAAKa,EAAEb,EAAI,IAAMD,EAAEC,EAAI,GAEtEoB,EAAEJ,GAAK,EAEP,IAAK,IAAIhB,EAAI,EAAGA,EAAIgB,IAAKhB,EACvBqB,EAAErB,GAAKkB,EAAElB,EAAI,GAAKkB,EAAElB,EAAI,GAAKc,EAAMd,EAAI,GAAKJ,EAAEI,GAAKJ,EAAEI,GAAKc,EAAMd,GAAKkB,EAAElB,GAAKkB,EAAElB,GAAKc,EAAMd,EAAI,GAC7FqB,EAAErB,GAAK2B,EAAKN,EAAErB,GAAKmB,EAAEnB,GAEvB,IAAK,IAAIA,EAAI,EAAGA,EAAIgB,EAAI,IAAKhB,EAC3BsB,EAAEtB,GAAKJ,EAAEI,GAAKkB,EAAElB,GAAKc,EAAMd,GAAKkB,EAAElB,GAAKJ,EAAEI,EAAI,GAAKc,EAAMd,EAAI,GAC5DsB,EAAEtB,GAAK2B,EAAKL,EAAEtB,GAAKD,EAAEC,GAEvB,IAAK,IAAIA,EAAI,EAAGA,EAAIgB,EAAI,IAAKhB,EAC3BuB,EAAEvB,GAAK2B,EAAKT,EAAElB,GAAKkB,EAAElB,EAAI,GAAKc,EAAMd,EAAI,IA9D3B,SAACqB,EAAGC,EAAGC,EAAGH,GACzB,IAAMJ,EAAIK,EAAExB,OAAS,EAErBwB,EAAE,GAAK,EACPC,EAAE,GAAK,EACPC,EAAE,GAAK,EACPD,EAAE,GAAKA,EAAE,GAAKD,EAAE,GAChBE,EAAE,GAAKA,EAAE,GAAKF,EAAE,GAChB,IAAK,IAAIrB,EAAI,EAAGA,EAAIgB,IAAKhB,EACvBqB,EAAErB,GAAKqB,EAAErB,GAAKqB,EAAErB,EAAI,GAAKuB,EAAEvB,EAAI,GAAKuB,EAAEvB,EAAI,GAAKqB,EAAErB,EAAI,GAAKsB,EAAEtB,EAAI,GAAKsB,EAAEtB,EAAI,GAC3EsB,EAAEtB,IAAMsB,EAAEtB,GAAKqB,EAAErB,EAAI,GAAKsB,EAAEtB,EAAI,GAAKuB,EAAEvB,EAAI,IAAMqB,EAAErB,GACnDuB,EAAEvB,GAAKuB,EAAEvB,GAAKqB,EAAErB,GAGlB,IAAK,IAAIA,EAAI,EAAGA,EAAIgB,IAAKhB,EACvBoB,EAAEpB,GAAKoB,EAAEpB,GAAKsB,EAAEtB,EAAI,GAAKoB,EAAEpB,EAAI,GAAKuB,EAAEvB,EAAI,GAAKoB,EAAEpB,EAAI,GAEvD,IAAK,IAAIA,EAAI,EAAGA,EAAIgB,IAAKhB,EACvBoB,EAAEpB,GAAKoB,EAAEpB,GAAKqB,EAAErB,GAGlBoB,EAAEJ,EAAI,GAAKI,EAAEJ,EAAI,GAAKM,EAAEN,EAAI,GAAKI,EAAEJ,EAAI,GACvC,IAAK,IAAIhB,EAAIgB,EAAI,EAAGhB,EAAI,IAAKA,EAC3BoB,EAAEpB,GAAKoB,EAAEpB,GAAKsB,EAAEtB,GAAKoB,EAAEpB,EAAI,GAAKuB,EAAEvB,GAAKoB,EAAEpB,EAAI,GA0C/C4B,CAASP,EAAGC,EAAGC,EAAGH,GAElBI,EAAO,GAAG,GAAKX,EAAE,GAAKc,EAAKT,EAAE,GAAKE,EAAE,GAAKN,EAAM,GAC/CU,EAAO,GAAG,GAAKX,EAAE,GAAKc,GAAM/B,EAAE,GAAKwB,EAAE,GAAKF,EAAE,GAAKE,EAAE,IAAMN,EAAM,GAC/DU,EAAO,GAAG,GAAKJ,EAAE,IAAM,EAAIrB,EAAE,IAC7ByB,EAAO,GAAG,GAAK,EACfA,EAAO,GAAG,IAAMA,EAAO,GAAG,GAAKA,EAAO,GAAG,IAAMzB,EAAE,GAAKqB,EAAE,GAAKrB,EAAE,GAAK,EACpEmB,EAAE,GAAK,EACP,IAAK,IAAIlB,EAAI,EAAGA,EAAIgB,IAAKhB,EACvBwB,EAAOxB,GAAG,IAAMoB,EAAEpB,EAAI,GAAKoB,EAAEpB,KAAO,EAAID,EAAEC,IAC1CwB,EAAOxB,GAAG,GAAKoB,EAAEpB,GACjBwB,EAAOxB,GAAG,IAAMoB,EAAEpB,GAAKoB,EAAEpB,EAAI,IAAMD,EAAEC,EAAI,GAAKwB,EAAOxB,EAAI,GAAG,GAC5DwB,EAAOxB,GAAG,GAAKkB,EAAElB,EAAI,GAAKoB,EAAEpB,EAAI,GAAKJ,EAAEI,GAAKoB,EAAEpB,GAAKkB,EAAElB,GAAKoB,EAAEpB,EAAI,GAChEwB,EAAOxB,GAAG,GAAKa,EAAEb,GAAK2B,EAAKH,EAAOxB,GAAG,GAAKc,EAAMd,GAElD,OAAOwB,GAGHK,E,wBACJ,WAAaC,EAAKC,GAAiB,IAAZhB,EAAY,uDAAH,EAAG,UACjC,IAAMiB,EAAUF,EAAIL,KAAI,SAACQ,EAAGjC,GAAJ,OAAUA,KAClCgC,EAAQE,MAAK,SAAClC,EAAGC,GAAJ,OAAU6B,EAAI9B,GAAK8B,EAAI7B,MACpC,IAAMW,EAAIoB,EAAQP,KAAI,SAACzB,GAAD,OAAO8B,EAAI9B,MAC3Ba,EAAImB,EAAQP,KAAI,SAACzB,GAAD,OAAO+B,EAAI/B,MAC3BgB,EAAIgB,EAAQnC,OACZiB,EAAQkB,EAAQP,KAAI,kBAAM,KAChCU,KAAKnB,EAAIA,EACTmB,KAAKvB,EAAIA,EACTuB,KAAKtB,EAAIA,EACTsB,KAAKX,OAASb,EAAgBC,EAAGC,EAAGC,EAAOC,G,qCAG7C,SAAaO,GACX,GAAIA,IAAMa,KAAKvB,EAAEuB,KAAKnB,EAAI,GACxB,OAAOmB,KAAKtB,EAAEsB,KAAKnB,EAAI,GAEzB,IAAMhB,EAAIoC,KAAKC,IAAID,KAAKE,IAAI,EAAG7B,EAAY0B,KAAKvB,EAAGU,GAAK,GAAIa,KAAKnB,EAAI,GACrE,IAAqBmB,KAAKX,OAAOxB,GAAjC,GAAOP,EAAP,KAAUU,EAAV,KAAaD,EAAb,KAAgBR,EAAhB,KAEA,OAAOD,GADP6B,GAAQa,KAAKvB,EAAEZ,IACAsB,EAAIA,EAAInB,EAAImB,EAAIA,EAAIpB,EAAIoB,EAAI5B,I,iBAG7C,WAKE,IALe,IAAZ6C,EAAY,uDAAL,IACJC,EAASL,KAAKvB,EAAE,GAChB6B,EAAQN,KAAKvB,EAAEuB,KAAKnB,EAAI,GACxB0B,GAASD,EAAQD,GAAUD,EAC7BI,GAAYC,IACP5C,EAAI,EAAGY,EAAI4B,EAAQxC,EAAIuC,IAAQvC,EAAGY,GAAK8B,EAAO,CACrD,IAAM7B,EAAIsB,KAAKU,YAAYjC,GACvBC,EAAI8B,IACNA,EAAW9B,GAGf,OAAO8B,I,iBAGT,WAKE,IALe,IAAZJ,EAAY,uDAAL,IACJC,EAASL,KAAKvB,EAAE,GAChB6B,EAAQN,KAAKvB,EAAEuB,KAAKnB,EAAI,GACxB0B,GAASD,EAAQD,GAAUD,EAC7BO,EAAWF,IACN5C,EAAI,EAAGY,EAAI4B,EAAQxC,EAAIuC,IAAQvC,EAAGY,GAAK8B,EAAO,CACrD,IAAM7B,EAAIsB,KAAKU,YAAYjC,GACvBC,EAAIiC,IACNA,EAAWjC,GAGf,OAAOiC,I,oBAGT,WACE,MAAO,CAACX,KAAKvB,EAAE,GAAIuB,KAAKvB,EAAEuB,KAAKvB,EAAEf,OAAS,M,mBAG5C,WACE,MAAO,CAACsC,KAAKE,MAAOF,KAAKG,S,mBAG3B,SAAOS,GAIL,IAJ+B,IAAfC,EAAe,uDAAN,KAEnBN,IADNM,EAASA,GAAUb,KAAKa,UACF,GAAKA,EAAO,KAAOD,EAAY,GAC/CE,EAAO,IAAIhC,MAAM8B,GACd/C,EAAI,EAAGA,EAAI+C,IAAa/C,EAAG,CAClC,IAAMY,EAAI8B,EAAQ1C,EAAIgD,EAAO,GAC7BC,EAAKjD,GAAK,CAACY,EAAGuB,KAAKU,YAAYjC,IAEjC,OAAOqC,M,KAIX5C,EAAOC,QAAUuB,G,oBC7JjB,IAAIqB,EAAiB,EAAQ,KAEzBC,EAAuB,EAAQ,KAE/BC,EAA6B,EAAQ,KAErCC,EAAkB,EAAQ,KAM9BhD,EAAOC,QAJP,SAAwBgD,EAAKtD,GAC3B,OAAOkD,EAAeI,IAAQH,EAAqBG,EAAKtD,IAAMoD,EAA2BE,EAAKtD,IAAMqD,M,kBCLtGhD,EAAOC,QAJP,SAAyBgD,GACvB,GAAIrC,MAAMsC,QAAQD,GAAM,OAAOA,I,kBC0BjCjD,EAAOC,QA3BP,SAA+BgD,EAAKtD,GAClC,GAAsB,qBAAXwD,QAA4BA,OAAOC,YAAYC,OAAOJ,GAAjE,CACA,IAAIK,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKX,EAAIE,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAETrE,GAAK2D,EAAK9D,SAAWG,GAH8C4D,GAAK,IAK9E,MAAOU,GACPT,GAAK,EACLC,EAAKQ,EACL,QACA,IACOV,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,K,kBCpBTtD,EAAOC,QAJP,WACE,MAAM,IAAIiE,UAAU,+I,qBCGd,SAAUjE,GAAW,aAE3B,SAASkE,EAAU/E,EAAGU,GACpB,OAAOV,EAAIU,GAAK,EAAIV,EAAIU,EAAI,EAAIV,GAAKU,EAAI,EAAIsE,IAG/C,SAASC,EAASC,GAEhB,OADuB,IAAnBA,EAAQ9E,SAAc8E,EAAUC,EAAoBD,IACjD,CACLE,KAAM,SAASpF,EAAGmB,EAAGkE,EAAIC,GAGvB,IAFU,MAAND,IAAYA,EAAK,GACX,MAANC,IAAYA,EAAKtF,EAAEI,QAChBiF,EAAKC,GAAI,CACd,IAAIC,EAAMF,EAAKC,IAAO,EAClBJ,EAAQlF,EAAEuF,GAAMpE,GAAK,EAAGkE,EAAKE,EAAM,EAClCD,EAAKC,EAEZ,OAAOF,GAETG,MAAO,SAASxF,EAAGmB,EAAGkE,EAAIC,GAGxB,IAFU,MAAND,IAAYA,EAAK,GACX,MAANC,IAAYA,EAAKtF,EAAEI,QAChBiF,EAAKC,GAAI,CACd,IAAIC,EAAMF,EAAKC,IAAO,EAClBJ,EAAQlF,EAAEuF,GAAMpE,GAAK,EAAGmE,EAAKC,EAC5BF,EAAKE,EAAM,EAElB,OAAOF,IAKb,SAASF,EAAoBhF,GAC3B,OAAO,SAASF,EAAGkB,GACjB,OAAO4D,EAAU5E,EAAEF,GAAIkB,IAI3B,IAAIsE,EAAkBR,EAASF,GAC3B/D,EAAcyE,EAAgBD,MAC9BE,EAAaD,EAAgBL,KAEjC,SAASO,EAAW3F,EAAGU,GACrB,OAAOA,EAAIV,GAAK,EAAIU,EAAIV,EAAI,EAAIU,GAAKV,EAAI,EAAIgF,IAG/C,SAASY,EAASzE,GAChB,OAAa,OAANA,EAAa6D,KAAO7D,EAG7B,SAAS0E,EAASC,EAAO3F,GACvB,IAEIH,EACAC,EAHAsB,EAAIuE,EAAM1F,OACV2F,EAAI,EAGJC,EAAI,EACJzF,GAAK,EACLC,EAAI,EAER,GAAS,MAALL,EACF,OAASI,EAAIgB,GACN0E,MAAMjG,EAAI4F,EAASE,EAAMvF,OAG5ByF,IAFA/F,EAAID,EAAI+F,IAEE/F,GADV+F,GAAK9F,IAAMO,UAOf,OAASD,EAAIgB,GACN0E,MAAMjG,EAAI4F,EAASzF,EAAE2F,EAAMvF,GAAIA,EAAGuF,OAGrCE,IAFA/F,EAAID,EAAI+F,IAEE/F,GADV+F,GAAK9F,IAAMO,KAMjB,GAAIA,EAAI,EAAG,OAAOwF,GAAKxF,EAAI,GAG7B,SAAS0F,EAAUJ,EAAO3F,GACxB,IAAI0B,EAAIgE,EAASC,EAAO3F,GACxB,OAAO0B,EAAIc,KAAKwD,KAAKtE,GAAKA,EAG5B,SAASuE,EAAON,EAAO3F,GACrB,IAEIH,EACAU,EACAD,EAJAF,GAAK,EACLgB,EAAIuE,EAAM1F,OAKd,GAAS,MAALD,EAAW,CACb,OAASI,EAAIgB,GAAG,GAAsB,OAAjBb,EAAIoF,EAAMvF,KAAeG,GAAKA,EAAG,CAAEV,EAAIS,EAAIC,EAAG,MACnE,OAASH,EAAIgB,GAAyB,OAAjBb,EAAIoF,EAAMvF,MACzBP,EAAIU,IAAGV,EAAIU,GACXD,EAAIC,IAAGD,EAAIC,QAId,CACH,OAASH,EAAIgB,GAAG,GAAmC,OAA9Bb,EAAIP,EAAE2F,EAAMvF,GAAIA,EAAGuF,KAAmBpF,GAAKA,EAAG,CAAEV,EAAIS,EAAIC,EAAG,MAChF,OAASH,EAAIgB,GAAsC,OAA9Bb,EAAIP,EAAE2F,EAAMvF,GAAIA,EAAGuF,MAClC9F,EAAIU,IAAGV,EAAIU,GACXD,EAAIC,IAAGD,EAAIC,IAInB,MAAO,CAACV,EAAGS,GAGb,SAAS4F,EAASlF,GAChB,OAAO,WACL,OAAOA,GAIX,SAASmF,EAASnF,GAChB,OAAOA,EAGT,SAASoF,EAAMC,EAAOC,EAAM3D,GAC1B0D,GAASA,EAAOC,GAAQA,EAAM3D,GAAQvB,EAAImF,UAAUtG,QAAU,GAAKqG,EAAOD,EAAOA,EAAQ,EAAG,GAAKjF,EAAI,EAAI,GAAKuB,EAM9G,IAJA,IAAIvC,GAAK,EACLgB,EAAoD,EAAhDoB,KAAKE,IAAI,EAAGF,KAAKgE,MAAMF,EAAOD,GAAS1D,IAC3CyD,EAAQ,IAAI/E,MAAMD,KAEbhB,EAAIgB,GACXgF,EAAMhG,GAAKiG,EAAQjG,EAAIuC,EAGzB,OAAOyD,EAGT,IAAIK,EAAMjE,KAAKwD,KAAK,IAChBU,EAAKlE,KAAKwD,KAAK,IACfW,EAAKnE,KAAKwD,KAAK,GACnB,SAASY,EAAMP,EAAOC,EAAMO,GAC1B,IAAIlE,EAAOmE,EAAST,EAAOC,EAAMO,GACjC,OAAOT,EACL5D,KAAKgE,KAAKH,EAAQ1D,GAAQA,EAC1BH,KAAKuE,MAAMT,EAAO3D,GAAQA,EAAOA,EAAO,EACxCA,GAIJ,SAASmE,EAAST,EAAOC,EAAMO,GAC7B,IAAIG,EAAQxE,KAAKyE,IAAIX,EAAOD,GAAS7D,KAAKE,IAAI,EAAGmE,GAC7CK,EAAQ1E,KAAK2E,IAAI,GAAI3E,KAAKuE,MAAMvE,KAAK4E,IAAIJ,GAASxE,KAAK6E,OACvDC,EAAQN,EAAQE,EAIpB,OAHII,GAASb,EAAKS,GAAS,GAClBI,GAASZ,EAAIQ,GAAS,EACtBI,GAASX,IAAIO,GAAS,GACxBZ,EAAOD,GAASa,EAAQA,EAGjC,SAASK,EAAQC,GACf,OAAOhF,KAAKgE,KAAKhE,KAAK4E,IAAII,EAAOvH,QAAUuC,KAAKiF,KAAO,EAGzD,SAASC,EAAO1G,GACd,OAAQA,EAGV,SAAS2G,IACP,IAAIlD,EAAQ0B,EACR/C,EAAS6C,EACT2B,EAAYL,EAEhB,SAASI,EAAUE,GACjB,IAAIzH,EAEAY,EADAI,EAAIyG,EAAK5H,OAETuH,EAAS,IAAInG,MAAMD,GAGvB,IAAKhB,EAAI,EAAGA,EAAIgB,IAAKhB,EACnBoH,EAAOpH,IAAMqE,EAAMoD,EAAKzH,GAAIA,EAAGyH,GAGjC,IAAIC,EAAK1E,EAAOoE,GACZO,GAAMD,EAAG,GACTE,GAAMF,EAAG,GACTG,EAAKL,EAAUJ,EAAQO,EAAIC,GAG1B3G,MAAMsC,QAAQsE,KAAKA,EAAKrB,EAAMmB,EAAIC,GAAKC,IAG5C,IAAIrC,EAAIqC,EAAGhI,OACX,IAAKG,EAAI,EAAGA,EAAIwF,IAAKxF,EAAG6H,EAAG7H,IAAM6H,EAAG7H,GACpC,KAAO6H,EAAG,IAAMF,GAAIE,EAAGC,UAAWtC,EAClC,KAAOqC,EAAGrC,EAAI,IAAMoC,GAAIC,EAAGnG,QAAS8D,EAEpC,IACIuC,EADAC,EAAO,IAAI/G,MAAMuE,EAAI,GAIzB,IAAKxF,EAAI,EAAGA,GAAKwF,IAAKxF,GACpB+H,EAAMC,EAAKhI,GAAK,IACZ2H,GAAK3H,EAAI,EAAI6H,EAAG7H,EAAI,GAAK2H,EAC7BI,EAAIH,GAAK5H,EAAIwF,EAAIqC,EAAG7H,GAAK4H,EAI3B,IAAK5H,EAAI,EAAGA,EAAIgB,IAAKhB,EAEf2H,IADJ/G,EAAIwG,EAAOpH,KACIY,GAAKgH,GAClBI,EAAKvH,EAAYoH,EAAIjH,EAAG,EAAG4E,IAAIpB,KAAKqD,EAAKzH,IAI7C,OAAOgI,EAmBT,OAhBAT,EAAUlD,MAAQ,SAASpC,GACzB,OAAOkE,UAAUtG,QAAUwE,EAAqB,oBAANpC,EAAmBA,EAAI6D,GAAU7D,GAAIsF,GAAalD,GAG9FkD,EAAUvE,OAAS,SAASf,GAC1B,OAAOkE,UAAUtG,QAAUmD,EAAsB,oBAANf,EAAmBA,EAAI6D,EAAS,EAAE7D,EAAE,IAAKA,EAAE,KAAMsF,GAAavE,GAG3GuE,EAAUU,WAAa,SAAShG,GAC9B,OAAKkE,UAAUtG,QACf2H,EAAyB,oBAANvF,EAAmBA,EAChChB,MAAMsC,QAAQtB,GAAK6D,EAAS7E,MAAMiH,UAAUzG,IAAI0G,KAAKlG,EAAGqF,IACxDxB,GAAU7D,GACTsF,GAJuBC,GAOzBD,EAGT,SAASa,EAAS7C,EAAOpE,EAAGvB,GAE1B,GADS,MAALA,IAAWA,EAAIyF,GACbrE,EAAIuE,EAAM1F,OAAhB,CACA,IAAKsB,GAAKA,IAAM,GAAKH,EAAI,EAAG,OAAQpB,EAAE2F,EAAM,GAAI,EAAGA,GACnD,GAAIpE,GAAK,EAAG,OAAQvB,EAAE2F,EAAMvE,EAAI,GAAIA,EAAI,EAAGuE,GAC3C,IAAIvE,EACAjB,GAAKiB,EAAI,GAAKG,EACdnB,EAAIoC,KAAKuE,MAAM5G,GACfN,GAAKG,EAAE2F,EAAMvF,GAAIA,EAAGuF,GAExB,OAAO9F,IADEG,EAAE2F,EAAMvF,EAAI,GAAIA,EAAI,EAAGuF,GAChB9F,IAAMM,EAAIC,IAG5B,SAASqI,EAAiBjB,EAAQ/E,EAAKC,GAErC,OADA8E,EAAOlF,KAAKsC,GACLpC,KAAKgE,MAAM9D,EAAMD,IAAQ,GAAK+F,EAAShB,EAAQ,KAAQgB,EAAShB,EAAQ,MAAShF,KAAK2E,IAAIK,EAAOvH,QAAS,EAAI,KAGvH,SAASyI,EAAMlB,EAAQ/E,EAAKC,GAC1B,OAAOF,KAAKgE,MAAM9D,EAAMD,IAAQ,IAAMsD,EAAUyB,GAAUhF,KAAK2E,IAAIK,EAAOvH,QAAS,EAAI,KAGzF,SAASyC,EAAIiD,EAAO3F,GAClB,IAEIH,EACAU,EAHAH,GAAK,EACLgB,EAAIuE,EAAM1F,OAId,GAAS,MAALD,EAAW,CACb,OAASI,EAAIgB,GAAG,GAAsB,OAAjBb,EAAIoF,EAAMvF,KAAeG,GAAKA,EAAG,CAAEV,EAAIU,EAAG,MAC/D,OAASH,EAAIgB,GAAyB,OAAjBb,EAAIoF,EAAMvF,KAAeG,EAAIV,IAAGA,EAAIU,OAGtD,CACH,OAASH,EAAIgB,GAAG,GAAmC,OAA9Bb,EAAIP,EAAE2F,EAAMvF,GAAIA,EAAGuF,KAAmBpF,GAAKA,EAAG,CAAEV,EAAIU,EAAG,MAC5E,OAASH,EAAIgB,GAAsC,OAA9Bb,EAAIP,EAAE2F,EAAMvF,GAAIA,EAAGuF,KAAmBpF,EAAIV,IAAGA,EAAIU,GAGxE,OAAOV,EAGT,SAAS8I,EAAKhD,EAAO3F,GACnB,IAEIH,EAFAgG,EAAI,EACJzE,EAAIuE,EAAM1F,OAEVG,GAAK,EACLC,EAAIe,EAER,GAAS,MAALpB,EACF,OAASI,EAAIgB,GAAQ0E,MAAMjG,EAAI4F,EAASE,EAAMvF,OAAqBC,EAAfwF,GAAKhG,OAIzD,OAASO,EAAIgB,GAAQ0E,MAAMjG,EAAI4F,EAASzF,EAAE2F,EAAMvF,GAAIA,EAAGuF,OAAyBtF,EAAfwF,GAAKhG,EAGxE,GAAIQ,EAAG,OAAOwF,EAAIxF,EAGpB,SAASO,EAAO+E,EAAO3F,GACrB,IAEIH,EAFA+I,EAAU,GACVxH,EAAIuE,EAAM1F,OAEVG,GAAK,EAET,GAAS,MAALJ,EACF,OAASI,EAAIgB,GAAQ0E,MAAMjG,EAAI4F,EAASE,EAAMvF,MAAMwI,EAAQpE,KAAK3E,QAIjE,OAASO,EAAIgB,GAAQ0E,MAAMjG,EAAI4F,EAASzF,EAAE2F,EAAMvF,GAAIA,EAAGuF,MAAUiD,EAAQpE,KAAK3E,GAGhF,OAAO2I,EAASI,EAAQtG,KAAKsC,GAAY,IAG3C,SAASiE,EAAMC,GAQb,IAPA,IACIlD,EAGAmD,EACApD,EALAvE,EAAI0H,EAAO7I,OAEXG,GAAK,EACLC,EAAI,IAICD,EAAIgB,GAAGf,GAAKyI,EAAO1I,GAAGH,OAG/B,IAFA8I,EAAS,IAAI1H,MAAMhB,KAEVe,GAAK,GAGZ,IADAwE,GADAD,EAAQmD,EAAO1H,IACLnB,SACD2F,GAAK,GACZmD,IAAS1I,GAAKsF,EAAMC,GAIxB,OAAOmD,EAGT,SAAStG,EAAIkD,EAAO3F,GAClB,IAEIH,EACAU,EAHAH,GAAK,EACLgB,EAAIuE,EAAM1F,OAId,GAAS,MAALD,EAAW,CACb,OAASI,EAAIgB,GAAG,GAAsB,OAAjBb,EAAIoF,EAAMvF,KAAeG,GAAKA,EAAG,CAAEV,EAAIU,EAAG,MAC/D,OAASH,EAAIgB,GAAyB,OAAjBb,EAAIoF,EAAMvF,KAAeP,EAAIU,IAAGV,EAAIU,OAGtD,CACH,OAASH,EAAIgB,GAAG,GAAmC,OAA9Bb,EAAIP,EAAE2F,EAAMvF,GAAIA,EAAGuF,KAAmBpF,GAAKA,EAAG,CAAEV,EAAIU,EAAG,MAC5E,OAASH,EAAIgB,GAAsC,OAA9Bb,EAAIP,EAAE2F,EAAMvF,GAAIA,EAAGuF,KAAmB9F,EAAIU,IAAGV,EAAIU,GAGxE,OAAOV,EAGT,SAASmJ,EAAMrD,GAEb,IADA,IAAIvF,EAAI,EAAGgB,EAAIuE,EAAM1F,OAAS,EAAGsB,EAAIoE,EAAM,GAAIqD,EAAQ,IAAI3H,MAAMD,EAAI,EAAI,EAAIA,GACtEhB,EAAIgB,GAAG4H,EAAM5I,GAAK,CAACmB,EAAGA,EAAIoE,IAAQvF,IACzC,OAAO4I,EAGT,SAASC,EAAQtD,EAAOuD,GAEtB,IADA,IAAI9I,EAAI8I,EAAQjJ,OAAQkJ,EAAW,IAAI9H,MAAMjB,GACtCA,KAAK+I,EAAS/I,GAAKuF,EAAMuD,EAAQ9I,IACxC,OAAO+I,EAGT,SAASC,EAAKzD,EAAOZ,GACnB,GAAM3D,EAAIuE,EAAM1F,OAAhB,CACA,IACImB,EAEAiI,EAHAjJ,EAAI,EAEJC,EAAI,EAEJiJ,EAAK3D,EAAMtF,GAIf,IAFK0E,IAASA,EAAUH,KAEfxE,EAAIgB,IAAO2D,EAAQsE,EAAK1D,EAAMvF,GAAIkJ,GAAM,GAAyB,IAApBvE,EAAQuE,EAAIA,MAAWA,EAAKD,EAAIhJ,EAAID,GAE1F,OAAwB,IAApB2E,EAAQuE,EAAIA,GAAkBjJ,OAAlC,GAGF,SAASkJ,EAAQ5D,EAAO6D,EAAIC,GAK1B,IAJA,IACIC,EACAtJ,EAFAwF,GAAW,MAAN6D,EAAa9D,EAAM1F,OAASwJ,IAAOD,EAAW,MAANA,EAAa,GAAKA,GAI5D5D,GACLxF,EAAIoC,KAAKmH,SAAW/D,IAAM,EAC1B8D,EAAI/D,EAAMC,EAAI4D,GACd7D,EAAMC,EAAI4D,GAAM7D,EAAMvF,EAAIoJ,GAC1B7D,EAAMvF,EAAIoJ,GAAME,EAGlB,OAAO/D,EAGT,SAASiE,EAAIjE,EAAO3F,GAClB,IAEIH,EAFAgG,EAAI,EACJzE,EAAIuE,EAAM1F,OAEVG,GAAK,EAET,GAAS,MAALJ,EACF,OAASI,EAAIgB,IAAOvB,GAAK8F,EAAMvF,MAAIyF,GAAKhG,QAIxC,OAASO,EAAIgB,IAAOvB,GAAKG,EAAE2F,EAAMvF,GAAIA,EAAGuF,MAAQE,GAAKhG,GAGvD,OAAOgG,EAGT,SAASgE,EAAUC,GACjB,KAAM1I,EAAI0I,EAAO7J,QAAS,MAAO,GACjC,IAAK,IAAIG,GAAK,EAAGwF,EAAInD,EAAIqH,EAAQ7J,GAAS4J,EAAY,IAAIxI,MAAMuE,KAAMxF,EAAIwF,GACxE,IAAK,IAAYxE,EAARf,GAAK,EAAM0J,EAAMF,EAAUzJ,GAAK,IAAIiB,MAAMD,KAAMf,EAAIe,GAC3D2I,EAAI1J,GAAKyJ,EAAOzJ,GAAGD,GAGvB,OAAOyJ,EAGT,SAAS5J,EAAOH,GACd,OAAOA,EAAEG,OAGX,SAAS+J,IACP,OAAOH,EAAUtD,WAGnB,IAAI0D,EAAU,QAEdvJ,EAAQuJ,QAAUA,EAClBvJ,EAAQwJ,OAASrJ,EACjBH,EAAQG,YAAcA,EACtBH,EAAQ6E,WAAaA,EACrB7E,EAAQkE,UAAYA,EACpBlE,EAAQoE,SAAWA,EACnBpE,EAAQ8E,WAAaA,EACrB9E,EAAQqF,UAAYA,EACpBrF,EAAQuF,OAASA,EACjBvF,EAAQiH,UAAYA,EACpBjH,EAAQyJ,0BAA4B1B,EACpC/H,EAAQ0J,eAAiB1B,EACzBhI,EAAQ2J,iBAAmB9C,EAC3B7G,EAAQgC,IAAMA,EACdhC,EAAQiI,KAAOA,EACfjI,EAAQE,OAASA,EACjBF,EAAQmI,MAAQA,EAChBnI,EAAQ+B,IAAMA,EACd/B,EAAQsI,MAAQA,EAChBtI,EAAQuI,QAAUA,EAClBvI,EAAQ8H,SAAWA,EACnB9H,EAAQ0F,MAAQA,EAChB1F,EAAQ0I,KAAOA,EACf1I,EAAQ6I,QAAUA,EAClB7I,EAAQkJ,IAAMA,EACdlJ,EAAQkG,MAAQA,EAChBlG,EAAQoG,SAAWA,EACnBpG,EAAQmJ,UAAYA,EACpBnJ,EAAQgF,SAAWA,EACnBhF,EAAQsJ,IAAMA,EAjdiDM,CAAQ5J,I,iCCCzE,SAAS6J,EAAIC,GAEX,GADAjI,KAAKiI,KAAc,EAAPA,EACRjI,KAAKiI,MAAQ,GAAuC,KAAjCjI,KAAKiI,KAAQjI,KAAKiI,KAAO,GAC9C,MAAM,IAAIC,MAAM,qDAElBlI,KAAKmI,OAASF,GAAQ,EAItB,IADA,IAAIG,EAAQ,IAAItJ,MAAkB,EAAZkB,KAAKiI,MAClBpK,EAAI,EAAGA,EAAIuK,EAAM1K,OAAQG,GAAK,EAAG,CACxC,IAAMwK,EAAQpI,KAAKqI,GAAKzK,EAAImC,KAAKiI,KACjCG,EAAMvK,GAAKoC,KAAKsI,IAAIF,GACpBD,EAAMvK,EAAI,IAAMoC,KAAKuI,IAAIH,GAE3BrI,KAAKoI,MAAQA,EAIb,IADA,IAAIK,EAAQ,EACHtB,EAAI,EAAGnH,KAAKiI,KAAOd,EAAGA,IAAM,EACnCsB,IAKFzI,KAAK0I,OAASD,EAAQ,IAAM,EAAIA,EAAQ,EAAIA,EAG5CzI,KAAK2I,QAAU,IAAI7J,MAAM,GAAKkB,KAAK0I,QACnC,IAAK,IAAI5K,EAAI,EAAGA,EAAIkC,KAAK2I,QAAQjL,OAAQI,IAAK,CAC5CkC,KAAK2I,QAAQ7K,GAAK,EAClB,IAAK,IAAI6H,EAAQ,EAAGA,EAAQ3F,KAAK0I,OAAQ/C,GAAS,EAAG,CACnD,IAAIiD,EAAW5I,KAAK0I,OAAS/C,EAAQ,EACrC3F,KAAK2I,QAAQ7K,KAAQA,IAAM6H,EAAS,IAAMiD,GAI9C5I,KAAK6I,KAAO,KACZ7I,KAAK8I,MAAQ,KACb9I,KAAK+I,KAAO,EAEd7K,EAAOC,QAAU6J,EAEjBA,EAAIjC,UAAUiD,iBAAmB,SAA0BC,EAASC,GAElE,IADA,IAAIC,EAAMD,GAAW,IAAIpK,MAAMmK,EAAQvL,SAAW,GACzCG,EAAI,EAAGA,EAAIoL,EAAQvL,OAAQG,GAAK,EACvCsL,EAAItL,IAAM,GAAKoL,EAAQpL,GACzB,OAAOsL,GAGTnB,EAAIjC,UAAUqD,mBAAqB,WAEjC,IADA,IAAMD,EAAM,IAAIrK,MAAMkB,KAAKmI,QAClBtK,EAAI,EAAGA,EAAIsL,EAAIzL,OAAQG,IAC9BsL,EAAItL,GAAK,EACX,OAAOsL,GAGTnB,EAAIjC,UAAUsD,eAAiB,SAAwBC,EAAOJ,GAE5D,IADA,IAAIC,EAAMD,GAAWlJ,KAAKoJ,qBACjBvL,EAAI,EAAGA,EAAIsL,EAAIzL,OAAQG,GAAK,EACnCsL,EAAItL,GAAKyL,EAAMzL,IAAM,GACrBsL,EAAItL,EAAI,GAAK,EAEf,OAAOsL,GAGTnB,EAAIjC,UAAUwD,iBAAmB,SAA0BC,GAGzD,IAFA,IAAIvB,EAAOjI,KAAKmI,OACZsB,EAAOxB,IAAS,EACXpK,EAAI,EAAGA,EAAI4L,EAAM5L,GAAK,EAC7B2L,EAASvB,EAAOpK,GAAK2L,EAAS3L,GAC9B2L,EAASvB,EAAOpK,EAAI,IAAM2L,EAAS3L,EAAI,IAI3CmK,EAAIjC,UAAU2D,UAAY,SAAmBC,EAAKrE,GAChD,GAAIqE,IAAQrE,EACV,MAAM,IAAI4C,MAAM,8CAElBlI,KAAK6I,KAAOc,EACZ3J,KAAK8I,MAAQxD,EACbtF,KAAK+I,KAAO,EACZ/I,KAAK4J,cACL5J,KAAK6I,KAAO,KACZ7I,KAAK8I,MAAQ,MAGfd,EAAIjC,UAAU8D,cAAgB,SAAuBF,EAAKrE,GACxD,GAAIqE,IAAQrE,EACV,MAAM,IAAI4C,MAAM,8CAElBlI,KAAK6I,KAAOc,EACZ3J,KAAK8I,MAAQxD,EACbtF,KAAK+I,KAAO,EACZ/I,KAAK8J,kBACL9J,KAAK6I,KAAO,KACZ7I,KAAK8I,MAAQ,MAGfd,EAAIjC,UAAUgE,iBAAmB,SAA0BJ,EAAKrE,GAC9D,GAAIqE,IAAQrE,EACV,MAAM,IAAI4C,MAAM,8CAElBlI,KAAK6I,KAAOc,EACZ3J,KAAK8I,MAAQxD,EACbtF,KAAK+I,KAAO,EACZ/I,KAAK4J,cACL,IAAK,IAAI/L,EAAI,EAAGA,EAAI8L,EAAIjM,OAAQG,IAC9B8L,EAAI9L,IAAMmC,KAAKiI,KACjBjI,KAAK6I,KAAO,KACZ7I,KAAK8I,MAAQ,MAOfd,EAAIjC,UAAU6D,YAAc,WAC1B,IAQII,EACA7C,EATAwC,EAAM3J,KAAK6I,KACXZ,EAAOjI,KAAKmI,OAIZ/H,EAAO,GADCJ,KAAK0I,OAEbuB,EAAOhC,EAAO7H,GAAS,EAIvB8J,EAASlK,KAAK2I,QAClB,GAAY,IAARsB,EACF,IAAKD,EAAS,EAAG7C,EAAI,EAAG6C,EAAS/B,EAAM+B,GAAUC,EAAK9C,IAAK,CACzD,IAAMgD,EAAMD,EAAO/C,GACnBnH,KAAKoK,kBAAkBJ,EAAQG,EAAK/J,QAItC,IAAK4J,EAAS,EAAG7C,EAAI,EAAG6C,EAAS/B,EAAM+B,GAAUC,EAAK9C,IAAK,CACzD,IAAMgD,EAAMD,EAAO/C,GACnBnH,KAAKqK,kBAAkBL,EAAQG,EAAK/J,GAKxC,IAAIkK,EAAMtK,KAAK+I,MAAQ,EAAI,EACvBX,EAAQpI,KAAKoI,MACjB,IAAKhI,IAAS,EAAGA,GAAQ,EAAGA,IAAS,EAAG,CAEtC,IAAImK,GADJN,EAAOhC,EAAO7H,GAAS,KACE,EAGzB,IAAK4J,EAAS,EAAGA,EAAS/B,EAAM+B,GAAUC,EAGxC,IADA,IAAIO,EAAQR,EAASO,EACZ1M,EAAImM,EAAQS,EAAI,EAAG5M,EAAI2M,EAAO3M,GAAK,EAAG4M,GAAKrK,EAAM,CACxD,IAAMsK,EAAI7M,EACJ8M,EAAID,EAAIH,EACRK,EAAID,EAAIJ,EACRM,EAAID,EAAIL,EAGRO,EAAKnB,EAAIe,GACTK,EAAKpB,EAAIe,EAAI,GACbM,EAAKrB,EAAIgB,GACTM,EAAKtB,EAAIgB,EAAI,GACbO,EAAKvB,EAAIiB,GACTO,EAAKxB,EAAIiB,EAAI,GACbQ,EAAKzB,EAAIkB,GACTQ,EAAK1B,EAAIkB,EAAI,GAGbS,EAAMR,EACNS,EAAMR,EAENS,EAAUpD,EAAMqC,GAChBgB,EAAUnB,EAAMlC,EAAMqC,EAAI,GAC1BiB,EAAMV,EAAKQ,EAAUP,EAAKQ,EAC1BE,EAAMX,EAAKS,EAAUR,EAAKO,EAE1BI,EAAUxD,EAAM,EAAIqC,GACpBoB,EAAUvB,EAAMlC,EAAM,EAAIqC,EAAI,GAC9BqB,EAAMZ,EAAKU,EAAUT,EAAKU,EAC1BE,EAAMb,EAAKW,EAAUV,EAAKS,EAE1BI,EAAU5D,EAAM,EAAIqC,GACpBwB,EAAU3B,EAAMlC,EAAM,EAAIqC,EAAI,GAC9ByB,EAAMd,EAAKY,EAAUX,EAAKY,EAC1BE,EAAMf,EAAKa,EAAUZ,EAAKW,EAG1BI,EAAMd,EAAMQ,EACZO,EAAMd,EAAMQ,EACZO,EAAMhB,EAAMQ,EACZS,EAAMhB,EAAMQ,EACZS,EAAMd,EAAMQ,EACZO,EAAMd,EAAMQ,EACZO,EAAMpC,GAAOoB,EAAMQ,GACnBS,EAAMrC,GAAOqB,EAAMQ,GAGnBS,EAAMR,EAAMI,EACZK,EAAMR,EAAMI,EAEZK,EAAMV,EAAMI,EACZO,EAAMV,EAAMI,EAEZO,EAAMV,EAAMK,EACZM,GAAMV,EAAMG,EAEZQ,GAAMZ,EAAMK,EACZQ,GAAMZ,EAAMG,EAElB/C,EAAIe,GAAKkC,EACTjD,EAAIe,EAAI,GAAKmC,EACblD,EAAIgB,GAAKqC,EACTrD,EAAIgB,EAAI,GAAKsC,GACbtD,EAAIiB,GAAKkC,EACTnD,EAAIiB,EAAI,GAAKmC,EACbpD,EAAIkB,GAAKqC,GACTvD,EAAIkB,EAAI,GAAKsC,MASrBnF,EAAIjC,UAAUqE,kBAAoB,SAA2BJ,EAAQG,EACR/J,GAC3D,IAAMuJ,EAAM3J,KAAK6I,KACXvD,EAAOtF,KAAK8I,MAEZsE,EAAQ9H,EAAK6E,GACbkD,EAAQ/H,EAAK6E,EAAM,GACnBmD,EAAOhI,EAAK6E,EAAM/J,GAClBmN,EAAOjI,EAAK6E,EAAM/J,EAAO,GAEzBoN,EAAQJ,EAAQE,EAChBG,EAAQJ,EAAQE,EAChBG,EAASN,EAAQE,EACjBK,EAASN,EAAQE,EAEvB5D,EAAIK,GAAUwD,EACd7D,EAAIK,EAAS,GAAKyD,EAClB9D,EAAIK,EAAS,GAAK0D,EAClB/D,EAAIK,EAAS,GAAK2D,GAMpB3F,EAAIjC,UAAUsE,kBAAoB,SAA2BL,EAAQG,EACR/J,GAC3D,IAAMuJ,EAAM3J,KAAK6I,KACXvD,EAAOtF,KAAK8I,MACZwB,EAAMtK,KAAK+I,MAAQ,EAAI,EACvB6E,EAAe,EAAPxN,EACRyN,EAAe,EAAPzN,EAGR0K,EAAKxF,EAAK6E,GACVY,EAAKzF,EAAK6E,EAAM,GAChBa,EAAK1F,EAAK6E,EAAM/J,GAChB6K,EAAK3F,EAAK6E,EAAM/J,EAAO,GACvB8K,EAAK5F,EAAK6E,EAAMyD,GAChBzC,EAAK7F,EAAK6E,EAAMyD,EAAQ,GACxBxC,EAAK9F,EAAK6E,EAAM0D,GAChBxC,EAAK/F,EAAK6E,EAAM0D,EAAQ,GAGxBzB,EAAMtB,EAAKI,EACXmB,EAAMtB,EAAKI,EACXmB,EAAMxB,EAAKI,EACXqB,EAAMxB,EAAKI,EACXqB,EAAMxB,EAAKI,EACXqB,EAAMxB,EAAKI,EACXqB,EAAMpC,GAAOU,EAAKI,GAClBuB,EAAMrC,GAAOW,EAAKI,GAGlBuB,EAAMR,EAAMI,EACZK,EAAMR,EAAMI,EAEZO,EAAMV,EAAMK,EACZM,EAAMV,EAAMG,EAEZI,EAAMV,EAAMI,EACZO,EAAMV,EAAMI,EAEZS,EAAMZ,EAAMK,EACZQ,EAAMZ,EAAMG,EAElB/C,EAAIK,GAAU4C,EACdjD,EAAIK,EAAS,GAAK6C,EAClBlD,EAAIK,EAAS,GAAKgD,EAClBrD,EAAIK,EAAS,GAAKiD,EAClBtD,EAAIK,EAAS,GAAK8C,EAClBnD,EAAIK,EAAS,GAAK+C,EAClBpD,EAAIK,EAAS,GAAKkD,EAClBvD,EAAIK,EAAS,GAAKmD,GAIpBnF,EAAIjC,UAAU+D,gBAAkB,WAC9B,IAQIE,EACA7C,EATAwC,EAAM3J,KAAK6I,KACXZ,EAAOjI,KAAKmI,OAIZ/H,EAAO,GADCJ,KAAK0I,OAEbuB,EAAOhC,EAAO7H,GAAS,EAIvB8J,EAASlK,KAAK2I,QAClB,GAAY,IAARsB,EACF,IAAKD,EAAS,EAAG7C,EAAI,EAAG6C,EAAS/B,EAAM+B,GAAUC,EAAK9C,IAAK,CACzD,IAAMgD,EAAMD,EAAO/C,GACnBnH,KAAK8N,sBAAsB9D,EAAQG,IAAQ,EAAG/J,IAAS,QAIzD,IAAK4J,EAAS,EAAG7C,EAAI,EAAG6C,EAAS/B,EAAM+B,GAAUC,EAAK9C,IAAK,CACzD,IAAMgD,EAAMD,EAAO/C,GACnBnH,KAAK+N,sBAAsB/D,EAAQG,IAAQ,EAAG/J,IAAS,GAK3D,IAAIkK,EAAMtK,KAAK+I,MAAQ,EAAI,EACvBX,EAAQpI,KAAKoI,MACjB,IAAKhI,IAAS,EAAGA,GAAQ,EAAGA,IAAS,EAAG,CAEtC,IAAI4N,GADJ/D,EAAOhC,EAAO7H,GAAS,KACD,EAClBmK,EAAayD,IAAY,EACzBC,EAAc1D,IAAe,EAGjC,IAAKP,EAAS,EAAGA,EAAS/B,EAAM+B,GAAUC,EACxC,IAAK,IAAIpM,EAAI,EAAG4M,EAAI,EAAG5M,GAAKoQ,EAAapQ,GAAK,EAAG4M,GAAKrK,EAAM,CAC1D,IAAIsK,EAAIV,EAASnM,EACb8M,EAAID,EAAIH,EACRK,EAAID,EAAIJ,EACRM,EAAID,EAAIL,EAGRO,EAAKnB,EAAIe,GACTK,EAAKpB,EAAIe,EAAI,GACbM,EAAKrB,EAAIgB,GACTM,EAAKtB,EAAIgB,EAAI,GACbO,EAAKvB,EAAIiB,GACTO,EAAKxB,EAAIiB,EAAI,GACbQ,EAAKzB,EAAIkB,GACTQ,EAAK1B,EAAIkB,EAAI,GAGbS,EAAMR,EACNS,EAAMR,EAENS,EAAUpD,EAAMqC,GAChBgB,EAAUnB,EAAMlC,EAAMqC,EAAI,GAC1BiB,EAAMV,EAAKQ,EAAUP,EAAKQ,EAC1BE,EAAMX,EAAKS,EAAUR,EAAKO,EAE1BI,EAAUxD,EAAM,EAAIqC,GACpBoB,EAAUvB,EAAMlC,EAAM,EAAIqC,EAAI,GAC9BqB,EAAMZ,EAAKU,EAAUT,EAAKU,EAC1BE,EAAMb,EAAKW,EAAUV,EAAKS,EAE1BI,EAAU5D,EAAM,EAAIqC,GACpBwB,EAAU3B,EAAMlC,EAAM,EAAIqC,EAAI,GAC9ByB,EAAMd,EAAKY,EAAUX,EAAKY,EAC1BE,EAAMf,EAAKa,EAAUZ,EAAKW,EAG1BI,EAAMd,EAAMQ,EACZO,EAAMd,EAAMQ,EACZO,EAAMhB,EAAMQ,EACZS,EAAMhB,EAAMQ,EACZS,EAAMd,EAAMQ,EACZO,EAAMd,EAAMQ,EACZO,EAAMpC,GAAOoB,EAAMQ,GACnBS,EAAMrC,GAAOqB,EAAMQ,GAGnBS,EAAMR,EAAMI,EACZK,EAAMR,EAAMI,EAEZO,EAAMV,EAAMK,EACZM,EAAMV,EAAMG,EAQhB,GANA/C,EAAIe,GAAKkC,EACTjD,EAAIe,EAAI,GAAKmC,EACblD,EAAIgB,GAAKqC,EACTrD,EAAIgB,EAAI,GAAKsC,EAGH,IAANpP,GASJ,GAAIA,IAAMoQ,EAAV,CAQA,IASIC,GATO5B,GAIChC,EAAMqC,EAMdwB,IATQ5B,GAIAjC,EAAMoC,EAOd0B,GAVOhC,GAKC9B,EAAMkC,EAMd6B,IAVQhC,IAGA/B,EAAMmC,EASd6B,GAAKtE,EAASO,EAAa1M,EAC3B0Q,GAAKvE,EAASgE,EAAUnQ,EAE5B8L,EAAI2E,IAAMJ,GACVvE,EAAI2E,GAAK,GAAKH,GACdxE,EAAI4E,IAAMH,GACVzE,EAAI4E,GAAK,GAAKF,QAtCd,CACE,IAAIvB,GAAMV,EAAMI,EACZO,GAAMV,EAAMI,EAChB9C,EAAIiB,GAAKkC,GACTnD,EAAIiB,EAAI,GAAKmC,OA2CvB/E,EAAIjC,UAAU+H,sBAAwB,SAA+B9D,EACAG,EACA/J,GACnE,IAAMuJ,EAAM3J,KAAK6I,KACXvD,EAAOtF,KAAK8I,MAEZsE,EAAQ9H,EAAK6E,GACbmD,EAAOhI,EAAK6E,EAAM/J,GAElBoN,EAAQJ,EAAQE,EAChBI,EAASN,EAAQE,EAEvB3D,EAAIK,GAAUwD,EACd7D,EAAIK,EAAS,GAAK,EAClBL,EAAIK,EAAS,GAAK0D,EAClB/D,EAAIK,EAAS,GAAK,GAMpBhC,EAAIjC,UAAUgI,sBAAwB,SAA+B/D,EACAG,EACA/J,GACnE,IAAMuJ,EAAM3J,KAAK6I,KACXvD,EAAOtF,KAAK8I,MACZwB,EAAMtK,KAAK+I,MAAQ,EAAI,EACvB6E,EAAe,EAAPxN,EACRyN,EAAe,EAAPzN,EAGR0K,EAAKxF,EAAK6E,GACVa,EAAK1F,EAAK6E,EAAM/J,GAChB8K,EAAK5F,EAAK6E,EAAMyD,GAChBxC,EAAK9F,EAAK6E,EAAM0D,GAGhBzB,EAAMtB,EAAKI,EACXoB,EAAMxB,EAAKI,EACXsB,EAAMxB,EAAKI,EACXsB,EAAMpC,GAAOU,EAAKI,GAGlBwB,EAAMR,EAAMI,EAEZQ,EAAMV,EACNW,GAAOP,EAEPI,EAAMV,EAAMI,EAEZU,EAAMZ,EACNa,EAAMT,EAEZ/C,EAAIK,GAAU4C,EACdjD,EAAIK,EAAS,GAAK,EAClBL,EAAIK,EAAS,GAAKgD,EAClBrD,EAAIK,EAAS,GAAKiD,EAClBtD,EAAIK,EAAS,GAAK8C,EAClBnD,EAAIK,EAAS,GAAK,EAClBL,EAAIK,EAAS,GAAKkD,EAClBvD,EAAIK,EAAS,GAAKmD,I,iCChfpB,IAAMqB,EAAWjN,OAAOwE,UAAUyI,SAC5BC,EAAgBlQ,EAAQ,KAExBmQ,EAAa,SAAAC,GACjB,MAAe,cAARA,GAA+B,gBAARA,GAAiC,cAARA,GAGnDC,EAAS1Q,EAAOC,QAAU,SAAC0Q,GAAoB,IACnD,IAAIhR,EAAI,EAD2C,mBAATiR,EAAS,iCAATA,EAAS,kBAInD,IAFIC,EAAYF,KAASA,EAASC,EAAKjR,MAClCgR,IAAQA,EAAS,IACfhR,EAAIiR,EAAKpR,OAAQG,IACtB,GAAImR,EAASF,EAAKjR,IAAK,CACrB,cAAkB0D,OAAO0N,KAAKH,EAAKjR,IAAnC,eAAwC,CAAnC,IAAM8Q,EAAG,KACRD,EAAWC,KACTK,EAASH,EAAOF,KAASK,EAASF,EAAKjR,GAAG8Q,IAC5CC,EAAOC,EAAOF,GAAMG,EAAKjR,GAAG8Q,IAE5BE,EAAOF,GAAOG,EAAKjR,GAAG8Q,IAI5BF,EAAcI,EAAQC,EAAKjR,IAG/B,OAAOgR,GAGT,SAASG,EAASE,GAChB,MAAsB,oBAARA,GAA6C,oBAAvBV,EAASxI,KAAKkJ,GAGpD,SAASH,EAAYG,GACnB,MAAsB,kBAARA,EAA2B,OAARA,EAA8B,oBAARA,I,8CCjCnDV,EAAWjN,OAAOwE,UAAUyI,SAC5BW,EAAe5N,OAAOwE,UAAUqJ,qBAChCC,EAAa9N,OAAO+N,sBAuB1B,SAASN,EAASE,GAChB,MAAsB,oBAARA,GAA6C,oBAAvBV,EAASxI,KAAKkJ,IAA8BpQ,MAAMsC,QAAQ8N,GAtBhGhR,EAAOC,QAAU,SAAC0Q,GAChB,IAAKG,EAASH,GACZ,MAAM,IAAIzM,UAAU,+CAFc,2BAAT0M,EAAS,iCAATA,EAAS,kBAKpC,GAAoB,IAAhBA,EAAKpR,QAAkC,oBAAX2D,QAA+C,oBAAfgO,EAC9D,OAAOR,EAGT,cAAgBC,EAAhB,eAAsB,CAAjB,IAAiB,EAAbS,EAAG,KACNC,EAAQH,EAAWE,GADH,IAGJC,GAHI,IAGpB,2BAAuB,KAAdb,EAAc,QACjBQ,EAAanJ,KAAKuJ,EAAKZ,KACzBE,EAAOF,GAAOY,EAAIZ,KALF,+BAStB,OAAOE,I,mEC/BT,IAAML,EAAWjN,OAAOwE,UAAUyI,SAEnB,SAASiB,EAAWC,GACjC,OAAOlB,EAASxI,KAAK0J,GAAQC,SAAS,U,OCGjC,SAASC,EAAkBxM,EAAOyL,GAIvC,IAHA,IAAIgB,EAAM,EACNC,EAAO1M,EAAM1F,OAAS,EACtBqS,EAAS,EACND,EAAOD,EAAM,GAElB,GAAIzM,EADJ2M,EAASF,GAAQC,EAAOD,GAAQ,IACZhB,EAClBgB,EAAME,MACD,MAAI3M,EAAM2M,GAAUlB,GAGzB,OAAOkB,EAFPD,EAAOC,EAMX,OAAIF,EAAMzM,EAAM1F,OAAS,EACnBuC,KAAKyE,IAAImK,EAASzL,EAAMyM,IAAQ5P,KAAKyE,IAAItB,EAAMyM,EAAM,GAAKhB,GACrDgB,EAEAA,EAAM,EAGRA,EChBJ,SAASG,EAAgBvR,GAAiB,IAAdwR,EAAc,uDAAJ,GACrCC,EAAiCD,EAAjCC,UAAWC,EAAsBF,EAAtBE,QAASC,EAAaH,EAAbG,KAAMC,EAAOJ,EAAPI,GAgBhC,QAdkBzO,IAAdsO,IAEAA,OADWtO,IAATwO,EACUR,EAAkBnR,EAAG2R,GAErB,QAGAxO,IAAZuO,IAEAA,OADSvO,IAAPyO,EACQT,EAAkBnR,EAAG4R,GAErB5R,EAAEf,OAAS,GAGrBwS,EAAYC,EAAhB,OAAgD,CAACA,EAASD,GAAhCA,EAA1B,KAAqCC,EAArC,KACA,MAAO,CAAED,YAAWC,W,oBCKPjQ,MAjCf,SAAaoJ,GACX,IAAI2G,EAAUjM,UAAUtG,OAAS,QAAsBkE,IAAjBoC,UAAU,GAAmBA,UAAU,GAAK,GAElF,IAAK5C,EAAQkI,GACX,MAAM,IAAIlH,UAAU,0BAGtB,GAAqB,IAAjBkH,EAAM5L,OACR,MAAM,IAAI0E,UAAU,2BAGtB,IAAIkO,EAAqBL,EAAQC,UAC7BA,OAAmC,IAAvBI,EAAgC,EAAIA,EAChDC,EAAmBN,EAAQE,QAC3BA,OAA+B,IAArBI,EAA8BjH,EAAM5L,OAAS6S,EAE3D,GAAIL,EAAY,GAAKA,GAAa5G,EAAM5L,SAAW8S,OAAOC,UAAUP,GAClE,MAAM,IAAIhI,MAAM,4DAGlB,GAAIiI,GAAWD,GAAaC,EAAU7G,EAAM5L,SAAW8S,OAAOC,UAAUN,GACtE,MAAM,IAAIjI,MAAM,iFAKlB,IAFA,IAAIvH,EAAW2I,EAAM4G,GAEZrS,EAAIqS,EAAY,EAAGrS,EAAIsS,EAAStS,IACnCyL,EAAMzL,GAAK8C,IAAUA,EAAW2I,EAAMzL,IAG5C,OAAO8C,GCGMR,MAjCf,SAAamJ,GACX,IAAI2G,EAAUjM,UAAUtG,OAAS,QAAsBkE,IAAjBoC,UAAU,GAAmBA,UAAU,GAAK,GAElF,IAAK5C,EAAQkI,GACX,MAAM,IAAIlH,UAAU,0BAGtB,GAAqB,IAAjBkH,EAAM5L,OACR,MAAM,IAAI0E,UAAU,2BAGtB,IAAIkO,EAAqBL,EAAQC,UAC7BA,OAAmC,IAAvBI,EAAgC,EAAIA,EAChDC,EAAmBN,EAAQE,QAC3BA,OAA+B,IAArBI,EAA8BjH,EAAM5L,OAAS6S,EAE3D,GAAIL,EAAY,GAAKA,GAAa5G,EAAM5L,SAAW8S,OAAOC,UAAUP,GAClE,MAAM,IAAIhI,MAAM,4DAGlB,GAAIiI,GAAWD,GAAaC,EAAU7G,EAAM5L,SAAW8S,OAAOC,UAAUN,GACtE,MAAM,IAAIjI,MAAM,iFAKlB,IAFA,IAAI1H,EAAW8I,EAAM4G,GAEZrS,EAAIqS,EAAY,EAAGrS,EAAIsS,EAAStS,IACnCyL,EAAMzL,GAAK2C,IAAUA,EAAW8I,EAAMzL,IAG5C,OAAO2C,G,sCChCIkQ,GAAuB,EAAIzQ,KAAKiF,IAChCyL,EAAmB1Q,KAAKwD,KAAKxD,KAAKqI,GAAKrI,KAAKiF,KAC5C0L,EAAa3Q,KAAKwD,KAAK,GACvBoN,EAAY5Q,KAAKwD,KAAK,EAAIxD,KAAKiF,KAC/B4L,EAAsB7Q,KAAKwD,KAAK,EAAIxD,KAAKiF,KAAO,ECC9C,SAAS6L,EAAOtS,GAE7B,GAAU,IAANA,EAAS,OAAO,EACpB,IAAIuS,EAAgB/Q,KAAK4E,IAAI,EAAIpG,EAAIA,GACjCwS,EAAgBD,EAAgB,EAAI,GAHhC,KAGqC/Q,KAAKqI,IAC9C4I,EAAYjR,KAAKwD,KAAK,SAAAwN,EAAiB,GAAID,EAJvC,MAMR,OADiB/Q,KAAKwD,KAAKyN,EAAYD,IAClBxS,EAAI,EAAI,GAAK,GCL7B,IAAM0S,EAAb,WAOE,aAA0B,IAAdlB,EAAc,uDAAJ,GAAI,oBACxBjQ,KAAKoR,KAAOnB,EAAQoB,GAChBF,EAASG,YAAY,EAAIrB,EAAQoB,IACjCpB,EAAQmB,KACRnB,EAAQmB,KACR,IACJpR,KAAKuR,YACgB3P,IAAnBqO,EAAQsB,OACJtR,KAAKwD,MAAMiN,EAAsBzQ,KAAKqI,IAAMtI,KAAKoR,KACjDnB,EAAQsB,OAhBlB,2CA0BE,WAAsB,IAAdtB,EAAc,uDAAJ,GACVvS,EAAsCuS,EAAtCvS,OAAN,EAA4CuS,EAA9BuB,cAAd,MAAuBxR,KAAKyR,YAA5B,EAEK/T,IACHA,EAASuC,KAAKC,IAAID,KAAKgE,KAAKjE,KAAKoR,KAAOI,GAASvR,KAAK2E,IAAI,EAAG,IAAM,IACtD,IAAM,GAAGlH,IAKxB,IAFA,IAAMgU,GAAUhU,EAAS,GAAK,EACxB4H,EAAO,IAAIqM,aAAajU,GACrBG,EAAI,EAAGA,GAAK6T,EAAQ7T,IAC3ByH,EAAKzH,GAAKmC,KAAK4R,IAAI/T,EAAI6T,GAAU1R,KAAKuR,OACtCjM,EAAK5H,EAAS,EAAIG,GAAKyH,EAAKzH,GAG9B,OAAOyH,IAzCX,iBAiDE,SAAI7G,GACF,OAAO0S,EAASS,IAAInT,EAAGuB,KAAKoR,QAlDhC,uBA0DE,WAAyB,IAAfS,EAAe,uDAAR,MACf,OAAOV,EAASM,UAAUI,KA3D9B,qBAmEE,WACE,OAAOV,EAASW,QAAQ9R,KAAKoR,KAAM,CAAEG,OAAQvR,KAAKuR,WApEtD,yBA6EE,SAAYQ,GAEV,OAAOZ,EAASG,YAAYS,KA/EhC,yBAwFE,WAA8B,IAAlBX,EAAkB,uDAAXpR,KAAKoR,KACtB,OAAOD,EAASa,YAAYZ,KAzFhC,qBAgGE,SAAQA,GACNpR,KAAKoR,KAAOA,IAjGhB,uBAwGE,SAAUG,GACRvR,KAAKuR,OAASA,MAzGlB,KAmHAJ,EAASS,IAAM,SAAanT,GAAe,IAAZ2S,EAAY,uDAAL,IACpC,OAAOnR,KAAKgS,IAAIvB,EAAsBzQ,KAAK2E,IAAInG,EAAI2S,EAAM,KAS3DD,EAASG,YAAc,SAAqBS,GAC1C,OAAOA,EAAQlB,GASjBM,EAASa,YAAc,SAAqBZ,GAC1C,OAAOA,EAAOP,GAWhBM,EAASW,QAAU,SAAiBV,GAAoB,IAAdnB,EAAc,uDAAJ,GAClD,EAAqBA,EAAfsB,cAAN,MAAe,EAAf,EACA,OAAQA,EAASZ,EAAmBS,EAAQ,GAQ9CD,EAASM,UAAY,WAAkC,IAAfI,EAAe,uDAAR,MAC7C,OAAO5R,KAAKwD,KAAK,GAAKsN,EAAOc,ICnKxB,IAAMK,EAAb,WAOE,aAA0B,IAAdjC,EAAc,uDAAJ,GAAI,oBACxBjQ,KAAKoR,UAAwBxP,IAAjBqO,EAAQmB,KAAqB,IAAMnB,EAAQmB,KACvDpR,KAAKuR,YACgB3P,IAAnBqO,EAAQsB,OAAuB,EAAItR,KAAKqI,GAAKtI,KAAKoR,KAAOnB,EAAQsB,OAVvE,2CAmBE,WAAsB,IAAdtB,EAAc,uDAAJ,GACVvS,EAAsCuS,EAAtCvS,OAAN,EAA4CuS,EAA9BuB,cAAd,MAAuBxR,KAAKyR,YAA5B,EAEK/T,IACHA,EAASuC,KAAKC,IAAID,KAAKgE,KAAKjE,KAAKoR,KAAOI,GAASvR,KAAK2E,IAAI,EAAG,IAAM,IACtD,IAAM,GAAGlH,IAKxB,IAFA,IAAMgU,GAAUhU,EAAS,GAAK,EACxB4H,EAAO,IAAIqM,aAAajU,GACrBG,EAAI,EAAGA,GAAK6T,EAAQ7T,IAC3ByH,EAAKzH,GAAKmC,KAAK4R,IAAI/T,EAAI6T,GAAU1R,KAAKuR,OACtCjM,EAAK5H,EAAS,EAAIG,GAAKyH,EAAKzH,GAE9B,OAAOyH,IAjCX,iBAyCE,SAAI7G,GACF,OAAOyT,EAAWN,IAAInT,EAAGuB,KAAKoR,QA1ClC,uBAkDE,WAAyB,IAAfS,EAAe,uDAAR,MACf,OAAOK,EAAWT,UAAUI,KAnDhC,qBA2DE,WACE,OAAOK,EAAWJ,QAAQ9R,KAAKoR,KAAM,CAAEG,OAAQvR,KAAKuR,WA5DxD,yBAqEE,WAA8B,IAAlBH,EAAkB,uDAAXpR,KAAKoR,KACtB,OAAOc,EAAWF,YAAYZ,KAtElC,yBA+EE,SAAYW,GACV,OAAOG,EAAWZ,YAAYS,KAhFlC,qBAsFE,SAAQX,GACNpR,KAAKoR,KAAOA,IAvFhB,uBA8FE,SAAUG,GACRvR,KAAKuR,OAASA,MA/FlB,KAyGAW,EAAWN,IAAM,SAAanT,EAAG2S,GAC/B,IAAMe,EAAaf,EAAOA,EAC1B,OAAOe,GAAc,EAAIlS,KAAK2E,IAAInG,EAAG,GAAK0T,IAS5CD,EAAWF,YAAc,SAAqBZ,GAC5C,OAAOA,EAAOR,GAShBsB,EAAWZ,YAAc,SAAqBS,GAC5C,OAAOA,EAAQnB,GAUjBsB,EAAWJ,QAAU,SAAiBV,GAAoB,IAAdnB,EAAc,uDAAJ,GACpD,EAAqBA,EAAfsB,cAAN,MAAe,EAAf,EAEA,OAAQA,EAAStR,KAAKqI,GAAK8I,EAAQ,GAQrCc,EAAWT,UAAY,WAAkC,IAAfI,EAAe,uDAAR,MAC/C,OAAO,EAAI5R,KAAKmS,IAAInS,KAAKqI,IAAMuJ,EAAO,MC9IjC,IAAMQ,EAAb,WAQE,aAA0B,IAAdpC,EAAc,uDAAJ,GAAI,oBACxBjQ,KAAKR,QAAoBoC,IAAfqO,EAAQzQ,GAAmB,GAAMyQ,EAAQzQ,GACnDQ,KAAKoR,UAAwBxP,IAAjBqO,EAAQmB,KAAqB,IAAMnB,EAAQmB,KACvDpR,KAAKuR,YACgB3P,IAAnBqO,EAAQsB,OACJ,GACEvR,KAAKR,GAAKS,KAAKwD,MAAMiN,EAAsBzQ,KAAKqI,IAAOtI,KAAKoR,MAC1D,EAAIpR,KAAKR,IAAMQ,KAAKoR,KAAOnR,KAAKqI,GAAM,GAC1C2H,EAAQsB,OAhBlB,2CA2BE,WAAsB,IAAdtB,EAAc,uDAAJ,GACVvS,EAAsCuS,EAAtCvS,OAAN,EAA4CuS,EAA9BuB,cAAd,MAAuBxR,KAAKyR,YAA5B,EACK/T,IACHA,EAASuC,KAAKgE,KAAKjE,KAAKoR,KAAOI,IAClB,IAAM,GAAG9T,IAMxB,IAHA,IAAMgU,GAAUhU,EAAS,GAAK,EAE1B4H,EAAO,IAAIqM,aAAajU,GACnBG,EAAI,EAAGA,GAAK6T,EAAQ7T,IAC3ByH,EAAKzH,GAAKmC,KAAK4R,IAAI/T,EAAI6T,GAAU1R,KAAKuR,OACtCjM,EAAK5H,EAAS,EAAIG,GAAKyH,EAAKzH,GAG9B,OAAOyH,IA1CX,iBAmDE,SAAI7G,GACF,OAAO4T,EAAYT,IAAInT,EAAGuB,KAAKoR,KAAMpR,KAAKR,MApD9C,uBA6DE,WAAuC,IAA7BqS,EAA6B,uDAAtB,MAAQrS,EAAc,uDAATQ,KAAKR,GACjC,OAAO6S,EAAYZ,UAAUI,EAAMrS,KA9DvC,qBAqEE,WACE,OAAO6S,EAAYP,QAAQ9R,KAAKoR,KAAM,CAAEG,OAAQvR,KAAKuR,OAAQ/R,GAAIQ,KAAKR,OAtE1E,yBA+EE,SAAYuS,EAAOvS,GACjB,OAAO6S,EAAYf,YAAYS,EAAOvS,KAhF1C,yBAwFE,WAA4C,IAAhC4R,EAAgC,uDAAzBpR,KAAKoR,KAAM5R,EAAc,uDAATQ,KAAKR,GACtC,OAAO6S,EAAYL,YAAYZ,EAAM5R,KAzFzC,qBAgGE,SAAQ4R,GACNpR,KAAKoR,KAAOA,IAjGhB,uBAwGE,SAAUG,GACRvR,KAAKuR,OAASA,IAzGlB,mBAgHE,SAAM/R,GACJQ,KAAKR,GAAKA,MAjHd,KA4HA6S,EAAYT,IAAM,SAAanT,EAAG2S,GAAgB,IAAV5R,EAAU,uDAAL,GAC3C,OAAQ,EAAIA,GAAM0S,EAAWN,IAAInT,EAAG2S,GAAQ5R,EAAK2R,EAASS,IAAInT,EAAG2S,IASnEiB,EAAYf,YAAc,SAAqBS,GAAiB,IAAVvS,EAAU,uDAAL,GACzD,OAAOuS,GAASvS,EAAKsR,EAAsB,IAQ7CuB,EAAYL,YAAc,SAAqBZ,GAAgB,IAAV5R,EAAU,uDAAL,GACxD,OAAO4R,GAAQ5R,EAAKsR,EAAsB,IAW5CuB,EAAYP,QAAU,SAAiBV,GAAoB,IAAdnB,EAAc,uDAAJ,GACrD,EAA+BA,EAAzBsB,cAAN,MAAe,EAAf,IAA+BtB,EAAbzQ,UAAlB,MAAuB,GAAvB,EACA,OAAQ4R,EAAOG,GAAU/R,EAAKmR,GAAoB,EAAInR,GAAMS,KAAKqI,IAAO,GAS1E+J,EAAYZ,UAAY,WAA4C,IAAzBI,EAAyB,uDAAlB,MAAQrS,EAAU,uDAAL,GAC7D,OAAOA,EAAK,EAAI0S,EAAWT,UAAUI,GAAQV,EAASM,UAAUI,IC7KlE,IAAIS,EAAO,CAAC,IAAK,KAEJC,EAAb,WAYE,aAA0B,IAAdtC,EAAc,uDAAJ,GAAI,oBACxB,IADwB,EACxB,EAAiCA,EAA3BmB,KAAMoB,OAAZ,MAAyB,IAAzB,EADwB,cAGVF,GAHU,IAGxB,2BAAoB,KAAXzU,EAAW,QACduT,OAAI,EAINA,EAHGnB,EAAQpS,GAGJoS,EAAQpS,GAAGwT,GACdkB,EAAWjB,YAAY,EAAIrB,EAAQpS,GAAGwT,IACtCpB,EAAQpS,GAAGuT,MAAQoB,EAJhBA,EAMTxS,KAAKnC,GAAK,CAAEuT,SAZU,8BAexBpR,KAAKuR,YACgB3P,IAAnBqO,EAAQsB,QACHb,EAAsBzQ,KAAKqI,GAAKtI,KAAKvB,EAAE2S,KAAOpR,KAAKtB,EAAE0S,KACtDnB,EAAQsB,OA9BlB,2CA6CE,WAAsB,IAAdtB,EAAc,uDAAJ,GAChB,EAA4DA,EAAtDxR,SAAN,MAAU,GAAV,IAA4DwR,EAA9CvR,SAAd,MAAkB,GAAlB,IAA4DuR,EAAtCuB,cAAtB,MAA+BxR,KAAKyR,YAApC,EAAiD/T,EAAWuS,EAAXvS,OAE7C+U,EAAUhU,EAAEf,QAAUA,EAC1B,IAAK+U,EAAS,CACZ,MAAmChU,EAA7B+S,OAAQkB,OAAd,MAAwBlB,EAAxB,GACAiB,EAAUxS,KAAKC,IAAID,KAAKgE,KAAKjE,KAAKvB,EAAE2S,KAAOsB,GAAUzS,KAAK2E,IAAI,EAAG,IAAM,IACzD,IAAM,GAAG6N,IAGzB,IAAIE,EAAUjU,EAAEhB,QAAUA,EAC1B,IAAKiV,EAAS,CACZ,MAAmCjU,EAA7B8S,OAAQoB,OAAd,MAAwBpB,EAAxB,GACAmB,EAAU1S,KAAKC,IAAID,KAAKgE,KAAKjE,KAAKtB,EAAE0S,KAAOwB,GAAU3S,KAAK2E,IAAI,EAAG,IAAM,IACzD,IAAM,GAAG+N,IAMzB,IAHA,IAAME,GAAWJ,EAAU,GAAK,EAC1BK,GAAWH,EAAU,GAAK,EAC1BrN,EAAO,IAAIxG,MAAM2T,GACd5U,EAAI,EAAGA,EAAI4U,EAAS5U,IAC3ByH,EAAKzH,GAAK,IAAIiB,MAAM6T,GAGtB,IAAK,IAAI9U,EAAI,EAAGA,EAAI4U,EAAS5U,IAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAI6U,EAAS7U,IAC3BwH,EAAKzH,GAAGC,GAAKkC,KAAK4R,IAAI/T,EAAIgV,EAAS/U,EAAIgV,GAAW9S,KAAKuR,OAI3D,OAAOjM,IA3EX,iBAoFE,SAAI7G,EAAGC,GACL,OAAO6T,EAAWX,IAAInT,EAAGC,EAAGsB,KAAKvB,EAAE2S,KAAMpR,KAAKtB,EAAE0S,QArFpD,uBA6FE,WAA2B,IAAjB2B,EAAiB,uDAAR,MACjB,OAAOR,EAAWd,UAAUsB,KA9FhC,uBAsGE,WACE,OAAOR,EAAWS,UAAUhT,KAAKvB,EAAE2S,KAAMpR,KAAKtB,EAAE0S,KAAM,CACpDG,OAAQvR,KAAKuR,WAxGnB,yBAkHE,SAAYQ,GAEV,OAAOQ,EAAWjB,YAAYS,KApHlC,yBA6HE,WAAgC,IAApBX,EAAoB,uDAAbpR,KAAKvB,EAAE2S,KACxB,OAAOmB,EAAWP,YAAYZ,KA9HlC,qBAsIE,SAAQA,EAAM6B,GACPA,IAAWA,EAAYX,GACvBxT,MAAMsC,QAAQ6R,KAAYA,EAAY,CAACA,IAFrB,oBAGTA,GAHS,IAGvB,2BAAyB,KACnBC,EADmB,QACNC,cACjB,GAAiB,MAAbD,GAAiC,MAAbA,EACtB,MAAM,IAAIhL,MAAM,+BAElBlI,KAAKkT,GAAU9B,KAAOA,GARD,iCAtI3B,uBAsJE,SAAUG,GACRvR,KAAKuR,OAASA,MAvJlB,KAmKAgB,EAAWX,IAAM,SAAanT,EAAGC,GAA6B,IAA1B0U,EAA0B,uDAAlB,IAAKC,EAAa,uDAAL,IACvD,OAAOpT,KAAKgS,IACVvB,GAAuBzQ,KAAK2E,IAAInG,EAAI2U,EAAO,GAAKnT,KAAK2E,IAAIlG,EAAI2U,EAAO,MAUxEd,EAAWjB,YAAc,SAAqBS,GAC5C,OAAOA,EAAQlB,GASjB0B,EAAWP,YAAc,SAAqBZ,GAC5C,OAAOA,EAAOP,GAYhB0B,EAAWS,UAAY,SAAmBI,EAAOC,GAAqB,IAAdpD,EAAc,uDAAJ,GAChE,EAAqBA,EAAfsB,cAAN,MAAe,EAAf,EACA,OAAQA,EAAStR,KAAKqI,GAAK8K,EAAQC,EAASpT,KAAKiF,IAAM,GAQzDqN,EAAWd,UAAY,WAAoC,IAAjBsB,EAAiB,uDAAR,MACjD,OAAO9S,KAAKwD,KAAK,GAAKsN,EAAOgC,I,mCCpKhBO,MA9Cf,SAAiBhK,GACf,IAQIiK,EARAtD,EAAUjM,UAAUtG,OAAS,QAAsBkE,IAAjBoC,UAAU,GAAmBA,UAAU,GAAK,GAElF,IAAK5C,EAAQkI,GACX,MAAM,IAAIlH,UAAU,0BACf,GAAqB,IAAjBkH,EAAM5L,OACf,MAAM,IAAI0E,UAAU,2BAKtB,QAAuBR,IAAnBqO,EAAQsD,OAAsB,CAChC,IAAKnS,EAAQ6O,EAAQsD,QACnB,MAAM,IAAInR,UAAU,+CAGtBmR,EAAStD,EAAQsD,YAEjBA,EAAS,IAAIzU,MAAMwK,EAAM5L,QAG3B,IAAI8V,EAAatT,EAAIoJ,GACjBmK,EAAatT,EAAImJ,GAErB,GAAIkK,IAAeC,EACjB,MAAM,IAAIC,WAAW,+EAGvB,IAAIC,EAAe1D,EAAQ/P,IACvBS,OAA4B,IAAjBgT,EAA0B1D,EAAQ2D,WAAaJ,EAAa,EAAIG,EAC3EE,EAAe5D,EAAQ9P,IACvBK,OAA4B,IAAjBqT,EAA0B5D,EAAQ2D,WAAaH,EAAa,EAAII,EAE/E,GAAIlT,GAAYH,EACd,MAAM,IAAIkT,WAAW,8CAKvB,IAFA,IAAIlC,GAAUhR,EAAWG,IAAa8S,EAAaD,GAE1C3V,EAAI,EAAGA,EAAIyL,EAAM5L,OAAQG,IAChC0V,EAAO1V,IAAMyL,EAAMzL,GAAK2V,GAAchC,EAAS7Q,EAGjD,OAAO4S,GC/CHO,EAAS,IAAIC,OAAO,GACpBC,EAAa,IAAID,OAAO,GAMvB,SAASE,EAAyB1M,GAAsB,IAAd0I,EAAc,uDAAJ,GACzD,EAA0DA,EAAlDiE,eAAR,MAAkB,GAAlB,IAA0DjE,EAApCkE,kBAAtB,MAAmC,GAAnC,IAA0DlE,EAAnBmE,kBAAvC,MAAoD,EAApD,EACA,gBAAU7M,EAAO8M,YAAYC,KAA7B,eACAR,EADA,cAEAE,GAFA,OAEaO,EAAYhN,EAAQ2M,EAASC,EAAYC,GAFtD,aAGAN,EAHA,cAIAA,EAJA,iBAIevM,EAAOiN,KAJtB,aAKAV,EALA,oBAKkBvM,EAAOkN,QALzB,OASF,SAASF,EAAYhN,EAAQ2M,EAASC,EAAYC,GAKhD,IAJA,IAAQI,EAAkBjN,EAAlBiN,KAAMC,EAAYlN,EAAZkN,QACRC,EAAOzU,KAAKC,IAAIsU,EAAMN,GACtBS,EAAO1U,KAAKC,IAAIuU,EAASN,GACzBS,EAAS,GACN/W,EAAI,EAAGA,EAAI6W,EAAM7W,IAAK,CAE7B,IADA,IAAIgX,EAAO,GACF/W,EAAI,EAAGA,EAAI6W,EAAM7W,IACxB+W,EAAK5S,KAAK6S,EAAavN,EAAOwN,IAAIlX,EAAGC,GAAIsW,IAE3CQ,EAAO3S,KAAP,UAAe4S,EAAKG,KAAK,OAQ3B,OANIL,IAASF,IACXG,EAAOA,EAAOlX,OAAS,IAAvB,eAAqC+W,EAAUN,EAA/C,kBAEEO,IAASF,GACXI,EAAO3S,KAAP,cAAmBuS,EAAON,EAA1B,eAEKU,EAAOI,KAAP,YAAiBhB,IAG1B,SAASc,EAAaG,EAAKb,GACzB,IAAMc,EAASC,OAAOF,GACtB,GAAIC,EAAOxX,QAAU0W,EACnB,OAAOc,EAAOE,OAAOhB,EAAY,KAEnC,IAAMiB,EAAUJ,EAAIK,YAAYlB,EAAa,GAC7C,GAAIiB,EAAQ3X,QAAU0W,EACpB,OAAOiB,EAET,IAAME,EAAcN,EAAIO,cAAcpB,EAAa,GAC7CqB,EAASF,EAAYG,QAAQ,KAC7BlY,EAAI+X,EAAYI,MAAMF,GAC5B,OAAOF,EAAYI,MAAM,EAAGvB,EAAa5W,EAAEE,QAAUF,EC5ChD,SAASoY,EAAcrO,EAAQsO,EAAOC,GAC3C,IAAI3V,EAAM2V,EAAQvO,EAAOiN,KAAOjN,EAAOiN,KAAO,EAC9C,GAAIqB,EAAQ,GAAKA,EAAQ1V,EACvB,MAAM,IAAIuT,WAAW,0BAWlB,SAASqC,EAAiBxO,EAAQsO,EAAOC,GAC9C,IAAI3V,EAAM2V,EAAQvO,EAAOkN,QAAUlN,EAAOkN,QAAU,EACpD,GAAIoB,EAAQ,GAAKA,EAAQ1V,EACvB,MAAM,IAAIuT,WAAW,6BAYlB,SAASsC,EAAezO,EAAQ0O,GAIrC,GAHIA,EAAOC,YACTD,EAASA,EAAOC,aAEdD,EAAOvY,SAAW6J,EAAOkN,QAC3B,MAAM,IAAIf,WACR,yDAGJ,OAAOuC,EAWF,SAASE,EAAkB5O,EAAQ0O,GAIxC,GAHIA,EAAOC,YACTD,EAASA,EAAOC,aAEdD,EAAOvY,SAAW6J,EAAOiN,KAC3B,MAAM,IAAId,WAAW,sDAEvB,OAAOuC,EAUF,SAASG,EAAgB7O,EAAQ8O,GACtC,GAA0B,kBAAfA,EACT,MAAM,IAAIjU,UAAU,mCAOtB,GAJaiU,EAAWC,MAAK,SAACvX,GAC5B,OAAOA,EAAI,GAAKA,GAAKwI,EAAOiN,QAI5B,MAAM,IAAId,WAAW,gCAKvB,OAFK5U,MAAMsC,QAAQiV,KAAaA,EAAavX,MAAMsR,KAAKiG,IAEjDA,EAGF,SAASE,EAAmBhP,EAAQiP,GACzC,GAA6B,kBAAlBA,EACT,MAAM,IAAIpU,UAAU,sCAOtB,GAJgBoU,EAAcF,MAAK,SAACvY,GAClC,OAAOA,EAAI,GAAKA,GAAKwJ,EAAOkN,WAI5B,MAAM,IAAIf,WAAW,mCAIvB,OAFK5U,MAAMsC,QAAQoV,KAAgBA,EAAgB1X,MAAMsR,KAAKoG,IAEvDA,EAGF,SAASC,EAAWlP,EAAQmP,EAAUC,EAAQC,EAAaC,GAChE,GAAyB,IAArB7S,UAAUtG,OACZ,MAAM,IAAIgW,WAAW,wBAMvB,GAJAoD,EAAY,WAAYJ,GACxBI,EAAY,SAAUH,GACtBG,EAAY,cAAeF,GAC3BE,EAAY,YAAaD,GAEvBH,EAAWC,GACXC,EAAcC,GACdH,EAAW,GACXA,GAAYnP,EAAOiN,MACnBmC,EAAS,GACTA,GAAUpP,EAAOiN,MACjBoC,EAAc,GACdA,GAAerP,EAAOkN,SACtBoC,EAAY,GACZA,GAAatP,EAAOkN,QAEpB,MAAM,IAAIf,WAAW,sCAIlB,SAASqD,EAASrZ,GAEvB,IAF0C,IAAXwE,EAAW,uDAAH,EACnCkB,EAAQ,GACHvF,EAAI,EAAGA,EAAIH,EAAQG,IAC1BuF,EAAMnB,KAAKC,GAEb,OAAOkB,EAGT,SAAS0T,EAAYxC,EAAMpS,GACzB,GAAqB,kBAAVA,EACT,MAAM,IAAIE,UAAJ,UAAiBkS,EAAjB,sBAIH,SAAS0C,EAAczP,GAC5B,GAAIA,EAAO0P,UACT,MAAM,IAAI/O,MAAM,yCCtFb,SAASgP,EAAc3P,EAAQ4P,EAAU/Q,GAK9C,IAJA,IAAMoO,EAAOjN,EAAOiN,KACd4C,EAAO7P,EAAOkN,QACdtR,EAAW,GAERtF,EAAI,EAAGA,EAAI2W,EAAM3W,IAAK,CAI7B,IAHA,IAAIwZ,EAAO,EACPC,EAAO,EACP7Y,EAAI,EACCX,EAAI,EAAGA,EAAIsZ,EAAMtZ,IAExBuZ,GADA5Y,EAAI8I,EAAOwN,IAAIlX,EAAGC,GAAKsI,EAAKvI,GAE5ByZ,GAAQ7Y,EAAIA,EAEV0Y,EACFhU,EAASlB,MAAMqV,EAAQD,EAAOA,EAAQD,IAASA,EAAO,IAEtDjU,EAASlB,MAAMqV,EAAQD,EAAOA,EAAQD,GAAQA,GAGlD,OAAOjU,EAGF,SAASoU,EAAiBhQ,EAAQ4P,EAAU/Q,GAKjD,IAJA,IAAMoO,EAAOjN,EAAOiN,KACd4C,EAAO7P,EAAOkN,QACdtR,EAAW,GAERrF,EAAI,EAAGA,EAAIsZ,EAAMtZ,IAAK,CAI7B,IAHA,IAAIuZ,EAAO,EACPC,EAAO,EACP7Y,EAAI,EACCZ,EAAI,EAAGA,EAAI2W,EAAM3W,IAExBwZ,GADA5Y,EAAI8I,EAAOwN,IAAIlX,EAAGC,GAAKsI,EAAKtI,GAE5BwZ,GAAQ7Y,EAAIA,EAEV0Y,EACFhU,EAASlB,MAAMqV,EAAQD,EAAOA,EAAQ7C,IAASA,EAAO,IAEtDrR,EAASlB,MAAMqV,EAAQD,EAAOA,EAAQ7C,GAAQA,GAGlD,OAAOrR,EAGF,SAASqU,EAAYjQ,EAAQ4P,EAAU/Q,GAQ5C,IAPA,IAAMoO,EAAOjN,EAAOiN,KACd4C,EAAO7P,EAAOkN,QACdxM,EAAOuM,EAAO4C,EAEhBC,EAAO,EACPC,EAAO,EACP7Y,EAAI,EACCZ,EAAI,EAAGA,EAAI2W,EAAM3W,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIsZ,EAAMtZ,IAExBuZ,GADA5Y,EAAI8I,EAAOwN,IAAIlX,EAAGC,GAAKsI,EAEvBkR,GAAQ7Y,EAAIA,EAGhB,OAAI0Y,GACMG,EAAQD,EAAOA,EAAQpP,IAASA,EAAO,IAEvCqP,EAAQD,EAAOA,EAAQpP,GAAQA,EAIpC,SAASwP,EAAYlQ,EAAQnB,GAClC,IAAK,IAAIvI,EAAI,EAAGA,EAAI0J,EAAOiN,KAAM3W,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIyJ,EAAOkN,QAAS3W,IAClCyJ,EAAOmQ,IAAI7Z,EAAGC,EAAGyJ,EAAOwN,IAAIlX,EAAGC,GAAKsI,EAAKvI,IAKxC,SAAS8Z,EAAepQ,EAAQnB,GACrC,IAAK,IAAIvI,EAAI,EAAGA,EAAI0J,EAAOiN,KAAM3W,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIyJ,EAAOkN,QAAS3W,IAClCyJ,EAAOmQ,IAAI7Z,EAAGC,EAAGyJ,EAAOwN,IAAIlX,EAAGC,GAAKsI,EAAKtI,IAKxC,SAAS8Z,EAAUrQ,EAAQnB,GAChC,IAAK,IAAIvI,EAAI,EAAGA,EAAI0J,EAAOiN,KAAM3W,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIyJ,EAAOkN,QAAS3W,IAClCyJ,EAAOmQ,IAAI7Z,EAAGC,EAAGyJ,EAAOwN,IAAIlX,EAAGC,GAAKsI,GAKnC,SAASyR,EAActQ,GAE5B,IADA,IAAMuQ,EAAQ,GACLja,EAAI,EAAGA,EAAI0J,EAAOiN,KAAM3W,IAAK,CAEpC,IADA,IAAIwJ,EAAM,EACDvJ,EAAI,EAAGA,EAAIyJ,EAAOkN,QAAS3W,IAClCuJ,GAAOpH,KAAK2E,IAAI2C,EAAOwN,IAAIlX,EAAGC,GAAI,IAAMyJ,EAAOkN,QAAU,GAE3DqD,EAAM7V,KAAKhC,KAAKwD,KAAK4D,IAEvB,OAAOyQ,EAGF,SAASC,EAAWxQ,EAAQuQ,GACjC,IAAK,IAAIja,EAAI,EAAGA,EAAI0J,EAAOiN,KAAM3W,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIyJ,EAAOkN,QAAS3W,IAClCyJ,EAAOmQ,IAAI7Z,EAAGC,EAAGyJ,EAAOwN,IAAIlX,EAAGC,GAAKga,EAAMja,IAKzC,SAASma,EAAiBzQ,GAE/B,IADA,IAAMuQ,EAAQ,GACLha,EAAI,EAAGA,EAAIyJ,EAAOkN,QAAS3W,IAAK,CAEvC,IADA,IAAIuJ,EAAM,EACDxJ,EAAI,EAAGA,EAAI0J,EAAOiN,KAAM3W,IAC/BwJ,GAAOpH,KAAK2E,IAAI2C,EAAOwN,IAAIlX,EAAGC,GAAI,IAAMyJ,EAAOiN,KAAO,GAExDsD,EAAM7V,KAAKhC,KAAKwD,KAAK4D,IAEvB,OAAOyQ,EAGF,SAASG,EAAc1Q,EAAQuQ,GACpC,IAAK,IAAIja,EAAI,EAAGA,EAAI0J,EAAOiN,KAAM3W,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIyJ,EAAOkN,QAAS3W,IAClCyJ,EAAOmQ,IAAI7Z,EAAGC,EAAGyJ,EAAOwN,IAAIlX,EAAGC,GAAKga,EAAMha,IAKzC,SAASoa,EAAY3Q,GAG1B,IAFA,IAAM4Q,EAAU5Q,EAAOU,KAAO,EAC1BZ,EAAM,EACDvJ,EAAI,EAAGA,EAAIyJ,EAAOkN,QAAS3W,IAClC,IAAK,IAAID,EAAI,EAAGA,EAAI0J,EAAOiN,KAAM3W,IAC/BwJ,GAAOpH,KAAK2E,IAAI2C,EAAOwN,IAAIlX,EAAGC,GAAI,GAAKqa,EAG3C,OAAOlY,KAAKwD,KAAK4D,GAGZ,SAAS+Q,EAAS7Q,EAAQuQ,GAC/B,IAAK,IAAIja,EAAI,EAAGA,EAAI0J,EAAOiN,KAAM3W,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIyJ,EAAOkN,QAAS3W,IAClCyJ,EAAOmQ,IAAI7Z,EAAGC,EAAGyJ,EAAOwN,IAAIlX,EAAGC,GAAKga,GC9KnC,IAAMO,GAAb,kFAmIE,WACE,OAAOrY,KAAKwU,KAAOxU,KAAKyU,UApI5B,mBAuIE,SAAM6D,GACJ,GAAwB,oBAAbA,EACT,MAAM,IAAIlW,UAAU,+BAEtB,IAAK,IAAIvE,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCwa,EAAStS,KAAKhG,KAAMnC,EAAGC,GAG3B,OAAOkC,OAhJX,uBAmJE,WAEE,IADA,IAAIoD,EAAQ,GACHvF,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCsF,EAAMnB,KAAKjC,KAAK+U,IAAIlX,EAAGC,IAG3B,OAAOsF,IA1JX,uBA6JE,WAEE,IADA,IAAImV,EAAO,GACF1a,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAAK,CAClC0a,EAAKtW,KAAK,IACV,IAAK,IAAInE,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCya,EAAK1a,GAAGoE,KAAKjC,KAAK+U,IAAIlX,EAAGC,IAG7B,OAAOya,IArKX,oBAwKE,WACE,OAAOvY,KAAKwY,cAzKhB,yBA4KE,WACE,OAAqB,IAAdxY,KAAKwU,OA7KhB,4BAgLE,WACE,OAAwB,IAAjBxU,KAAKyU,UAjLhB,sBAoLE,WACE,OAAqB,IAAdzU,KAAKwU,MAA+B,IAAjBxU,KAAKyU,UArLnC,sBAwLE,WACE,OAAOzU,KAAKwU,OAASxU,KAAKyU,UAzL9B,qBA4LE,WACE,OAAqB,IAAdzU,KAAKwU,MAA+B,IAAjBxU,KAAKyU,UA7LnC,yBAgME,WACE,GAAIzU,KAAKyY,WAAY,CACnB,IAAK,IAAI5a,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,GAAKD,EAAGC,IACtB,GAAIkC,KAAK+U,IAAIlX,EAAGC,KAAOkC,KAAK+U,IAAIjX,EAAGD,GACjC,OAAO,EAIb,OAAO,EAET,OAAO,IA3MX,2BA8ME,WAME,IALA,IAAIA,EAAI,EACJC,EAAI,EACJ4a,GAAkB,EAClBC,GAAgB,EAChBC,GAAU,EACP/a,EAAImC,KAAKwU,MAAQmE,GAAe,CAGrC,IAFA7a,EAAI,EACJ8a,GAAU,EACH9a,EAAIkC,KAAKyU,UAAuB,IAAZmE,GACF,IAAnB5Y,KAAK+U,IAAIlX,EAAGC,GACdA,IAC4B,IAAnBkC,KAAK+U,IAAIlX,EAAGC,IAAYA,EAAI4a,GACrCE,GAAU,EACVF,EAAiB5a,IAEjB6a,GAAgB,EAChBC,GAAU,GAGd/a,IAEF,OAAO8a,IApOX,kCAuOE,WAME,IALA,IAAI9a,EAAI,EACJC,EAAI,EACJ4a,GAAkB,EAClBG,GAAuB,EACvBD,GAAU,EACP/a,EAAImC,KAAKwU,MAAQqE,GAAsB,CAG5C,IAFA/a,EAAI,EACJ8a,GAAU,EACH9a,EAAIkC,KAAKyU,UAAuB,IAAZmE,GACF,IAAnB5Y,KAAK+U,IAAIlX,EAAGC,GACdA,IAC4B,IAAnBkC,KAAK+U,IAAIlX,EAAGC,IAAYA,EAAI4a,GACrCE,GAAU,EACVF,EAAiB5a,IAEjB+a,GAAuB,EACvBD,GAAU,GAGd,IAAK,IAAInO,EAAI3M,EAAI,EAAG2M,EAAIzK,KAAKwU,KAAM/J,IACV,IAAnBzK,KAAK+U,IAAIlX,EAAG4M,KACdoO,GAAuB,GAG3Bhb,IAEF,OAAOgb,IAlQX,yBAqQE,WAIE,IAHA,IAAIjE,EAAS5U,KAAK8Y,QACdlb,EAAI,EACJ6M,EAAI,EACD7M,EAAIgX,EAAOJ,MAAQ/J,EAAImK,EAAOH,SAAS,CAE5C,IADA,IAAIsE,EAAOnb,EACFC,EAAID,EAAGC,EAAI+W,EAAOJ,KAAM3W,IAC3B+W,EAAOG,IAAIlX,EAAG4M,GAAKmK,EAAOG,IAAIgE,EAAMtO,KACtCsO,EAAOlb,GAGX,GAA4B,IAAxB+W,EAAOG,IAAIgE,EAAMtO,GACnBA,QACK,CACLmK,EAAOoE,SAASpb,EAAGmb,GAEnB,IADA,IAAIE,EAAMrE,EAAOG,IAAInX,EAAG6M,GACf3M,EAAI2M,EAAG3M,EAAI8W,EAAOH,QAAS3W,IAClC8W,EAAO8C,IAAI9Z,EAAGE,EAAG8W,EAAOG,IAAInX,EAAGE,GAAKmb,GAEtC,IAAK,IAAIpb,EAAID,EAAI,EAAGC,EAAI+W,EAAOJ,KAAM3W,IAAK,CACxC,IAAI2T,EAASoD,EAAOG,IAAIlX,EAAG4M,GAAKmK,EAAOG,IAAInX,EAAG6M,GAC9CmK,EAAO8C,IAAI7Z,EAAG4M,EAAG,GACjB,IAAK,IAAI3M,EAAI2M,EAAI,EAAG3M,EAAI8W,EAAOH,QAAS3W,IACtC8W,EAAO8C,IAAI7Z,EAAGC,EAAG8W,EAAOG,IAAIlX,EAAGC,GAAK8W,EAAOG,IAAInX,EAAGE,GAAK0T,GAG3D5T,IACA6M,KAGJ,OAAOmK,IAnSX,gCAsSE,WAKE,IAJA,IAAIA,EAAS5U,KAAKkZ,cACd7V,EAAIuR,EAAOH,QACX5V,EAAI+V,EAAOJ,KACX5W,EAAIiB,EAAI,EACLjB,GAAK,GACV,GAAyB,IAArBgX,EAAOuE,OAAOvb,GAChBA,QACK,CAGL,IAFA,IAAIoB,EAAI,EACJoa,GAAQ,EACLpa,EAAIH,IAAe,IAAVua,GACW,IAArBxE,EAAOG,IAAInX,EAAGoB,GAChBoa,GAAQ,EAERpa,IAGJ,IAAK,IAAInB,EAAI,EAAGA,EAAID,EAAGC,IAErB,IADA,IAAI2T,EAASoD,EAAOG,IAAIlX,EAAGmB,GAClBlB,EAAIkB,EAAGlB,EAAIuF,EAAGvF,IAAK,CAC1B,IAAImb,EAAMrE,EAAOG,IAAIlX,EAAGC,GAAK0T,EAASoD,EAAOG,IAAInX,EAAGE,GACpD8W,EAAO8C,IAAI7Z,EAAGC,EAAGmb,GAGrBrb,IAGJ,OAAOgX,IAlUX,iBAqUE,WACE,MAAM,IAAI1M,MAAM,iCAtUpB,iBAyUE,WACE,MAAM,IAAIA,MAAM,iCA1UpB,oBA6UE,WAAqB,IAAd+H,EAAc,uDAAJ,GACf,GAAuB,kBAAZA,EACT,MAAM,IAAI7N,UAAU,6BAEtB,MAAkC6N,EAA1BuE,YAAR,MAAe,EAAf,IAAkCvE,EAAhBwE,eAAlB,MAA4B,EAA5B,EACA,IAAKjE,OAAOC,UAAU+D,IAASA,GAAQ,EACrC,MAAM,IAAIpS,UAAU,mCAEtB,IAAKoO,OAAOC,UAAUgE,IAAYA,GAAW,EAC3C,MAAM,IAAIrS,UAAU,sCAGtB,IADA,IAAImF,EAAS,IAAI8R,GAAOrZ,KAAKwU,KAAOA,EAAMxU,KAAKyU,QAAUA,GAChD5W,EAAI,EAAGA,EAAI2W,EAAM3W,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAI2W,EAAS3W,IAC3ByJ,EAAO+R,aAAatZ,KAAMA,KAAKwU,KAAO3W,EAAGmC,KAAKyU,QAAU3W,GAG5D,OAAOyJ,IA9VX,kBAiWE,SAAKrF,GACH,IAAK,IAAIrE,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGoE,GAGnB,OAAOlC,OAvWX,iBA0WE,WACE,OAAOA,KAAKuZ,MAAM,KA3WtB,oBA8WE,SAAO1D,GACLD,EAAc5V,KAAM6V,GAEpB,IADA,IAAIrO,EAAM,GACD3J,EAAI,EAAGA,EAAImC,KAAKyU,QAAS5W,IAChC2J,EAAIvF,KAAKjC,KAAK+U,IAAIc,EAAOhY,IAE3B,OAAO2J,IApXX,0BAuXE,SAAaqO,GACX,OAAOwD,GAAOG,UAAUxZ,KAAKyZ,OAAO5D,MAxXxC,oBA2XE,SAAOA,EAAOzS,GACZwS,EAAc5V,KAAM6V,GACpBzS,EAAQ4S,EAAehW,KAAMoD,GAC7B,IAAK,IAAIvF,EAAI,EAAGA,EAAImC,KAAKyU,QAAS5W,IAChCmC,KAAK0X,IAAI7B,EAAOhY,EAAGuF,EAAMvF,IAE3B,OAAOmC,OAjYX,sBAoYE,SAAS0Z,EAAMC,GACb/D,EAAc5V,KAAM0Z,GACpB9D,EAAc5V,KAAM2Z,GACpB,IAAK,IAAI9b,EAAI,EAAGA,EAAImC,KAAKyU,QAAS5W,IAAK,CACrC,IAAI+b,EAAO5Z,KAAK+U,IAAI2E,EAAM7b,GAC1BmC,KAAK0X,IAAIgC,EAAM7b,EAAGmC,KAAK+U,IAAI4E,EAAM9b,IACjCmC,KAAK0X,IAAIiC,EAAM9b,EAAG+b,GAEpB,OAAO5Z,OA5YX,uBA+YE,SAAU6V,GACRE,EAAiB/V,KAAM6V,GAEvB,IADA,IAAIgE,EAAS,GACJhc,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7Bgc,EAAO5X,KAAKjC,KAAK+U,IAAIlX,EAAGgY,IAE1B,OAAOgE,IArZX,6BAwZE,SAAgBhE,GACd,OAAOwD,GAAOS,aAAa9Z,KAAK+Z,UAAUlE,MAzZ9C,uBA4ZE,SAAUA,EAAOzS,GACf2S,EAAiB/V,KAAM6V,GACvBzS,EAAQ+S,EAAkBnW,KAAMoD,GAChC,IAAK,IAAIvF,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7BmC,KAAK0X,IAAI7Z,EAAGgY,EAAOzS,EAAMvF,IAE3B,OAAOmC,OAlaX,yBAqaE,SAAYga,EAASC,GACnBlE,EAAiB/V,KAAMga,GACvBjE,EAAiB/V,KAAMia,GACvB,IAAK,IAAIpc,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAAK,CAClC,IAAI+b,EAAO5Z,KAAK+U,IAAIlX,EAAGmc,GACvBha,KAAK0X,IAAI7Z,EAAGmc,EAASha,KAAK+U,IAAIlX,EAAGoc,IACjCja,KAAK0X,IAAI7Z,EAAGoc,EAASL,GAEvB,OAAO5Z,OA7aX,0BAgbE,SAAaiW,GACXA,EAASD,EAAehW,KAAMiW,GAC9B,IAAK,IAAIpY,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKmY,EAAOnY,IAG3C,OAAOkC,OAvbX,0BA0bE,SAAaiW,GACXA,EAASD,EAAehW,KAAMiW,GAC9B,IAAK,IAAIpY,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKmY,EAAOnY,IAG3C,OAAOkC,OAjcX,0BAocE,SAAaiW,GACXA,EAASD,EAAehW,KAAMiW,GAC9B,IAAK,IAAIpY,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKmY,EAAOnY,IAG3C,OAAOkC,OA3cX,0BA8cE,SAAaiW,GACXA,EAASD,EAAehW,KAAMiW,GAC9B,IAAK,IAAIpY,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKmY,EAAOnY,IAG3C,OAAOkC,OArdX,6BAwdE,SAAgBiW,GACdA,EAASE,EAAkBnW,KAAMiW,GACjC,IAAK,IAAIpY,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKmY,EAAOpY,IAG3C,OAAOmC,OA/dX,6BAkeE,SAAgBiW,GACdA,EAASE,EAAkBnW,KAAMiW,GACjC,IAAK,IAAIpY,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKmY,EAAOpY,IAG3C,OAAOmC,OAzeX,6BA4eE,SAAgBiW,GACdA,EAASE,EAAkBnW,KAAMiW,GACjC,IAAK,IAAIpY,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKmY,EAAOpY,IAG3C,OAAOmC,OAnfX,6BAsfE,SAAgBiW,GACdA,EAASE,EAAkBnW,KAAMiW,GACjC,IAAK,IAAIpY,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKmY,EAAOpY,IAG3C,OAAOmC,OA7fX,oBAggBE,SAAO6V,EAAO3T,GACZ0T,EAAc5V,KAAM6V,GACpB,IAAK,IAAIhY,EAAI,EAAGA,EAAImC,KAAKyU,QAAS5W,IAChCmC,KAAK0X,IAAI7B,EAAOhY,EAAGmC,KAAK+U,IAAIc,EAAOhY,GAAKqE,GAE1C,OAAOlC,OArgBX,uBAwgBE,SAAU6V,EAAO3T,GACf6T,EAAiB/V,KAAM6V,GACvB,IAAK,IAAIhY,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7BmC,KAAK0X,IAAI7Z,EAAGgY,EAAO7V,KAAK+U,IAAIlX,EAAGgY,GAAS3T,GAE1C,OAAOlC,OA7gBX,iBAghBE,WACE,GAAIA,KAAKiX,UACP,OAAO3U,IAGT,IADA,IAAInD,EAAIa,KAAK+U,IAAI,EAAG,GACXlX,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAC5BkC,KAAK+U,IAAIlX,EAAGC,GAAKqB,IACnBA,EAAIa,KAAK+U,IAAIlX,EAAGC,IAItB,OAAOqB,IA5hBX,sBA+hBE,WACE6X,EAAchX,MAGd,IAFA,IAAIb,EAAIa,KAAK+U,IAAI,EAAG,GAChBmF,EAAM,CAAC,EAAG,GACLrc,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAC5BkC,KAAK+U,IAAIlX,EAAGC,GAAKqB,IACnBA,EAAIa,KAAK+U,IAAIlX,EAAGC,GAChBoc,EAAI,GAAKrc,EACTqc,EAAI,GAAKpc,GAIf,OAAOoc,IA5iBX,iBA+iBE,WACE,GAAIla,KAAKiX,UACP,OAAO3U,IAGT,IADA,IAAInD,EAAIa,KAAK+U,IAAI,EAAG,GACXlX,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAC5BkC,KAAK+U,IAAIlX,EAAGC,GAAKqB,IACnBA,EAAIa,KAAK+U,IAAIlX,EAAGC,IAItB,OAAOqB,IA3jBX,sBA8jBE,WACE6X,EAAchX,MAGd,IAFA,IAAIb,EAAIa,KAAK+U,IAAI,EAAG,GAChBmF,EAAM,CAAC,EAAG,GACLrc,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAC5BkC,KAAK+U,IAAIlX,EAAGC,GAAKqB,IACnBA,EAAIa,KAAK+U,IAAIlX,EAAGC,GAChBoc,EAAI,GAAKrc,EACTqc,EAAI,GAAKpc,GAIf,OAAOoc,IA3kBX,oBA8kBE,SAAO1S,GAEL,GADAoO,EAAc5V,KAAMwH,GAChBxH,KAAKiX,UACP,OAAO3U,IAGT,IADA,IAAInD,EAAIa,KAAK+U,IAAIvN,EAAK,GACb3J,EAAI,EAAGA,EAAImC,KAAKyU,QAAS5W,IAC5BmC,KAAK+U,IAAIvN,EAAK3J,GAAKsB,IACrBA,EAAIa,KAAK+U,IAAIvN,EAAK3J,IAGtB,OAAOsB,IAzlBX,yBA4lBE,SAAYqI,GACVoO,EAAc5V,KAAMwH,GACpBwP,EAAchX,MAGd,IAFA,IAAIb,EAAIa,KAAK+U,IAAIvN,EAAK,GAClB0S,EAAM,CAAC1S,EAAK,GACP3J,EAAI,EAAGA,EAAImC,KAAKyU,QAAS5W,IAC5BmC,KAAK+U,IAAIvN,EAAK3J,GAAKsB,IACrBA,EAAIa,KAAK+U,IAAIvN,EAAK3J,GAClBqc,EAAI,GAAKrc,GAGb,OAAOqc,IAvmBX,oBA0mBE,SAAO1S,GAEL,GADAoO,EAAc5V,KAAMwH,GAChBxH,KAAKiX,UACP,OAAO3U,IAGT,IADA,IAAInD,EAAIa,KAAK+U,IAAIvN,EAAK,GACb3J,EAAI,EAAGA,EAAImC,KAAKyU,QAAS5W,IAC5BmC,KAAK+U,IAAIvN,EAAK3J,GAAKsB,IACrBA,EAAIa,KAAK+U,IAAIvN,EAAK3J,IAGtB,OAAOsB,IArnBX,yBAwnBE,SAAYqI,GACVoO,EAAc5V,KAAMwH,GACpBwP,EAAchX,MAGd,IAFA,IAAIb,EAAIa,KAAK+U,IAAIvN,EAAK,GAClB0S,EAAM,CAAC1S,EAAK,GACP3J,EAAI,EAAGA,EAAImC,KAAKyU,QAAS5W,IAC5BmC,KAAK+U,IAAIvN,EAAK3J,GAAKsB,IACrBA,EAAIa,KAAK+U,IAAIvN,EAAK3J,GAClBqc,EAAI,GAAKrc,GAGb,OAAOqc,IAnoBX,uBAsoBE,SAAUL,GAER,GADA9D,EAAiB/V,KAAM6Z,GACnB7Z,KAAKiX,UACP,OAAO3U,IAGT,IADA,IAAInD,EAAIa,KAAK+U,IAAI,EAAG8E,GACXhc,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IACzBmC,KAAK+U,IAAIlX,EAAGgc,GAAU1a,IACxBA,EAAIa,KAAK+U,IAAIlX,EAAGgc,IAGpB,OAAO1a,IAjpBX,4BAopBE,SAAe0a,GACb9D,EAAiB/V,KAAM6Z,GACvB7C,EAAchX,MAGd,IAFA,IAAIb,EAAIa,KAAK+U,IAAI,EAAG8E,GAChBK,EAAM,CAAC,EAAGL,GACLhc,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IACzBmC,KAAK+U,IAAIlX,EAAGgc,GAAU1a,IACxBA,EAAIa,KAAK+U,IAAIlX,EAAGgc,GAChBK,EAAI,GAAKrc,GAGb,OAAOqc,IA/pBX,uBAkqBE,SAAUL,GAER,GADA9D,EAAiB/V,KAAM6Z,GACnB7Z,KAAKiX,UACP,OAAO3U,IAGT,IADA,IAAInD,EAAIa,KAAK+U,IAAI,EAAG8E,GACXhc,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IACzBmC,KAAK+U,IAAIlX,EAAGgc,GAAU1a,IACxBA,EAAIa,KAAK+U,IAAIlX,EAAGgc,IAGpB,OAAO1a,IA7qBX,4BAgrBE,SAAe0a,GACb9D,EAAiB/V,KAAM6Z,GACvB7C,EAAchX,MAGd,IAFA,IAAIb,EAAIa,KAAK+U,IAAI,EAAG8E,GAChBK,EAAM,CAAC,EAAGL,GACLhc,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IACzBmC,KAAK+U,IAAIlX,EAAGgc,GAAU1a,IACxBA,EAAIa,KAAK+U,IAAIlX,EAAGgc,GAChBK,EAAI,GAAKrc,GAGb,OAAOqc,IA3rBX,kBA8rBE,WAGE,IAFA,IAAIha,EAAMD,KAAKC,IAAIF,KAAKwU,KAAMxU,KAAKyU,SAC/B0F,EAAO,GACFtc,EAAI,EAAGA,EAAIqC,EAAKrC,IACvBsc,EAAKlY,KAAKjC,KAAK+U,IAAIlX,EAAGA,IAExB,OAAOsc,IApsBX,kBAusBE,WAAyB,IAApBC,EAAoB,uDAAb,YACNxF,EAAS,EACb,GAAa,QAATwF,EACF,OAAOpa,KAAKG,MACP,GAAa,cAATia,EAAsB,CAC/B,IAAK,IAAIvc,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChC8W,GAAkB5U,KAAK+U,IAAIlX,EAAGC,GAAKkC,KAAK+U,IAAIlX,EAAGC,GAGnD,OAAOmC,KAAKwD,KAAKmR,GAEjB,MAAM,IAAIlB,WAAJ,6BAAqC0G,MAntBjD,2BAutBE,WAEE,IADA,IAAI/S,EAAM,EACDxJ,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCuJ,GAAOrH,KAAK+U,IAAIlX,EAAGC,GACnBkC,KAAK0X,IAAI7Z,EAAGC,EAAGuJ,GAGnB,OAAOrH,OA/tBX,iBAkuBE,SAAIqa,GACEhC,EAAeiC,SAASD,KAAUA,EAAUA,EAAQnE,aACxD,IAAIqE,EAAUva,KAAKkW,YACnB,GAAIqE,EAAQ7c,SAAW2c,EAAQ3c,OAC7B,MAAM,IAAIgW,WAAW,qCAGvB,IADA,IAAI8G,EAAM,EACD3c,EAAI,EAAGA,EAAI0c,EAAQ7c,OAAQG,IAClC2c,GAAOD,EAAQ1c,GAAKwc,EAAQxc,GAE9B,OAAO2c,IA5uBX,kBA+uBE,SAAKC,GACHA,EAAQpB,GAAOqB,YAAYD,GAS3B,IAPA,IAAIpX,EAAIrD,KAAKwU,KACT3V,EAAImB,KAAKyU,QACTzV,EAAIyb,EAAMhG,QAEVG,EAAS,IAAIyE,GAAOhW,EAAGrE,GAEvB2b,EAAQ,IAAIhJ,aAAa9S,GACpBf,EAAI,EAAGA,EAAIkB,EAAGlB,IAAK,CAC1B,IAAK,IAAI2M,EAAI,EAAGA,EAAI5L,EAAG4L,IACrBkQ,EAAMlQ,GAAKgQ,EAAM1F,IAAItK,EAAG3M,GAG1B,IAAK,IAAID,EAAI,EAAGA,EAAIwF,EAAGxF,IAAK,CAE1B,IADA,IAAIyF,EAAI,EACCmH,EAAI,EAAGA,EAAI5L,EAAG4L,IACrBnH,GAAKtD,KAAK+U,IAAIlX,EAAG4M,GAAKkQ,EAAMlQ,GAG9BmK,EAAO8C,IAAI7Z,EAAGC,EAAGwF,IAGrB,OAAOsR,IAvwBX,yBA0wBE,SAAY6F,GACVA,EAAQpB,GAAOqB,YAAYD,GAC3B,IAAI7F,EAAS,IAAIyE,GAAO,EAAG,GACrBuB,EAAM5a,KAAK+U,IAAI,EAAG,GAClB8F,EAAMJ,EAAM1F,IAAI,EAAG,GACnB+F,EAAM9a,KAAK+U,IAAI,EAAG,GAClBgG,EAAMN,EAAM1F,IAAI,EAAG,GACnBiG,EAAMhb,KAAK+U,IAAI,EAAG,GAClBkG,EAAMR,EAAM1F,IAAI,EAAG,GACnBmG,EAAMlb,KAAK+U,IAAI,EAAG,GAClBoG,EAAMV,EAAM1F,IAAI,EAAG,GAGnBqG,GAAMR,EAAMM,IAAQL,EAAMM,GAC1BE,GAAML,EAAME,GAAOL,EACnBS,EAAKV,GAAOG,EAAMI,GAClBI,EAAKL,GAAOD,EAAMJ,GAClBW,GAAMZ,EAAME,GAAOK,EAKnBM,EAAML,EAAKG,EAAKC,GAHVV,EAAMI,IAAQD,EAAME,GAI1BO,EAAMJ,EAAKE,EACXG,EAAMN,EAAKE,EACXK,EAAMR,EAAKC,EAAKC,GAPVN,EAAMJ,IAAQC,EAAME,GAahC,OAJAnG,EAAO8C,IAAI,EAAG,EAAG+D,GACjB7G,EAAO8C,IAAI,EAAG,EAAGgE,GACjB9G,EAAO8C,IAAI,EAAG,EAAGiE,GACjB/G,EAAO8C,IAAI,EAAG,EAAGkE,GACVhH,IAzyBX,yBA4yBE,SAAY6F,GACVA,EAAQpB,GAAOqB,YAAYD,GAC3B,IAAI7F,EAAS,IAAIyE,GAAO,EAAG,GAErBwC,EAAM7b,KAAK+U,IAAI,EAAG,GAClB+G,EAAM9b,KAAK+U,IAAI,EAAG,GAClBgH,EAAM/b,KAAK+U,IAAI,EAAG,GAClBiH,EAAMhc,KAAK+U,IAAI,EAAG,GAClB6F,EAAM5a,KAAK+U,IAAI,EAAG,GAClB+F,EAAM9a,KAAK+U,IAAI,EAAG,GAClBkH,EAAMjc,KAAK+U,IAAI,EAAG,GAClBiG,EAAMhb,KAAK+U,IAAI,EAAG,GAClBmG,EAAMlb,KAAK+U,IAAI,EAAG,GAElBmH,EAAMzB,EAAM1F,IAAI,EAAG,GACnBoH,EAAM1B,EAAM1F,IAAI,EAAG,GACnBqH,EAAM3B,EAAM1F,IAAI,EAAG,GACnBsH,EAAM5B,EAAM1F,IAAI,EAAG,GACnB8F,EAAMJ,EAAM1F,IAAI,EAAG,GACnBgG,EAAMN,EAAM1F,IAAI,EAAG,GACnBuH,EAAM7B,EAAM1F,IAAI,EAAG,GACnBkG,EAAMR,EAAM1F,IAAI,EAAG,GACnBoG,EAAMV,EAAM1F,IAAI,EAAG,GAGnBsG,GAAMQ,EAAMG,KAASG,EAAMtB,GAE3BU,IAAOM,EAAMG,EAAMpB,IAAQsB,EAAMC,EAAMtB,GACvCW,GAAMQ,EAAMpB,KAASsB,EAAMC,GAC3BI,EAAKV,EAAMK,EACXM,IAAOX,EAAMI,EAAMjB,IAAQkB,EAAME,EAAMrB,GACvC0B,IAAOZ,EAAMI,IAAQG,EAAMrB,GAC3B2B,GAAMT,EAAMjB,KAASkB,EAAME,GAG3BO,IAAQZ,EAAMf,EAAME,IAAQL,EAAMyB,EAAMrB,GACxC2B,GAAOb,EAAMb,IAAQL,EAAMI,GAC3B4B,EAAMd,EAAMO,EACZQ,GAAO9B,EAAME,KAASoB,EAAMrB,GAC5B8B,IAAQhB,EAAMnB,EAAME,IAAQC,EAAMuB,EAAMnB,GACxC6B,GAAOjB,EAAMjB,IAAQC,EAAMI,GAC3B8B,GAAOrC,EAAME,KAASwB,EAAMnB,GAO5BM,EAAMc,EAAKM,EANLf,EAAMO,EAOZX,GAzBMG,EAAMC,EAAMC,EAAMC,EAAMpB,EAAMI,EAAME,GAAOL,EAyBtCU,EAAKC,EAAKe,EAAKI,EAAME,EAAMC,EACtCI,EAAMX,EAAKC,EAAKE,GAjBTb,EAAMC,EAAMC,EAAMnB,EAAME,EAAMmB,EAAMjB,GAAOD,EAiBvB8B,EAAME,EAAME,EACvCtB,EAAMN,EAzBDT,IAAQsB,EAAMC,EAAME,EAAMxB,EAAME,EAAMuB,EAAMnB,GAyBjCI,EAAKgB,EAAKM,EAAME,EAAMC,EACtCpB,EAAMP,EAAKE,EAAKC,EAAKe,EATfzB,EAAMG,EAUZkC,EAAMN,EAAME,EAAMC,EAAMC,EATlBjB,EAAMI,EAUZgB,EAAMb,EAAKC,EAAKC,EApBVzB,IAAQkB,EAAME,EAAMC,EAAMxB,EAAME,EAAMuB,EAAMrB,GAoBvB0B,EAAMC,EAAMC,EACvCQ,EAAMV,EAAMC,EAAMC,EAAMC,EAVlBb,EAAME,EAWZmB,EAAMf,EAAKC,EAAKC,EAAKC,EAVfxB,EAAMC,EAqBlB,OATAvG,EAAO8C,IAAI,EAAG,EAAG+D,GACjB7G,EAAO8C,IAAI,EAAG,EAAGgE,GACjB9G,EAAO8C,IAAI,EAAG,EAAGwF,GACjBtI,EAAO8C,IAAI,EAAG,EAAGiE,GACjB/G,EAAO8C,IAAI,EAAG,EAAGkE,GACjBhH,EAAO8C,IAAI,EAAG,EAAGyF,GACjBvI,EAAO8C,IAAI,EAAG,EAAG0F,GACjBxI,EAAO8C,IAAI,EAAG,EAAG2F,GACjBzI,EAAO8C,IAAI,EAAG,EAAG4F,GACV1I,IA/2BX,0BAk3BE,SAAalW,GACXA,EAAI2a,GAAOqB,YAAYhc,GACvB,IAAID,EAAIuB,KAAK8Y,QACTyE,EAAK9e,EAAE+V,KACPgJ,EAAK/e,EAAEgW,QACPgJ,EAAK/e,EAAE8V,KACPkJ,EAAKhf,EAAE+V,QAUX,SAASkJ,EAAMC,EAAKpJ,EAAM4C,GACxB,IAAIrY,EAAI6e,EAAIpJ,KACRzW,EAAI6f,EAAInJ,QACZ,GAAI1V,IAAMyV,GAAQzW,IAAMqZ,EACtB,OAAOwG,EAEP,IAAIC,EAAWxF,EAAeyF,MAAMtJ,EAAM4C,GAE1C,OADAyG,EAAWA,EAASvE,aAAasE,EAAK,EAAG,GAhBzCJ,IAAOC,GAETM,QAAQC,KAAR,sBACiBT,EADjB,cACyBC,EADzB,gBACmCC,EADnC,cAC2CC,EAD3C,sCAuBF,IAAI3e,EAAIkB,KAAKE,IAAIod,EAAIE,GACjB1f,EAAIkC,KAAKE,IAAIqd,EAAIE,GAgFrB,OA3EA,SAASO,EAAU3gB,EAAGU,EAAGwW,EAAM4C,GAE7B,GAAI5C,GAAQ,KAAO4C,GAAQ,IACzB,OAAO9Z,EAAE4gB,KAAKlgB,GAIZwW,EAAO,IAAM,GAAK4C,EAAO,IAAM,GACjC9Z,EAAIqgB,EAAMrgB,EAAGkX,EAAO,EAAG4C,EAAO,GAC9BpZ,EAAI2f,EAAM3f,EAAGwW,EAAO,EAAG4C,EAAO,IACrB5C,EAAO,IAAM,GACtBlX,EAAIqgB,EAAMrgB,EAAGkX,EAAO,EAAG4C,GACvBpZ,EAAI2f,EAAM3f,EAAGwW,EAAO,EAAG4C,IACdA,EAAO,IAAM,IACtB9Z,EAAIqgB,EAAMrgB,EAAGkX,EAAM4C,EAAO,GAC1BpZ,EAAI2f,EAAM3f,EAAGwW,EAAM4C,EAAO,IAG5B,IAAI+G,EAAWC,SAAS9gB,EAAEkX,KAAO,EAAG,IAChC6J,EAAWD,SAAS9gB,EAAEmX,QAAU,EAAG,IAEnCmG,EAAMtd,EAAEghB,UAAU,EAAGH,EAAW,EAAG,EAAGE,EAAW,GACjDxD,EAAM7c,EAAEsgB,UAAU,EAAGH,EAAW,EAAG,EAAGE,EAAW,GAEjDvD,EAAMxd,EAAEghB,UAAU,EAAGH,EAAW,EAAGE,EAAU/gB,EAAEmX,QAAU,GACzDsG,EAAM/c,EAAEsgB,UAAU,EAAGH,EAAW,EAAGE,EAAUrgB,EAAEyW,QAAU,GAEzDuG,EAAM1d,EAAEghB,UAAUH,EAAU7gB,EAAEkX,KAAO,EAAG,EAAG6J,EAAW,GACtDpD,EAAMjd,EAAEsgB,UAAUH,EAAUngB,EAAEwW,KAAO,EAAG,EAAG6J,EAAW,GAEtDnD,EAAM5d,EAAEghB,UAAUH,EAAU7gB,EAAEkX,KAAO,EAAG6J,EAAU/gB,EAAEmX,QAAU,GAC9D0G,EAAMnd,EAAEsgB,UAAUH,EAAUngB,EAAEwW,KAAO,EAAG6J,EAAUrgB,EAAEyW,QAAU,GAG9D2G,EAAK6C,EACP5F,EAAekG,IAAI3D,EAAKM,GACxB7C,EAAekG,IAAI1D,EAAKM,GACxBgD,EACAE,GAEEhD,EAAK4C,EAAU5F,EAAekG,IAAIvD,EAAKE,GAAML,EAAKsD,EAAUE,GAC5D/C,EAAK2C,EAAUrD,EAAKvC,EAAemG,IAAIzD,EAAKI,GAAMgD,EAAUE,GAC5D9C,EAAK0C,EAAU/C,EAAK7C,EAAemG,IAAIvD,EAAKJ,GAAMsD,EAAUE,GAC5D7C,EAAKyC,EAAU5F,EAAekG,IAAI3D,EAAKE,GAAMK,EAAKgD,EAAUE,GAC5D9B,EAAK0B,EACP5F,EAAemG,IAAIxD,EAAKJ,GACxBvC,EAAekG,IAAI1D,EAAKE,GACxBoD,EACAE,GAEE7B,EAAKyB,EACP5F,EAAemG,IAAI1D,EAAKI,GACxB7C,EAAekG,IAAItD,EAAKE,GACxBgD,EACAE,GAIEzC,EAAMvD,EAAekG,IAAInD,EAAIG,GACjCK,EAAI4C,IAAIhD,GACRI,EAAI2C,IAAI/B,GACR,IAAIW,EAAM9E,EAAekG,IAAIjD,EAAIE,GAC7B6B,EAAMhF,EAAekG,IAAIlD,EAAIE,GAC7B+B,EAAMjF,EAAemG,IAAIpD,EAAIC,GACjCiC,EAAIiB,IAAIjD,GACRgC,EAAIiB,IAAIhC,GAGR,IAAIsB,EAAWxF,EAAeyF,MAAM,EAAIlC,EAAIpH,KAAM,EAAIoH,EAAInH,SAK1D,OADAoJ,GADAA,GADAA,GADAA,EAAWA,EAASvE,aAAasC,EAAK,EAAG,IACrBtC,aAAa6D,EAAKvB,EAAIpH,KAAM,IAC5B8E,aAAa+D,EAAK,EAAGzB,EAAInH,UACzB6E,aAAagE,EAAK1B,EAAIpH,KAAMoH,EAAInH,UACpC6J,UAAU,EAAG9J,EAAO,EAAG,EAAG4C,EAAO,GAE5C6G,CA/EPxf,EAAIkf,EAAMlf,EAAGM,EAAGhB,GAChBW,EAAIif,EAAMjf,EAAGK,EAAGhB,GA8EOgB,EAAGhB,KAn+B9B,uBAs+BE,WAAwB,IAAdkS,EAAc,uDAAJ,GAClB,GAAuB,kBAAZA,EACT,MAAM,IAAI7N,UAAU,6BAEtB,MAA6B6N,EAArB/P,WAAR,MAAc,EAAd,IAA6B+P,EAAZ9P,WAAjB,MAAuB,EAAvB,EACA,IAAKqQ,OAAOiO,SAASve,GAAM,MAAM,IAAIkC,UAAU,wBAC/C,IAAKoO,OAAOiO,SAASte,GAAM,MAAM,IAAIiC,UAAU,wBAC/C,GAAIlC,GAAOC,EAAK,MAAM,IAAIuT,WAAW,gCAErC,IADA,IAAIgL,EAAY,IAAIrF,GAAOrZ,KAAKwU,KAAMxU,KAAKyU,SAClC5W,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAAK,CAClC,IAAM2J,EAAMxH,KAAKyZ,OAAO5b,GACpB2J,EAAI9J,OAAS,GACf4V,EAAQ9L,EAAK,CAAEtH,MAAKC,MAAKoT,OAAQ/L,IAEnCkX,EAAUC,OAAO9gB,EAAG2J,GAEtB,OAAOkX,IAt/BX,0BAy/BE,WAA2B,IAAdzO,EAAc,uDAAJ,GACrB,GAAuB,kBAAZA,EACT,MAAM,IAAI7N,UAAU,6BAEtB,MAA6B6N,EAArB/P,WAAR,MAAc,EAAd,IAA6B+P,EAAZ9P,WAAjB,MAAuB,EAAvB,EACA,IAAKqQ,OAAOiO,SAASve,GAAM,MAAM,IAAIkC,UAAU,wBAC/C,IAAKoO,OAAOiO,SAASte,GAAM,MAAM,IAAIiC,UAAU,wBAC/C,GAAIlC,GAAOC,EAAK,MAAM,IAAIuT,WAAW,gCAErC,IADA,IAAIgL,EAAY,IAAIrF,GAAOrZ,KAAKwU,KAAMxU,KAAKyU,SAClC5W,EAAI,EAAGA,EAAImC,KAAKyU,QAAS5W,IAAK,CACrC,IAAMgc,EAAS7Z,KAAK+Z,UAAUlc,GAC1Bgc,EAAOnc,QACT4V,EAAQuG,EAAQ,CACd3Z,IAAKA,EACLC,IAAKA,EACLoT,OAAQsG,IAGZ6E,EAAUE,UAAU/gB,EAAGgc,GAEzB,OAAO6E,IA7gCX,sBAghCE,WAEE,IADA,IAAM3O,EAAS9P,KAAKgE,KAAKjE,KAAKyU,QAAU,GAC/B5W,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIiS,EAAQjS,IAAK,CAC/B,IAAI+gB,EAAQ7e,KAAK+U,IAAIlX,EAAGC,GACpBghB,EAAO9e,KAAK+U,IAAIlX,EAAGmC,KAAKyU,QAAU,EAAI3W,GAC1CkC,KAAK0X,IAAI7Z,EAAGC,EAAGghB,GACf9e,KAAK0X,IAAI7Z,EAAGmC,KAAKyU,QAAU,EAAI3W,EAAG+gB,GAGtC,OAAO7e,OA1hCX,yBA6hCE,WAEE,IADA,IAAM+P,EAAS9P,KAAKgE,KAAKjE,KAAKwU,KAAO,GAC5B1W,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChC,IAAK,IAAID,EAAI,EAAGA,EAAIkS,EAAQlS,IAAK,CAC/B,IAAIghB,EAAQ7e,KAAK+U,IAAIlX,EAAGC,GACpBghB,EAAO9e,KAAK+U,IAAI/U,KAAKwU,KAAO,EAAI3W,EAAGC,GACvCkC,KAAK0X,IAAI7Z,EAAGC,EAAGghB,GACf9e,KAAK0X,IAAI1X,KAAKwU,KAAO,EAAI3W,EAAGC,EAAG+gB,GAGnC,OAAO7e,OAviCX,8BA0iCE,SAAiBya,GACfA,EAAQpB,GAAOqB,YAAYD,GAQ3B,IANA,IAAIpX,EAAIrD,KAAKwU,KACT3V,EAAImB,KAAKyU,QACTzV,EAAIyb,EAAMjG,KACVvV,EAAIwb,EAAMhG,QAEVG,EAAS,IAAIyE,GAAOhW,EAAIrE,EAAGH,EAAII,GAC1BpB,EAAI,EAAGA,EAAIwF,EAAGxF,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAIe,EAAGf,IACrB,IAAK,IAAI2M,EAAI,EAAGA,EAAIzL,EAAGyL,IACrB,IAAK,IAAIsU,EAAI,EAAGA,EAAI9f,EAAG8f,IACrBnK,EAAO8C,IAAI1Y,EAAInB,EAAI4M,EAAGxL,EAAInB,EAAIihB,EAAG/e,KAAK+U,IAAIlX,EAAGC,GAAK2c,EAAM1F,IAAItK,EAAGsU,IAKvE,OAAOnK,IA5jCX,0BA+jCE,SAAa6F,GAEX,GADAA,EAAQpB,GAAOqB,YAAYD,IACtBza,KAAKyY,aAAegC,EAAMhC,WAC7B,MAAM,IAAIvQ,MAAM,2CAElB,IAAI7E,EAAIrD,KAAKwU,KACT3V,EAAI4b,EAAMjG,KACVwK,EAAMhf,KAAKif,iBAAiB5F,GAAO6F,IAAIrgB,EAAGA,IAC1CsgB,EAAM9F,GAAO6F,IAAI7b,EAAGA,GAAG4b,iBAAiBxE,GAC5C,OAAOuE,EAAIT,IAAIY,KAxkCnB,uBA2kCE,WAEE,IADA,IAAIvK,EAAS,IAAIyE,GAAOrZ,KAAKyU,QAASzU,KAAKwU,MAClC3W,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChC8W,EAAO8C,IAAI5Z,EAAGD,EAAGmC,KAAK+U,IAAIlX,EAAGC,IAGjC,OAAO8W,IAllCX,sBAqlCE,WACE,IADyC,IAAlCwK,EAAkC,uDAAhBC,GAChBxhB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7BmC,KAAK2e,OAAO9gB,EAAGmC,KAAKyZ,OAAO5b,GAAGkC,KAAKqf,IAErC,OAAOpf,OAzlCX,yBA4lCE,WACE,IAD4C,IAAlCof,EAAkC,uDAAhBC,GACnBxhB,EAAI,EAAGA,EAAImC,KAAKyU,QAAS5W,IAChCmC,KAAK4e,UAAU/gB,EAAGmC,KAAK+Z,UAAUlc,GAAGkC,KAAKqf,IAE3C,OAAOpf,OAhmCX,uBAmmCE,SAAU0W,EAAUC,EAAQC,EAAaC,GACvCJ,EAAWzW,KAAM0W,EAAUC,EAAQC,EAAaC,GAKhD,IAJA,IAAI6H,EAAY,IAAIrF,GAClB1C,EAASD,EAAW,EACpBG,EAAYD,EAAc,GAEnB/Y,EAAI6Y,EAAU7Y,GAAK8Y,EAAQ9Y,IAClC,IAAK,IAAIC,EAAI8Y,EAAa9Y,GAAK+Y,EAAW/Y,IACxC4gB,EAAUhH,IAAI7Z,EAAI6Y,EAAU5Y,EAAI8Y,EAAa5W,KAAK+U,IAAIlX,EAAGC,IAG7D,OAAO4gB,IA9mCX,0BAinCE,SAAa7e,EAAS+W,EAAaC,GAGjC,QAFoBjV,IAAhBgV,IAA2BA,EAAc,QAC3BhV,IAAdiV,IAAyBA,EAAY7W,KAAKyU,QAAU,GAEtDmC,EAAcC,GACdD,EAAc,GACdA,GAAe5W,KAAKyU,SACpBoC,EAAY,GACZA,GAAa7W,KAAKyU,QAElB,MAAM,IAAIf,WAAW,yBAIvB,IADA,IAAIgL,EAAY,IAAIrF,GAAOxZ,EAAQnC,OAAQmZ,EAAYD,EAAc,GAC5D/Y,EAAI,EAAGA,EAAIgC,EAAQnC,OAAQG,IAClC,IAAK,IAAIC,EAAI8Y,EAAa9Y,GAAK+Y,EAAW/Y,IAAK,CAC7C,GAAI+B,EAAQhC,GAAK,GAAKgC,EAAQhC,IAAMmC,KAAKwU,KACvC,MAAM,IAAId,WAAJ,kCAA0C7T,EAAQhC,KAE1D6gB,EAAUhH,IAAI7Z,EAAGC,EAAI8Y,EAAa5W,KAAK+U,IAAIlV,EAAQhC,GAAIC,IAG3D,OAAO4gB,IAvoCX,6BA0oCE,SAAgB7e,EAAS6W,EAAUC,GAGjC,QAFiB/U,IAAb8U,IAAwBA,EAAW,QACxB9U,IAAX+U,IAAsBA,EAAS3W,KAAKwU,KAAO,GAE7CkC,EAAWC,GACXD,EAAW,GACXA,GAAY1W,KAAKwU,MACjBmC,EAAS,GACTA,GAAU3W,KAAKwU,KAEf,MAAM,IAAId,WAAW,yBAIvB,IADA,IAAIgL,EAAY,IAAIrF,GAAO1C,EAASD,EAAW,EAAG7W,EAAQnC,QACjDG,EAAI,EAAGA,EAAIgC,EAAQnC,OAAQG,IAClC,IAAK,IAAIC,EAAI4Y,EAAU5Y,GAAK6Y,EAAQ7Y,IAAK,CACvC,GAAI+B,EAAQhC,GAAK,GAAKgC,EAAQhC,IAAMmC,KAAKyU,QACvC,MAAM,IAAIf,WAAJ,qCAA6C7T,EAAQhC,KAE7D6gB,EAAUhH,IAAI5Z,EAAI4Y,EAAU7Y,EAAGmC,KAAK+U,IAAIjX,EAAG+B,EAAQhC,KAGvD,OAAO6gB,IAhqCX,0BAmqCE,SAAanX,EAAQmP,EAAUE,GAE7B,IADArP,EAAS8R,GAAOqB,YAAYnT,IACjB0P,UACT,OAAOjX,KAITyW,EAAWzW,KAAM0W,EAFJA,EAAWnP,EAAOiN,KAAO,EAEHoC,EADnBA,EAAcrP,EAAOkN,QAAU,GAE/C,IAAK,IAAI5W,EAAI,EAAGA,EAAI0J,EAAOiN,KAAM3W,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIyJ,EAAOkN,QAAS3W,IAClCkC,KAAK0X,IAAIhB,EAAW7Y,EAAG+Y,EAAc9Y,EAAGyJ,EAAOwN,IAAIlX,EAAGC,IAG1D,OAAOkC,OAhrCX,uBAmrCE,SAAUqW,EAAYG,GAGpB,IAFA,IAAI3W,EFppCD,SAAsB0H,EAAQ8O,EAAYG,GAC/C,MAAO,CACLhP,IAAK4O,EAAgB7O,EAAQ8O,GAC7BwD,OAAQtD,EAAmBhP,EAAQiP,IEipCrB8I,CAAatf,KAAMqW,EAAYG,GACzCkI,EAAY,IAAIrF,GAAOhD,EAAW3Y,OAAQ8Y,EAAc9Y,QACnDG,EAAI,EAAGA,EAAIgC,EAAQ2H,IAAI9J,OAAQG,IAEtC,IADA,IAAI0hB,EAAW1f,EAAQ2H,IAAI3J,GAClBC,EAAI,EAAGA,EAAI+B,EAAQga,OAAOnc,OAAQI,IAAK,CAC9C,IAAI0hB,EAAc3f,EAAQga,OAAO/b,GACjC4gB,EAAUhH,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIwK,EAAUC,IAG3C,OAAOd,IA7rCX,mBAgsCE,WAGE,IAFA,IAAIxe,EAAMD,KAAKC,IAAIF,KAAKwU,KAAMxU,KAAKyU,SAC/BgL,EAAQ,EACH5hB,EAAI,EAAGA,EAAIqC,EAAKrC,IACvB4hB,GAASzf,KAAK+U,IAAIlX,EAAGA,GAEvB,OAAO4hB,IAtsCX,mBAysCE,WAEE,IADA,IAAIf,EAAY,IAAIrF,GAAOrZ,KAAKwU,KAAMxU,KAAKyU,SAClCjN,EAAM,EAAGA,EAAMxH,KAAKwU,KAAMhN,IACjC,IAAK,IAAIqS,EAAS,EAAGA,EAAS7Z,KAAKyU,QAASoF,IAC1C6E,EAAUhH,IAAIlQ,EAAKqS,EAAQ7Z,KAAK+U,IAAIvN,EAAKqS,IAG7C,OAAO6E,IAhtCX,iBAmtCE,SAAIgB,GACF,OAAQA,GACN,IAAK,MACH,ODtvCD,SAAkBnY,GAEvB,IADA,IAAIF,EAAM0P,EAASxP,EAAOiN,MACjB3W,EAAI,EAAGA,EAAI0J,EAAOiN,OAAQ3W,EACjC,IAAK,IAAIC,EAAI,EAAGA,EAAIyJ,EAAOkN,UAAW3W,EACpCuJ,EAAIxJ,IAAM0J,EAAOwN,IAAIlX,EAAGC,GAG5B,OAAOuJ,EC+uCMsY,CAAS3f,MAClB,IAAK,SACH,OD9uCD,SAAqBuH,GAE1B,IADA,IAAIF,EAAM0P,EAASxP,EAAOkN,SACjB5W,EAAI,EAAGA,EAAI0J,EAAOiN,OAAQ3W,EACjC,IAAK,IAAIC,EAAI,EAAGA,EAAIyJ,EAAOkN,UAAW3W,EACpCuJ,EAAIvJ,IAAMyJ,EAAOwN,IAAIlX,EAAGC,GAG5B,OAAOuJ,ECuuCMuY,CAAY5f,MACrB,UAAK4B,EACH,ODtuCD,SAAgB2F,GAErB,IADA,IAAIpI,EAAI,EACCtB,EAAI,EAAGA,EAAI0J,EAAOiN,KAAM3W,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIyJ,EAAOkN,QAAS3W,IAClCqB,GAAKoI,EAAOwN,IAAIlX,EAAGC,GAGvB,OAAOqB,EC+tCM0gB,CAAO7f,MAChB,QACE,MAAM,IAAIkI,MAAJ,0BAA6BwX,OA5tC3C,qBAguCE,SAAQA,GACN,OAAQA,GACN,IAAK,MACH,ODruCD,SAAsBnY,GAE3B,IADA,IAAIF,EAAM0P,EAASxP,EAAOiN,KAAM,GACvB3W,EAAI,EAAGA,EAAI0J,EAAOiN,OAAQ3W,EACjC,IAAK,IAAIC,EAAI,EAAGA,EAAIyJ,EAAOkN,UAAW3W,EACpCuJ,EAAIxJ,IAAM0J,EAAOwN,IAAIlX,EAAGC,GAG5B,OAAOuJ,EC8tCMyY,CAAa9f,MACtB,IAAK,SACH,OD7tCD,SAAyBuH,GAE9B,IADA,IAAIF,EAAM0P,EAASxP,EAAOkN,QAAS,GAC1B5W,EAAI,EAAGA,EAAI0J,EAAOiN,OAAQ3W,EACjC,IAAK,IAAIC,EAAI,EAAGA,EAAIyJ,EAAOkN,UAAW3W,EACpCuJ,EAAIvJ,IAAMyJ,EAAOwN,IAAIlX,EAAGC,GAG5B,OAAOuJ,ECstCM0Y,CAAgB/f,MACzB,UAAK4B,EACH,ODrtCD,SAAoB2F,GAEzB,IADA,IAAIpI,EAAI,EACCtB,EAAI,EAAGA,EAAI0J,EAAOiN,KAAM3W,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIyJ,EAAOkN,QAAS3W,IAClCqB,GAAKoI,EAAOwN,IAAIlX,EAAGC,GAGvB,OAAOqB,EC8sCM6gB,CAAWhgB,MACpB,QACE,MAAM,IAAIkI,MAAJ,0BAA6BwX,OAzuC3C,kBA6uCE,SAAKA,GACH,IAAMrY,EAAMrH,KAAKqH,IAAIqY,GACrB,OAAQA,GACN,IAAK,MACH,IAAK,IAAI7hB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7BwJ,EAAIxJ,IAAMmC,KAAKyU,QAEjB,OAAOpN,EAET,IAAK,SACH,IAAK,IAAIxJ,EAAI,EAAGA,EAAImC,KAAKyU,QAAS5W,IAChCwJ,EAAIxJ,IAAMmC,KAAKwU,KAEjB,OAAOnN,EAET,UAAKzF,EACH,OAAOyF,EAAMrH,KAAKiI,KACpB,QACE,MAAM,IAAIC,MAAJ,0BAA6BwX,OA/vC3C,sBAmwCE,SAASA,GAAkB,IAAdzP,EAAc,uDAAJ,GAKrB,GAJkB,kBAAPyP,IACTzP,EAAUyP,EACVA,OAAK9d,GAEgB,kBAAZqO,EACT,MAAM,IAAI7N,UAAU,6BAEtB,MAAkD6N,EAAlD,IAAQkH,gBAAR,aAAyB/Q,YAAzB,MAAgCpG,KAAKoG,KAAKsZ,GAA1C,EACA,GAAwB,mBAAbvI,EACT,MAAM,IAAI/U,UAAU,8BAEtB,OAAQsd,GACN,IAAK,MACH,IAAK5gB,MAAMsC,QAAQgF,GACjB,MAAM,IAAIhE,UAAU,yBAEtB,OAAO8U,EAAclX,KAAMmX,EAAU/Q,GAEvC,IAAK,SACH,IAAKtH,MAAMsC,QAAQgF,GACjB,MAAM,IAAIhE,UAAU,yBAEtB,OAAOmV,EAAiBvX,KAAMmX,EAAU/Q,GAE1C,UAAKxE,EACH,GAAoB,kBAATwE,EACT,MAAM,IAAIhE,UAAU,yBAEtB,OAAOoV,EAAYxX,KAAMmX,EAAU/Q,GAErC,QACE,MAAM,IAAI8B,MAAJ,0BAA6BwX,OAnyC3C,+BAuyCE,SAAkBA,EAAIzP,GACF,kBAAPyP,IACTzP,EAAUyP,EACVA,OAAK9d,GAEP,IAAMuB,EAAWnD,KAAKmD,SAASuc,EAAIzP,GACnC,QAAWrO,IAAP8d,EACF,OAAOzf,KAAKwD,KAAKN,GAEjB,IAAK,IAAItF,EAAI,EAAGA,EAAIsF,EAASzF,OAAQG,IACnCsF,EAAStF,GAAKoC,KAAKwD,KAAKN,EAAStF,IAEnC,OAAOsF,IAnzCb,oBAuzCE,SAAOuc,GAAkB,IAAdzP,EAAc,uDAAJ,GAKnB,GAJkB,kBAAPyP,IACTzP,EAAUyP,EACVA,OAAK9d,GAEgB,kBAAZqO,EACT,MAAM,IAAI7N,UAAU,6BAEtB,MAAmC6N,EAAnC,IAAQyB,cAAR,MAAiB1R,KAAKoG,KAAKsZ,GAA3B,EACA,OAAQA,GACN,IAAK,MACH,IAAK5gB,MAAMsC,QAAQsQ,GACjB,MAAM,IAAItP,UAAU,2BAGtB,OADAqV,EAAYzX,KAAM0R,GACX1R,KAET,IAAK,SACH,IAAKlB,MAAMsC,QAAQsQ,GACjB,MAAM,IAAItP,UAAU,2BAGtB,OADAuV,EAAe3X,KAAM0R,GACd1R,KAET,UAAK4B,EACH,GAAsB,kBAAX8P,EACT,MAAM,IAAItP,UAAU,2BAGtB,OADAwV,EAAU5X,KAAM0R,GACT1R,KAET,QACE,MAAM,IAAIkI,MAAJ,0BAA6BwX,OAv1C3C,mBA21CE,SAAMA,GAAkB,IAAdzP,EAAc,uDAAJ,GAKlB,GAJkB,kBAAPyP,IACTzP,EAAUyP,EACVA,OAAK9d,GAEgB,kBAAZqO,EACT,MAAM,IAAI7N,UAAU,6BAEtB,IAAI0V,EAAQ7H,EAAQ6H,MACpB,OAAQ4H,GACN,IAAK,MACH,QAAc9d,IAAVkW,EACFA,EAAQD,EAAc7X,WACjB,IAAKlB,MAAMsC,QAAQ0W,GACxB,MAAM,IAAI1V,UAAU,0BAGtB,OADA2V,EAAW/X,KAAM8X,GACV9X,KAET,IAAK,SACH,QAAc4B,IAAVkW,EACFA,EAAQE,EAAiBhY,WACpB,IAAKlB,MAAMsC,QAAQ0W,GACxB,MAAM,IAAI1V,UAAU,0BAGtB,OADA6V,EAAcjY,KAAM8X,GACb9X,KAET,UAAK4B,EACH,QAAcA,IAAVkW,EACFA,EAAQI,EAAYlY,WACf,GAAqB,kBAAV8X,EAChB,MAAM,IAAI1V,UAAU,0BAGtB,OADAgW,EAASpY,KAAM8X,GACR9X,KAET,QACE,MAAM,IAAIkI,MAAJ,0BAA6BwX,OAj4C3C,sBAq4CE,SAASzP,GACP,OAAOgE,EAAyBjU,KAAMiQ,MAt4C1C,0BACE,SAAmBgQ,EAASC,EAAYC,GAEtC,GADaF,EAAUC,IACRC,EAAQziB,OACrB,MAAM,IAAIgW,WAAW,+CAGvB,IADA,IAAIgL,EAAY,IAAIrF,GAAO4G,EAASC,GAC3B1Y,EAAM,EAAGA,EAAMyY,EAASzY,IAC/B,IAAK,IAAIqS,EAAS,EAAGA,EAASqG,EAAYrG,IACxC6E,EAAUhH,IAAIlQ,EAAKqS,EAAQsG,EAAQ3Y,EAAM0Y,EAAarG,IAG1D,OAAO6E,IAZX,uBAeE,SAAiByB,GAEf,IADA,IAAIlK,EAAS,IAAIoD,GAAO,EAAG8G,EAAQziB,QAC1BG,EAAI,EAAGA,EAAIsiB,EAAQziB,OAAQG,IAClCoY,EAAOyB,IAAI,EAAG7Z,EAAGsiB,EAAQtiB,IAE3B,OAAOoY,IApBX,0BAuBE,SAAoBkK,GAElB,IADA,IAAIlK,EAAS,IAAIoD,GAAO8G,EAAQziB,OAAQ,GAC/BG,EAAI,EAAGA,EAAIsiB,EAAQziB,OAAQG,IAClCoY,EAAOyB,IAAI7Z,EAAG,EAAGsiB,EAAQtiB,IAE3B,OAAOoY,IA5BX,mBA+BE,SAAazB,EAAMC,GACjB,OAAO,IAAI4E,GAAO7E,EAAMC,KAhC5B,kBAmCE,SAAYD,EAAMC,GAChB,OAAO,IAAI4E,GAAO7E,EAAMC,GAAS2L,KAAK,KApC1C,kBAuCE,SAAY5L,EAAMC,GAAuB,IAAdxE,EAAc,uDAAJ,GACnC,GAAuB,kBAAZA,EACT,MAAM,IAAI7N,UAAU,6BAItB,IAFA,MAAiC6N,EAAzB7I,cAAR,MAAiBnH,KAAKmH,OAAtB,EACIG,EAAS,IAAI8R,GAAO7E,EAAMC,GACrB5W,EAAI,EAAGA,EAAI2W,EAAM3W,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAI2W,EAAS3W,IAC3ByJ,EAAOmQ,IAAI7Z,EAAGC,EAAGsJ,KAGrB,OAAOG,IAlDX,qBAqDE,SAAeiN,EAAMC,GAAuB,IAAdxE,EAAc,uDAAJ,GACtC,GAAuB,kBAAZA,EACT,MAAM,IAAI7N,UAAU,6BAEtB,MAAsD6N,EAA9C/P,WAAR,MAAc,EAAd,IAAsD+P,EAArC9P,WAAjB,MAAuB,IAAvB,IAAsD8P,EAAzB7I,cAA7B,MAAsCnH,KAAKmH,OAA3C,EACA,IAAKoJ,OAAOC,UAAUvQ,GAAM,MAAM,IAAIkC,UAAU,0BAChD,IAAKoO,OAAOC,UAAUtQ,GAAM,MAAM,IAAIiC,UAAU,0BAChD,GAAIlC,GAAOC,EAAK,MAAM,IAAIuT,WAAW,gCAGrC,IAFA,IAAI2M,EAAWlgB,EAAMD,EACjBqH,EAAS,IAAI8R,GAAO7E,EAAMC,GACrB5W,EAAI,EAAGA,EAAI2W,EAAM3W,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAI2W,EAAS3W,IAAK,CAChC,IAAIoE,EAAQhC,EAAMD,KAAKqgB,MAAMlZ,IAAWiZ,GACxC9Y,EAAOmQ,IAAI7Z,EAAGC,EAAGoE,GAGrB,OAAOqF,IArEX,iBAwEE,SAAWiN,EAAMC,EAASvS,QACRN,IAAZ6S,IAAuBA,EAAUD,QACvB5S,IAAVM,IAAqBA,EAAQ,GAGjC,IAFA,IAAIhC,EAAMD,KAAKC,IAAIsU,EAAMC,GACrBlN,EAASvH,KAAK8d,MAAMtJ,EAAMC,GACrB5W,EAAI,EAAGA,EAAIqC,EAAKrC,IACvB0J,EAAOmQ,IAAI7Z,EAAGA,EAAGqE,GAEnB,OAAOqF,IAhFX,kBAmFE,SAAYjC,EAAMkP,EAAMC,GACtB,IAAIsK,EAAIzZ,EAAK5H,YACAkE,IAAT4S,IAAoBA,EAAOuK,QACfnd,IAAZ6S,IAAuBA,EAAUD,GAGrC,IAFA,IAAItU,EAAMD,KAAKC,IAAI6e,EAAGvK,EAAMC,GACxBlN,EAASvH,KAAK8d,MAAMtJ,EAAMC,GACrB5W,EAAI,EAAGA,EAAIqC,EAAKrC,IACvB0J,EAAOmQ,IAAI7Z,EAAGA,EAAGyH,EAAKzH,IAExB,OAAO0J,IA5FX,iBA+FE,SAAWgZ,EAASC,GAClBD,EAAUvgB,KAAK0a,YAAY6F,GAC3BC,EAAUxgB,KAAK0a,YAAY8F,GAI3B,IAHA,IAAIhM,EAAO+L,EAAQ/L,KACfC,EAAU8L,EAAQ9L,QAClBG,EAAS,IAAIyE,GAAO7E,EAAMC,GACrB5W,EAAI,EAAGA,EAAI2W,EAAM3W,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAI2W,EAAS3W,IAC3B8W,EAAO8C,IAAI7Z,EAAGC,EAAGmC,KAAKC,IAAIqgB,EAAQxL,IAAIlX,EAAGC,GAAI0iB,EAAQzL,IAAIlX,EAAGC,KAGhE,OAAO8W,IA1GX,iBA6GE,SAAW2L,EAASC,GAClBD,EAAUvgB,KAAK0a,YAAY6F,GAC3BC,EAAUxgB,KAAK0a,YAAY8F,GAI3B,IAHA,IAAIhM,EAAO+L,EAAQ/L,KACfC,EAAU8L,EAAQ9L,QAClBG,EAAS,IAAI5U,KAAKwU,EAAMC,GACnB5W,EAAI,EAAGA,EAAI2W,EAAM3W,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAI2W,EAAS3W,IAC3B8W,EAAO8C,IAAI7Z,EAAGC,EAAGmC,KAAKE,IAAIogB,EAAQxL,IAAIlX,EAAGC,GAAI0iB,EAAQzL,IAAIlX,EAAGC,KAGhE,OAAO8W,IAxHX,yBA2HE,SAAmB1S,GACjB,OAAOmW,EAAeiC,SAASpY,GAASA,EAAQ,IAAImX,GAAOnX,KA5H/D,sBA+HE,SAAgBA,GACd,OAAgB,MAATA,GAAiC,WAAhBA,EAAMue,UAhIlC,KAi5CA,SAASpB,GAAe/hB,EAAGU,GACzB,OAAOV,EAAIU,EARbqa,GAAetS,UAAU0a,MAAQ,SACX,qBAAXpf,SACTgX,GAAetS,UACb1E,OAAOqf,IAAI,+BH56CR,WACL,OAAOzM,EAAyBjU,QGo7ClCqY,GAAejR,OAASiR,GAAesI,KACvCtI,GAAeuI,UAAYvI,GAAewI,QAC1CxI,GAAeyI,SAAWzI,GAAe8B,KACzC9B,GAAetS,UAAU+a,SAAWzI,GAAetS,UAAUoU,KAC7D9B,GAAezU,SAAWyU,GAAe6G,IACzC7G,GAAetS,UAAUgb,OAAS1I,GAAetS,UAAUib,IAC3D3I,GAAetS,UAAUkb,cACvB5I,GAAetS,UAAUkZ,iB,IC/7CW5G,GAAgBgB,GDi8CjCA,G,kDACnB,WAAY6H,EAAOC,GAAU,MAE3B,GAF2B,oBAC3B,eACI9H,EAAOiB,SAAS4G,GAElB,qBAAOA,EAAMpI,SACR,GAAItI,OAAOC,UAAUyQ,IAAUA,GAAS,EAAG,CAGhD,GADA,EAAK5b,KAAO,KACRkL,OAAOC,UAAU0Q,IAAaA,GAAY,GAK5C,MAAM,IAAI/e,UAAU,uCAJpB,IAAK,IAAIvE,EAAI,EAAGA,EAAIqjB,EAAOrjB,IACzB,EAAKyH,KAAKrD,KAAK,IAAI0P,aAAawP,QAK/B,KAAIriB,MAAMsC,QAAQ8f,GAkBvB,MAAM,IAAI9e,UACR,wDAjBF,IAAMgf,EAAYF,EAGlB,GAAwB,kBADxBC,GADAD,EAAQE,EAAU1jB,QACC0jB,EAAU,GAAG1jB,OAAS,GAEvC,MAAM,IAAI0E,UACR,qDAGJ,EAAKkD,KAAO,GACZ,IAAK,IAAIzH,EAAI,EAAGA,EAAIqjB,EAAOrjB,IAAK,CAC9B,GAAIujB,EAAUvjB,GAAGH,SAAWyjB,EAC1B,MAAM,IAAIzN,WAAW,iCAEvB,EAAKpO,KAAKrD,KAAK0P,aAAavB,KAAKgR,EAAUvjB,MA9BpB,OAqC3B,EAAK2W,KAAO0M,EACZ,EAAKzM,QAAU0M,EAtCY,E,uCAyC7B,SAAI5B,EAAUC,EAAatd,GAEzB,OADAlC,KAAKsF,KAAKia,GAAUC,GAAetd,EAC5BlC,O,iBAGT,SAAIuf,EAAUC,GACZ,OAAOxf,KAAKsF,KAAKia,GAAUC,K,uBAG7B,SAAU3J,GAIR,OAHAD,EAAc5V,KAAM6V,GACpB7V,KAAKsF,KAAK+b,OAAOxL,EAAO,GACxB7V,KAAKwU,MAAQ,EACNxU,O,oBAGT,SAAO6V,EAAOzS,GASZ,YARcxB,IAAVwB,IACFA,EAAQyS,EACRA,EAAQ7V,KAAKwU,MAEfoB,EAAc5V,KAAM6V,GAAO,GAC3BzS,EAAQuO,aAAavB,KAAK4F,EAAehW,KAAMoD,IAC/CpD,KAAKsF,KAAK+b,OAAOxL,EAAO,EAAGzS,GAC3BpD,KAAKwU,MAAQ,EACNxU,O,0BAGT,SAAa6V,GACXE,EAAiB/V,KAAM6V,GACvB,IAAK,IAAIhY,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAAK,CAElC,IADA,IAAMyjB,EAAS,IAAI3P,aAAa3R,KAAKyU,QAAU,GACtC3W,EAAI,EAAGA,EAAI+X,EAAO/X,IACzBwjB,EAAOxjB,GAAKkC,KAAKsF,KAAKzH,GAAGC,GAE3B,IAAK,IAAIA,EAAI+X,EAAQ,EAAG/X,EAAIkC,KAAKyU,QAAS3W,IACxCwjB,EAAOxjB,EAAI,GAAKkC,KAAKsF,KAAKzH,GAAGC,GAE/BkC,KAAKsF,KAAKzH,GAAKyjB,EAGjB,OADAthB,KAAKyU,SAAW,EACTzU,O,uBAGT,SAAU6V,EAAOzS,GACM,qBAAVA,IACTA,EAAQyS,EACRA,EAAQ7V,KAAKyU,SAEfsB,EAAiB/V,KAAM6V,GAAO,GAC9BzS,EAAQ+S,EAAkBnW,KAAMoD,GAChC,IAAK,IAAIvF,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAAK,CAGlC,IAFA,IAAMyjB,EAAS,IAAI3P,aAAa3R,KAAKyU,QAAU,GAC3C3W,EAAI,EACDA,EAAI+X,EAAO/X,IAChBwjB,EAAOxjB,GAAKkC,KAAKsF,KAAKzH,GAAGC,GAG3B,IADAwjB,EAAOxjB,KAAOsF,EAAMvF,GACbC,EAAIkC,KAAKyU,QAAU,EAAG3W,IAC3BwjB,EAAOxjB,GAAKkC,KAAKsF,KAAKzH,GAAGC,EAAI,GAE/BkC,KAAKsF,KAAKzH,GAAKyjB,EAGjB,OADAthB,KAAKyU,SAAW,EACTzU,S,GA1GyBqY,ICj8CkBgB,GD+iDhBA,IC/iDAhB,GD+iDhBA,IC9iDLtS,UAAUwY,IAAM,SAAarc,GAC1C,MAAqB,kBAAVA,EAA2BlC,KAAKuhB,KAAKrf,GACzClC,KAAKwhB,KAAKtf,IAGnBmW,GAAetS,UAAUwb,KAAO,SAAcrf,GAC5C,IAAK,IAAIrE,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKoE,GAGpC,OAAOlC,MAGTqY,GAAetS,UAAUyb,KAAO,SAAcja,GAE5C,GADAA,EAAS8R,GAAOqB,YAAYnT,GACxBvH,KAAKwU,OAASjN,EAAOiN,MACvBxU,KAAKyU,UAAYlN,EAAOkN,QACxB,MAAM,IAAIf,WAAW,qCAEvB,IAAK,IAAI7V,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKyJ,EAAOwN,IAAIlX,EAAGC,IAGlD,OAAOkC,MAGTqY,GAAekG,IAAM,SAAahX,EAAQrF,GAExC,OADkB,IAAImX,GAAO9R,GACZgX,IAAIrc,IAGvBmW,GAAetS,UAAUyY,IAAM,SAAatc,GAC1C,MAAqB,kBAAVA,EAA2BlC,KAAKyhB,KAAKvf,GACzClC,KAAK0hB,KAAKxf,IAGnBmW,GAAetS,UAAU0b,KAAO,SAAcvf,GAC5C,IAAK,IAAIrE,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKoE,GAGpC,OAAOlC,MAGTqY,GAAetS,UAAU2b,KAAO,SAAcna,GAE5C,GADAA,EAAS8R,GAAOqB,YAAYnT,GACxBvH,KAAKwU,OAASjN,EAAOiN,MACvBxU,KAAKyU,UAAYlN,EAAOkN,QACxB,MAAM,IAAIf,WAAW,qCAEvB,IAAK,IAAI7V,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKyJ,EAAOwN,IAAIlX,EAAGC,IAGlD,OAAOkC,MAGTqY,GAAemG,IAAM,SAAajX,EAAQrF,GAExC,OADkB,IAAImX,GAAO9R,GACZiX,IAAItc,IAEvBmW,GAAetS,UAAU4b,SAAWtJ,GAAetS,UAAUyY,IAC7DnG,GAAetS,UAAU6b,UAAYvJ,GAAetS,UAAU0b,KAC9DpJ,GAAetS,UAAU8b,UAAYxJ,GAAetS,UAAU2b,KAC9DrJ,GAAesJ,SAAWtJ,GAAemG,IAEzCnG,GAAetS,UAAU+b,IAAM,SAAa5f,GAC1C,MAAqB,kBAAVA,EAA2BlC,KAAKuZ,KAAKrX,GACzClC,KAAK+hB,KAAK7f,IAGnBmW,GAAetS,UAAUwT,KAAO,SAAcrX,GAC5C,IAAK,IAAIrE,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKoE,GAGpC,OAAOlC,MAGTqY,GAAetS,UAAUgc,KAAO,SAAcxa,GAE5C,GADAA,EAAS8R,GAAOqB,YAAYnT,GACxBvH,KAAKwU,OAASjN,EAAOiN,MACvBxU,KAAKyU,UAAYlN,EAAOkN,QACxB,MAAM,IAAIf,WAAW,qCAEvB,IAAK,IAAI7V,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKyJ,EAAOwN,IAAIlX,EAAGC,IAGlD,OAAOkC,MAGTqY,GAAeyJ,IAAM,SAAava,EAAQrF,GAExC,OADkB,IAAImX,GAAO9R,GACZua,IAAI5f,IAEvBmW,GAAetS,UAAUic,SAAW3J,GAAetS,UAAU+b,IAC7DzJ,GAAetS,UAAUkc,UAAY5J,GAAetS,UAAUwT,KAC9DlB,GAAetS,UAAUmc,UAAY7J,GAAetS,UAAUgc,KAC9D1J,GAAe2J,SAAW3J,GAAeyJ,IAEzCzJ,GAAetS,UAAUoc,IAAM,SAAajgB,GAC1C,MAAqB,kBAAVA,EAA2BlC,KAAKoiB,KAAKlgB,GACzClC,KAAKqiB,KAAKngB,IAGnBmW,GAAetS,UAAUqc,KAAO,SAAclgB,GAC5C,IAAK,IAAIrE,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKoE,GAGpC,OAAOlC,MAGTqY,GAAetS,UAAUsc,KAAO,SAAc9a,GAE5C,GADAA,EAAS8R,GAAOqB,YAAYnT,GACxBvH,KAAKwU,OAASjN,EAAOiN,MACvBxU,KAAKyU,UAAYlN,EAAOkN,QACxB,MAAM,IAAIf,WAAW,qCAEvB,IAAK,IAAI7V,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKyJ,EAAOwN,IAAIlX,EAAGC,IAGlD,OAAOkC,MAGTqY,GAAe8J,IAAM,SAAa5a,EAAQrF,GAExC,OADkB,IAAImX,GAAO9R,GACZ4a,IAAIjgB,IAEvBmW,GAAetS,UAAUuc,OAASjK,GAAetS,UAAUoc,IAC3D9J,GAAetS,UAAUwc,QAAUlK,GAAetS,UAAUqc,KAC5D/J,GAAetS,UAAUyc,QAAUnK,GAAetS,UAAUsc,KAC5DhK,GAAeiK,OAASjK,GAAe8J,IAEvC9J,GAAetS,UAAU0c,IAAM,SAAavgB,GAC1C,MAAqB,kBAAVA,EAA2BlC,KAAK0iB,KAAKxgB,GACzClC,KAAK2iB,KAAKzgB,IAGnBmW,GAAetS,UAAU2c,KAAO,SAAcxgB,GAC5C,IAAK,IAAIrE,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKoE,GAGpC,OAAOlC,MAGTqY,GAAetS,UAAU4c,KAAO,SAAcpb,GAE5C,GADAA,EAAS8R,GAAOqB,YAAYnT,GACxBvH,KAAKwU,OAASjN,EAAOiN,MACvBxU,KAAKyU,UAAYlN,EAAOkN,QACxB,MAAM,IAAIf,WAAW,qCAEvB,IAAK,IAAI7V,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKyJ,EAAOwN,IAAIlX,EAAGC,IAGlD,OAAOkC,MAGTqY,GAAeoK,IAAM,SAAalb,EAAQrF,GAExC,OADkB,IAAImX,GAAO9R,GACZkb,IAAIvgB,IAEvBmW,GAAetS,UAAU6c,QAAUvK,GAAetS,UAAU0c,IAC5DpK,GAAetS,UAAU8c,SAAWxK,GAAetS,UAAU2c,KAC7DrK,GAAetS,UAAU+c,SAAWzK,GAAetS,UAAU4c,KAC7DtK,GAAeuK,QAAUvK,GAAeoK,IAExCpK,GAAetS,UAAUgd,IAAM,SAAa7gB,GAC1C,MAAqB,kBAAVA,EAA2BlC,KAAKgjB,KAAK9gB,GACzClC,KAAKijB,KAAK/gB,IAGnBmW,GAAetS,UAAUid,KAAO,SAAc9gB,GAC5C,IAAK,IAAIrE,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKoE,GAGpC,OAAOlC,MAGTqY,GAAetS,UAAUkd,KAAO,SAAc1b,GAE5C,GADAA,EAAS8R,GAAOqB,YAAYnT,GACxBvH,KAAKwU,OAASjN,EAAOiN,MACvBxU,KAAKyU,UAAYlN,EAAOkN,QACxB,MAAM,IAAIf,WAAW,qCAEvB,IAAK,IAAI7V,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKyJ,EAAOwN,IAAIlX,EAAGC,IAGlD,OAAOkC,MAGTqY,GAAe0K,IAAM,SAAaxb,EAAQrF,GAExC,OADkB,IAAImX,GAAO9R,GACZwb,IAAI7gB,IAGvBmW,GAAetS,UAAUmd,GAAK,SAAYhhB,GACxC,MAAqB,kBAAVA,EAA2BlC,KAAKmjB,IAAIjhB,GACxClC,KAAKojB,IAAIlhB,IAGlBmW,GAAetS,UAAUod,IAAM,SAAajhB,GAC1C,IAAK,IAAIrE,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKoE,GAGpC,OAAOlC,MAGTqY,GAAetS,UAAUqd,IAAM,SAAa7b,GAE1C,GADAA,EAAS8R,GAAOqB,YAAYnT,GACxBvH,KAAKwU,OAASjN,EAAOiN,MACvBxU,KAAKyU,UAAYlN,EAAOkN,QACxB,MAAM,IAAIf,WAAW,qCAEvB,IAAK,IAAI7V,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKyJ,EAAOwN,IAAIlX,EAAGC,IAGlD,OAAOkC,MAGTqY,GAAe6K,GAAK,SAAY3b,EAAQrF,GAEtC,OADkB,IAAImX,GAAO9R,GACZ2b,GAAGhhB,IAGtBmW,GAAetS,UAAUsd,IAAM,SAAanhB,GAC1C,MAAqB,kBAAVA,EAA2BlC,KAAKsjB,KAAKphB,GACzClC,KAAKujB,KAAKrhB,IAGnBmW,GAAetS,UAAUud,KAAO,SAAcphB,GAC5C,IAAK,IAAIrE,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKoE,GAGpC,OAAOlC,MAGTqY,GAAetS,UAAUwd,KAAO,SAAchc,GAE5C,GADAA,EAAS8R,GAAOqB,YAAYnT,GACxBvH,KAAKwU,OAASjN,EAAOiN,MACvBxU,KAAKyU,UAAYlN,EAAOkN,QACxB,MAAM,IAAIf,WAAW,qCAEvB,IAAK,IAAI7V,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,GAAKyJ,EAAOwN,IAAIlX,EAAGC,IAGlD,OAAOkC,MAGTqY,GAAegL,IAAM,SAAa9b,EAAQrF,GAExC,OADkB,IAAImX,GAAO9R,GACZ8b,IAAInhB,IAGvBmW,GAAetS,UAAUyd,UAAY,SAAmBthB,GACtD,MAAqB,kBAAVA,EAA2BlC,KAAKyjB,WAAWvhB,GAC/ClC,KAAK0jB,WAAWxhB,IAGzBmW,GAAetS,UAAU0d,WAAa,SAAoBvhB,GACxD,IAAK,IAAIrE,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,IAAMoE,GAGrC,OAAOlC,MAGTqY,GAAetS,UAAU2d,WAAa,SAAoBnc,GAExD,GADAA,EAAS8R,GAAOqB,YAAYnT,GACxBvH,KAAKwU,OAASjN,EAAOiN,MACvBxU,KAAKyU,UAAYlN,EAAOkN,QACxB,MAAM,IAAIf,WAAW,qCAEvB,IAAK,IAAI7V,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,IAAMyJ,EAAOwN,IAAIlX,EAAGC,IAGnD,OAAOkC,MAGTqY,GAAemL,UAAY,SAAmBjc,EAAQrF,GAEpD,OADkB,IAAImX,GAAO9R,GACZic,UAAUthB,IAG7BmW,GAAetS,UAAU4d,0BAA4B,SAAmCzhB,GACtF,MAAqB,kBAAVA,EAA2BlC,KAAK4jB,2BAA2B1hB,GAC/DlC,KAAK6jB,2BAA2B3hB,IAGzCmW,GAAetS,UAAU6d,2BAA6B,SAAoC1hB,GACxF,IAAK,IAAIrE,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,IAAMoE,GAGrC,OAAOlC,MAGTqY,GAAetS,UAAU8d,2BAA6B,SAAoCtc,GAExF,GADAA,EAAS8R,GAAOqB,YAAYnT,GACxBvH,KAAKwU,OAASjN,EAAOiN,MACvBxU,KAAKyU,UAAYlN,EAAOkN,QACxB,MAAM,IAAIf,WAAW,qCAEvB,IAAK,IAAI7V,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,IAAMyJ,EAAOwN,IAAIlX,EAAGC,IAGnD,OAAOkC,MAGTqY,GAAesL,0BAA4B,SAAmCpc,EAAQrF,GAEpF,OADkB,IAAImX,GAAO9R,GACZoc,0BAA0BzhB,IAG7CmW,GAAetS,UAAU+d,WAAa,SAAoB5hB,GACxD,MAAqB,kBAAVA,EAA2BlC,KAAK+jB,YAAY7hB,GAChDlC,KAAKgkB,YAAY9hB,IAG1BmW,GAAetS,UAAUge,YAAc,SAAqB7hB,GAC1D,IAAK,IAAIrE,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,KAAOoE,GAGtC,OAAOlC,MAGTqY,GAAetS,UAAUie,YAAc,SAAqBzc,GAE1D,GADAA,EAAS8R,GAAOqB,YAAYnT,GACxBvH,KAAKwU,OAASjN,EAAOiN,MACvBxU,KAAKyU,UAAYlN,EAAOkN,QACxB,MAAM,IAAIf,WAAW,qCAEvB,IAAK,IAAI7V,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGkC,KAAK+U,IAAIlX,EAAGC,KAAOyJ,EAAOwN,IAAIlX,EAAGC,IAGpD,OAAOkC,MAGTqY,GAAeyL,WAAa,SAAoBvc,EAAQrF,GAEtD,OADkB,IAAImX,GAAO9R,GACZuc,WAAW5hB,IAE9BmW,GAAetS,UAAUke,mBAAqB5L,GAAetS,UAAU+d,WACvEzL,GAAetS,UAAUme,oBAAsB7L,GAAetS,UAAUge,YACxE1L,GAAetS,UAAUoe,oBAAsB9L,GAAetS,UAAUie,YACxE3L,GAAe4L,mBAAqB5L,GAAeyL,WAEnDzL,GAAetS,UAAUqe,IAAM,WAC7B,IAAK,IAAIvmB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,GAAKkC,KAAK+U,IAAIlX,EAAGC,IAGjC,OAAOkC,MAGTqY,GAAe+L,IAAM,SAAa7c,GAEhC,OADkB,IAAI8R,GAAO9R,GACZ6c,OAGnB/L,GAAetS,UAAUrB,IAAM,WAC7B,IAAK,IAAI7G,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKyE,IAAI1E,KAAK+U,IAAIlX,EAAGC,KAGxC,OAAOkC,MAGTqY,GAAe3T,IAAM,SAAa6C,GAEhC,OADkB,IAAI8R,GAAO9R,GACZ7C,OAGnB2T,GAAetS,UAAUse,KAAO,WAC9B,IAAK,IAAIxmB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKokB,KAAKrkB,KAAK+U,IAAIlX,EAAGC,KAGzC,OAAOkC,MAGTqY,GAAegM,KAAO,SAAc9c,GAElC,OADkB,IAAI8R,GAAO9R,GACZ8c,QAGnBhM,GAAetS,UAAUue,MAAQ,WAC/B,IAAK,IAAIzmB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKqkB,MAAMtkB,KAAK+U,IAAIlX,EAAGC,KAG1C,OAAOkC,MAGTqY,GAAeiM,MAAQ,SAAe/c,GAEpC,OADkB,IAAI8R,GAAO9R,GACZ+c,SAGnBjM,GAAetS,UAAUwe,KAAO,WAC9B,IAAK,IAAI1mB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKskB,KAAKvkB,KAAK+U,IAAIlX,EAAGC,KAGzC,OAAOkC,MAGTqY,GAAekM,KAAO,SAAchd,GAElC,OADkB,IAAI8R,GAAO9R,GACZgd,QAGnBlM,GAAetS,UAAUye,MAAQ,WAC/B,IAAK,IAAI3mB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKukB,MAAMxkB,KAAK+U,IAAIlX,EAAGC,KAG1C,OAAOkC,MAGTqY,GAAemM,MAAQ,SAAejd,GAEpC,OADkB,IAAI8R,GAAO9R,GACZid,SAGnBnM,GAAetS,UAAU0e,KAAO,WAC9B,IAAK,IAAI5mB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKwkB,KAAKzkB,KAAK+U,IAAIlX,EAAGC,KAGzC,OAAOkC,MAGTqY,GAAeoM,KAAO,SAAcld,GAElC,OADkB,IAAI8R,GAAO9R,GACZkd,QAGnBpM,GAAetS,UAAU2e,MAAQ,WAC/B,IAAK,IAAI7mB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKykB,MAAM1kB,KAAK+U,IAAIlX,EAAGC,KAG1C,OAAOkC,MAGTqY,GAAeqM,MAAQ,SAAend,GAEpC,OADkB,IAAI8R,GAAO9R,GACZmd,SAGnBrM,GAAetS,UAAU4e,KAAO,WAC9B,IAAK,IAAI9mB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAK0kB,KAAK3kB,KAAK+U,IAAIlX,EAAGC,KAGzC,OAAOkC,MAGTqY,GAAesM,KAAO,SAAcpd,GAElC,OADkB,IAAI8R,GAAO9R,GACZod,QAGnBtM,GAAetS,UAAU9B,KAAO,WAC9B,IAAK,IAAIpG,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKgE,KAAKjE,KAAK+U,IAAIlX,EAAGC,KAGzC,OAAOkC,MAGTqY,GAAepU,KAAO,SAAcsD,GAElC,OADkB,IAAI8R,GAAO9R,GACZtD,QAGnBoU,GAAetS,UAAU6e,MAAQ,WAC/B,IAAK,IAAI/mB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAK2kB,MAAM5kB,KAAK+U,IAAIlX,EAAGC,KAG1C,OAAOkC,MAGTqY,GAAeuM,MAAQ,SAAerd,GAEpC,OADkB,IAAI8R,GAAO9R,GACZqd,SAGnBvM,GAAetS,UAAUwC,IAAM,WAC7B,IAAK,IAAI1K,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKsI,IAAIvI,KAAK+U,IAAIlX,EAAGC,KAGxC,OAAOkC,MAGTqY,GAAe9P,IAAM,SAAahB,GAEhC,OADkB,IAAI8R,GAAO9R,GACZgB,OAGnB8P,GAAetS,UAAU8e,KAAO,WAC9B,IAAK,IAAIhnB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAK4kB,KAAK7kB,KAAK+U,IAAIlX,EAAGC,KAGzC,OAAOkC,MAGTqY,GAAewM,KAAO,SAActd,GAElC,OADkB,IAAI8R,GAAO9R,GACZsd,QAGnBxM,GAAetS,UAAUkM,IAAM,WAC7B,IAAK,IAAIpU,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKgS,IAAIjS,KAAK+U,IAAIlX,EAAGC,KAGxC,OAAOkC,MAGTqY,GAAepG,IAAM,SAAa1K,GAEhC,OADkB,IAAI8R,GAAO9R,GACZ0K,OAGnBoG,GAAetS,UAAU+e,MAAQ,WAC/B,IAAK,IAAIjnB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAK6kB,MAAM9kB,KAAK+U,IAAIlX,EAAGC,KAG1C,OAAOkC,MAGTqY,GAAeyM,MAAQ,SAAevd,GAEpC,OADkB,IAAI8R,GAAO9R,GACZud,SAGnBzM,GAAetS,UAAUvB,MAAQ,WAC/B,IAAK,IAAI3G,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKuE,MAAMxE,KAAK+U,IAAIlX,EAAGC,KAG1C,OAAOkC,MAGTqY,GAAe7T,MAAQ,SAAe+C,GAEpC,OADkB,IAAI8R,GAAO9R,GACZ/C,SAGnB6T,GAAetS,UAAUgf,OAAS,WAChC,IAAK,IAAIlnB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAK8kB,OAAO/kB,KAAK+U,IAAIlX,EAAGC,KAG3C,OAAOkC,MAGTqY,GAAe0M,OAAS,SAAgBxd,GAEtC,OADkB,IAAI8R,GAAO9R,GACZwd,UAGnB1M,GAAetS,UAAUlB,IAAM,WAC7B,IAAK,IAAIhH,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAK4E,IAAI7E,KAAK+U,IAAIlX,EAAGC,KAGxC,OAAOkC,MAGTqY,GAAexT,IAAM,SAAa0C,GAEhC,OADkB,IAAI8R,GAAO9R,GACZ1C,OAGnBwT,GAAetS,UAAUif,MAAQ,WAC/B,IAAK,IAAInnB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAK+kB,MAAMhlB,KAAK+U,IAAIlX,EAAGC,KAG1C,OAAOkC,MAGTqY,GAAe2M,MAAQ,SAAezd,GAEpC,OADkB,IAAI8R,GAAO9R,GACZyd,SAGnB3M,GAAetS,UAAUkf,MAAQ,WAC/B,IAAK,IAAIpnB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKglB,MAAMjlB,KAAK+U,IAAIlX,EAAGC,KAG1C,OAAOkC,MAGTqY,GAAe4M,MAAQ,SAAe1d,GAEpC,OADkB,IAAI8R,GAAO9R,GACZ0d,SAGnB5M,GAAetS,UAAUmf,KAAO,WAC9B,IAAK,IAAIrnB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKilB,KAAKllB,KAAK+U,IAAIlX,EAAGC,KAGzC,OAAOkC,MAGTqY,GAAe6M,KAAO,SAAc3d,GAElC,OADkB,IAAI8R,GAAO9R,GACZ2d,QAGnB7M,GAAetS,UAAUua,MAAQ,WAC/B,IAAK,IAAIziB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKqgB,MAAMtgB,KAAK+U,IAAIlX,EAAGC,KAG1C,OAAOkC,MAGTqY,GAAeiI,MAAQ,SAAe/Y,GAEpC,OADkB,IAAI8R,GAAO9R,GACZ+Y,SAGnBjI,GAAetS,UAAUof,KAAO,WAC9B,IAAK,IAAItnB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKklB,KAAKnlB,KAAK+U,IAAIlX,EAAGC,KAGzC,OAAOkC,MAGTqY,GAAe8M,KAAO,SAAc5d,GAElC,OADkB,IAAI8R,GAAO9R,GACZ4d,QAGnB9M,GAAetS,UAAUyC,IAAM,WAC7B,IAAK,IAAI3K,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKuI,IAAIxI,KAAK+U,IAAIlX,EAAGC,KAGxC,OAAOkC,MAGTqY,GAAe7P,IAAM,SAAajB,GAEhC,OADkB,IAAI8R,GAAO9R,GACZiB,OAGnB6P,GAAetS,UAAUqf,KAAO,WAC9B,IAAK,IAAIvnB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKmlB,KAAKplB,KAAK+U,IAAIlX,EAAGC,KAGzC,OAAOkC,MAGTqY,GAAe+M,KAAO,SAAc7d,GAElC,OADkB,IAAI8R,GAAO9R,GACZ6d,QAGnB/M,GAAetS,UAAUtC,KAAO,WAC9B,IAAK,IAAI5F,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKwD,KAAKzD,KAAK+U,IAAIlX,EAAGC,KAGzC,OAAOkC,MAGTqY,GAAe5U,KAAO,SAAc8D,GAElC,OADkB,IAAI8R,GAAO9R,GACZ9D,QAGnB4U,GAAetS,UAAUqM,IAAM,WAC7B,IAAK,IAAIvU,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKmS,IAAIpS,KAAK+U,IAAIlX,EAAGC,KAGxC,OAAOkC,MAGTqY,GAAejG,IAAM,SAAa7K,GAEhC,OADkB,IAAI8R,GAAO9R,GACZ6K,OAGnBiG,GAAetS,UAAUsf,KAAO,WAC9B,IAAK,IAAIxnB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKolB,KAAKrlB,KAAK+U,IAAIlX,EAAGC,KAGzC,OAAOkC,MAGTqY,GAAegN,KAAO,SAAc9d,GAElC,OADkB,IAAI8R,GAAO9R,GACZ8d,QAGnBhN,GAAetS,UAAUuf,MAAQ,WAC/B,IAAK,IAAIznB,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAKqlB,MAAMtlB,KAAK+U,IAAIlX,EAAGC,KAG1C,OAAOkC,MAGTqY,GAAeiN,MAAQ,SAAe/d,GAEpC,OADkB,IAAI8R,GAAO9R,GACZ+d,SAGnBjN,GAAezT,IAAM,SAAa2C,EAAQge,GAExC,OADkB,IAAIlM,GAAO9R,GACZ3C,IAAI2gB,IAGvBlN,GAAetS,UAAUnB,IAAM,SAAa1C,GAC1C,MAAqB,kBAAVA,EAA2BlC,KAAKwlB,KAAKtjB,GACzClC,KAAKylB,KAAKvjB,IAGnBmW,GAAetS,UAAUyf,KAAO,SAActjB,GAC5C,IAAK,IAAIrE,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAK2E,IAAI5E,KAAK+U,IAAIlX,EAAGC,GAAIoE,IAG5C,OAAOlC,MAGTqY,GAAetS,UAAU0f,KAAO,SAAcle,GAE5C,GADAA,EAAS8R,GAAOqB,YAAYnT,GACxBvH,KAAKwU,OAASjN,EAAOiN,MACvBxU,KAAKyU,UAAYlN,EAAOkN,QACxB,MAAM,IAAIf,WAAW,qCAEvB,IAAK,IAAI7V,EAAI,EAAGA,EAAImC,KAAKwU,KAAM3W,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIkC,KAAKyU,QAAS3W,IAChCkC,KAAK0X,IAAI7Z,EAAGC,EAAGmC,KAAK2E,IAAI5E,KAAK+U,IAAIlX,EAAGC,GAAIyJ,EAAOwN,IAAIlX,EAAGC,KAG1D,OAAOkC","file":"static/js/7.1882b6a5.chunk.js","sourcesContent":["(function(){function a(d){for(var e=0,f=d.length-1,g=void 0,h=void 0,i=void 0,j=c(e,f);!0;){if(f<=e)return d[j];if(f==e+1)return d[e]>d[f]&&b(d,e,f),d[j];for(g=c(e,f),d[g]>d[f]&&b(d,g,f),d[e]>d[f]&&b(d,e,f),d[g]>d[e]&&b(d,g,e),b(d,g,e+1),h=e+1,i=f;!0;){do h++;while(d[e]>d[h]);do i--;while(d[i]>d[e]);if(i<h)break;b(d,h,i)}b(d,e,i),i<=j&&(e=h),i>=j&&(f=i-1)}}var b=function b(d,e,f){var _ref;return _ref=[d[f],d[e]],d[e]=_ref[0],d[f]=_ref[1],_ref},c=function c(d,e){return~~((d+e)/2)};'undefined'!=typeof module&&module.exports?module.exports=a:window.median=a})();\n","const {bisectRight} = require('d3-array')\n\nconst quincunx = (u, v, w, q) => {\n  const n = u.length - 1\n\n  u[0] = 0\n  v[0] = 0\n  w[0] = 0\n  v[1] = v[1] / u[1]\n  w[1] = w[1] / u[1]\n  for (let i = 2; i < n; ++i) {\n    u[i] = u[i] - u[i - 2] * w[i - 2] * w[i - 2] - u[i - 1] * v[i - 1] * v[i - 1]\n    v[i] = (v[i] - u[i - 1] * v[i - 1] * w[i - 1]) / u[i]\n    w[i] = w[i] / u[i]\n  }\n\n  for (let i = 2; i < n; ++i) {\n    q[i] = q[i] - v[i - 1] * q[i - 1] - w[i - 2] * q[i - 2]\n  }\n  for (let i = 1; i < n; ++i) {\n    q[i] = q[i] / u[i]\n  }\n\n  q[n - 2] = q[n - 2] - v[n - 2] * q[n - 1]\n  for (let i = n - 3; i > 0; --i) {\n    q[i] = q[i] - v[i] * q[i + 1] - w[i] * q[i + 2]\n  }\n}\n\nconst smoothingSpline = (x, y, sigma, lambda) => {\n  const n = x.length - 1\n  const h = new Array(n + 1)\n  const r = new Array(n + 1)\n  const f = new Array(n + 1)\n  const p = new Array(n + 1)\n  const q = new Array(n + 1)\n  const u = new Array(n + 1)\n  const v = new Array(n + 1)\n  const w = new Array(n + 1)\n  const params = x.map(() => [0, 0, 0, 0])\n  params.pop()\n\n  const mu = 2 * (1 - lambda) / (3 * lambda)\n  for (let i = 0; i < n; ++i) {\n    h[i] = x[i + 1] - x[i]\n    r[i] = 3 / h[i]\n  }\n  q[0] = 0\n  for (let i = 1; i < n; ++i) {\n    f[i] = -(r[i - 1] + r[i])\n    p[i] = 2 * (x[i + 1] - x[i - 1])\n    q[i] = 3 * (y[i + 1] - y[i]) / h[i] - 3 * (y[i] - y[i - 1]) / h[i - 1]\n  }\n  q[n] = 0\n\n  for (let i = 1; i < n; ++i) {\n    u[i] = r[i - 1] * r[i - 1] * sigma[i - 1] + f[i] * f[i] * sigma[i] + r[i] * r[i] * sigma[i + 1]\n    u[i] = mu * u[i] + p[i]\n  }\n  for (let i = 1; i < n - 1; ++i) {\n    v[i] = f[i] * r[i] * sigma[i] + r[i] * f[i + 1] * sigma[i + 1]\n    v[i] = mu * v[i] + h[i]\n  }\n  for (let i = 1; i < n - 2; ++i) {\n    w[i] = mu * r[i] * r[i + 1] * sigma[i + 1]\n  }\n\n  quincunx(u, v, w, q)\n\n  params[0][3] = y[0] - mu * r[0] * q[1] * sigma[0]\n  params[1][3] = y[1] - mu * (f[1] * q[1] + r[1] * q[2]) * sigma[0]\n  params[0][0] = q[1] / (3 * h[0])\n  params[0][1] = 0\n  params[0][2] = (params[1][3] - params[0][3]) / h[0] - q[1] * h[0] / 3\n  r[0] = 0\n  for (let i = 1; i < n; ++i) {\n    params[i][0] = (q[i + 1] - q[i]) / (3 * h[i])\n    params[i][1] = q[i]\n    params[i][2] = (q[i] + q[i - 1]) * h[i - 1] + params[i - 1][2]\n    params[i][3] = r[i - 1] * q[i - 1] + f[i] * q[i] + r[i] * q[i + 1]\n    params[i][3] = y[i] - mu * params[i][3] * sigma[i]\n  }\n  return params\n}\n\nclass SplineInterpolator {\n  constructor (xIn, yIn, lambda = 1) {\n    const indices = xIn.map((_, i) => i)\n    indices.sort((i, j) => xIn[i] - xIn[j])\n    const x = indices.map((i) => xIn[i])\n    const y = indices.map((i) => yIn[i])\n    const n = indices.length\n    const sigma = indices.map(() => 1)\n    this.n = n\n    this.x = x\n    this.y = y\n    this.params = smoothingSpline(x, y, sigma, lambda)\n  }\n\n  interpolate (v) {\n    if (v === this.x[this.n - 1]) {\n      return this.y[this.n - 1]\n    }\n    const i = Math.min(Math.max(0, bisectRight(this.x, v) - 1), this.n - 2)\n    const [a, b, c, d] = this.params[i]\n    v = v - this.x[i]\n    return a * v * v * v + b * v * v + c * v + d\n  }\n\n  max (step = 100) {\n    const xStart = this.x[0]\n    const xStop = this.x[this.n - 1]\n    const delta = (xStop - xStart) / step\n    let maxValue = -Infinity\n    for (let i = 0, x = xStart; i < step; ++i, x += delta) {\n      const y = this.interpolate(x)\n      if (y > maxValue) {\n        maxValue = y\n      }\n    }\n    return maxValue\n  }\n\n  min (step = 100) {\n    const xStart = this.x[0]\n    const xStop = this.x[this.n - 1]\n    const delta = (xStop - xStart) / step\n    let minValue = Infinity\n    for (let i = 0, x = xStart; i < step; ++i, x += delta) {\n      const y = this.interpolate(x)\n      if (y < minValue) {\n        minValue = y\n      }\n    }\n    return minValue\n  }\n\n  domain () {\n    return [this.x[0], this.x[this.x.length - 1]]\n  }\n\n  range () {\n    return [this.min(), this.max()]\n  }\n\n  curve (nInterval, domain = null) {\n    domain = domain || this.domain()\n    const delta = (domain[1] - domain[0]) / (nInterval - 1)\n    const vals = new Array(nInterval)\n    for (let i = 0; i < nInterval; ++i) {\n      const x = delta * i + domain[0]\n      vals[i] = [x, this.interpolate(x)]\n    }\n    return vals\n  }\n}\n\nmodule.exports = SplineInterpolator\n","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest;","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.d3_array = {})));\n}(this, function (exports) { 'use strict';\n\n  function ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n\n  function bisector(compare) {\n    if (compare.length === 1) compare = ascendingComparator(compare);\n    return {\n      left: function(a, x, lo, hi) {\n        if (lo == null) lo = 0;\n        if (hi == null) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1;\n          else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (lo == null) lo = 0;\n        if (hi == null) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid;\n          else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n\n  function ascendingComparator(f) {\n    return function(d, x) {\n      return ascending(f(d), x);\n    };\n  }\n\n  var ascendingBisect = bisector(ascending);\n  var bisectRight = ascendingBisect.right;\n  var bisectLeft = ascendingBisect.left;\n\n  function descending(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  }\n\n  function number$1(x) {\n    return x === null ? NaN : +x;\n  }\n\n  function variance(array, f) {\n    var n = array.length,\n        m = 0,\n        a,\n        d,\n        s = 0,\n        i = -1,\n        j = 0;\n\n    if (f == null) {\n      while (++i < n) {\n        if (!isNaN(a = number$1(array[i]))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n\n    else {\n      while (++i < n) {\n        if (!isNaN(a = number$1(f(array[i], i, array)))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n\n    if (j > 1) return s / (j - 1);\n  }\n\n  function deviation(array, f) {\n    var v = variance(array, f);\n    return v ? Math.sqrt(v) : v;\n  }\n\n  function extent(array, f) {\n    var i = -1,\n        n = array.length,\n        a,\n        b,\n        c;\n\n    if (f == null) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) { a = c = b; break; }\n      while (++i < n) if ((b = array[i]) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n\n    else {\n      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = c = b; break; }\n      while (++i < n) if ((b = f(array[i], i, array)) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n\n    return [a, c];\n  }\n\n  function constant(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function identity(x) {\n    return x;\n  }\n\n  function range(start, stop, step) {\n    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n    var i = -1,\n        n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n        range = new Array(n);\n\n    while (++i < n) {\n      range[i] = start + i * step;\n    }\n\n    return range;\n  }\n\n  var e10 = Math.sqrt(50);\n  var e5 = Math.sqrt(10);\n  var e2 = Math.sqrt(2);\n  function ticks(start, stop, count) {\n    var step = tickStep(start, stop, count);\n    return range(\n      Math.ceil(start / step) * step,\n      Math.floor(stop / step) * step + step / 2, // inclusive\n      step\n    );\n  }\n\n  function tickStep(start, stop, count) {\n    var step0 = Math.abs(stop - start) / Math.max(0, count),\n        step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n        error = step0 / step1;\n    if (error >= e10) step1 *= 10;\n    else if (error >= e5) step1 *= 5;\n    else if (error >= e2) step1 *= 2;\n    return stop < start ? -step1 : step1;\n  }\n\n  function sturges(values) {\n    return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n  }\n\n  function number(x) {\n    return +x;\n  }\n\n  function histogram() {\n    var value = identity,\n        domain = extent,\n        threshold = sturges;\n\n    function histogram(data) {\n      var i,\n          n = data.length,\n          x,\n          values = new Array(n);\n\n      // Coerce values to numbers.\n      for (i = 0; i < n; ++i) {\n        values[i] = +value(data[i], i, data);\n      }\n\n      var xz = domain(values),\n          x0 = +xz[0],\n          x1 = +xz[1],\n          tz = threshold(values, x0, x1);\n\n      // Convert number of thresholds into uniform thresholds.\n      if (!Array.isArray(tz)) tz = ticks(x0, x1, +tz);\n\n      // Coerce thresholds to numbers, ignoring any outside the domain.\n      var m = tz.length;\n      for (i = 0; i < m; ++i) tz[i] = +tz[i];\n      while (tz[0] <= x0) tz.shift(), --m;\n      while (tz[m - 1] >= x1) tz.pop(), --m;\n\n      var bins = new Array(m + 1),\n          bin;\n\n      // Initialize bins.\n      for (i = 0; i <= m; ++i) {\n        bin = bins[i] = [];\n        bin.x0 = i > 0 ? tz[i - 1] : x0;\n        bin.x1 = i < m ? tz[i] : x1;\n      }\n\n      // Assign data to bins by value, ignoring any outside the domain.\n      for (i = 0; i < n; ++i) {\n        x = values[i];\n        if (x0 <= x && x <= x1) {\n          bins[bisectRight(tz, x, 0, m)].push(data[i]);\n        }\n      }\n\n      return bins;\n    }\n\n    histogram.value = function(_) {\n      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), histogram) : value;\n    };\n\n    histogram.domain = function(_) {\n      return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), histogram) : domain;\n    };\n\n    histogram.thresholds = function(_) {\n      if (!arguments.length) return threshold;\n      threshold = typeof _ === \"function\" ? _\n          : Array.isArray(_) ? constant(Array.prototype.map.call(_, number))\n          : constant(+_);\n      return histogram;\n    };\n\n    return histogram;\n  }\n\n  function quantile(array, p, f) {\n    if (f == null) f = number$1;\n    if (!(n = array.length)) return;\n    if ((p = +p) <= 0 || n < 2) return +f(array[0], 0, array);\n    if (p >= 1) return +f(array[n - 1], n - 1, array);\n    var n,\n        h = (n - 1) * p,\n        i = Math.floor(h),\n        a = +f(array[i], i, array),\n        b = +f(array[i + 1], i + 1, array);\n    return a + (b - a) * (h - i);\n  }\n\n  function freedmanDiaconis(values, min, max) {\n    values.sort(ascending);\n    return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(values.length, -1 / 3)));\n  }\n\n  function scott(values, min, max) {\n    return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));\n  }\n\n  function max(array, f) {\n    var i = -1,\n        n = array.length,\n        a,\n        b;\n\n    if (f == null) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }\n      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n    }\n\n    else {\n      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }\n      while (++i < n) if ((b = f(array[i], i, array)) != null && b > a) a = b;\n    }\n\n    return a;\n  }\n\n  function mean(array, f) {\n    var s = 0,\n        n = array.length,\n        a,\n        i = -1,\n        j = n;\n\n    if (f == null) {\n      while (++i < n) if (!isNaN(a = number$1(array[i]))) s += a; else --j;\n    }\n\n    else {\n      while (++i < n) if (!isNaN(a = number$1(f(array[i], i, array)))) s += a; else --j;\n    }\n\n    if (j) return s / j;\n  }\n\n  function median(array, f) {\n    var numbers = [],\n        n = array.length,\n        a,\n        i = -1;\n\n    if (f == null) {\n      while (++i < n) if (!isNaN(a = number$1(array[i]))) numbers.push(a);\n    }\n\n    else {\n      while (++i < n) if (!isNaN(a = number$1(f(array[i], i, array)))) numbers.push(a);\n    }\n\n    return quantile(numbers.sort(ascending), 0.5);\n  }\n\n  function merge(arrays) {\n    var n = arrays.length,\n        m,\n        i = -1,\n        j = 0,\n        merged,\n        array;\n\n    while (++i < n) j += arrays[i].length;\n    merged = new Array(j);\n\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n\n    return merged;\n  }\n\n  function min(array, f) {\n    var i = -1,\n        n = array.length,\n        a,\n        b;\n\n    if (f == null) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }\n      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n    }\n\n    else {\n      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }\n      while (++i < n) if ((b = f(array[i], i, array)) != null && a > b) a = b;\n    }\n\n    return a;\n  }\n\n  function pairs(array) {\n    var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);\n    while (i < n) pairs[i] = [p, p = array[++i]];\n    return pairs;\n  }\n\n  function permute(array, indexes) {\n    var i = indexes.length, permutes = new Array(i);\n    while (i--) permutes[i] = array[indexes[i]];\n    return permutes;\n  }\n\n  function scan(array, compare) {\n    if (!(n = array.length)) return;\n    var i = 0,\n        n,\n        j = 0,\n        xi,\n        xj = array[j];\n\n    if (!compare) compare = ascending;\n\n    while (++i < n) if (compare(xi = array[i], xj) < 0 || compare(xj, xj) !== 0) xj = xi, j = i;\n\n    if (compare(xj, xj) === 0) return j;\n  }\n\n  function shuffle(array, i0, i1) {\n    var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),\n        t,\n        i;\n\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0];\n      array[m + i0] = array[i + i0];\n      array[i + i0] = t;\n    }\n\n    return array;\n  }\n\n  function sum(array, f) {\n    var s = 0,\n        n = array.length,\n        a,\n        i = -1;\n\n    if (f == null) {\n      while (++i < n) if (a = +array[i]) s += a; // Note: zero and null are equivalent.\n    }\n\n    else {\n      while (++i < n) if (a = +f(array[i], i, array)) s += a;\n    }\n\n    return s;\n  }\n\n  function transpose(matrix) {\n    if (!(n = matrix.length)) return [];\n    for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {\n      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\n        row[j] = matrix[j][i];\n      }\n    }\n    return transpose;\n  }\n\n  function length(d) {\n    return d.length;\n  }\n\n  function zip() {\n    return transpose(arguments);\n  }\n\n  var version = \"0.7.1\";\n\n  exports.version = version;\n  exports.bisect = bisectRight;\n  exports.bisectRight = bisectRight;\n  exports.bisectLeft = bisectLeft;\n  exports.ascending = ascending;\n  exports.bisector = bisector;\n  exports.descending = descending;\n  exports.deviation = deviation;\n  exports.extent = extent;\n  exports.histogram = histogram;\n  exports.thresholdFreedmanDiaconis = freedmanDiaconis;\n  exports.thresholdScott = scott;\n  exports.thresholdSturges = sturges;\n  exports.max = max;\n  exports.mean = mean;\n  exports.median = median;\n  exports.merge = merge;\n  exports.min = min;\n  exports.pairs = pairs;\n  exports.permute = permute;\n  exports.quantile = quantile;\n  exports.range = range;\n  exports.scan = scan;\n  exports.shuffle = shuffle;\n  exports.sum = sum;\n  exports.ticks = ticks;\n  exports.tickStep = tickStep;\n  exports.transpose = transpose;\n  exports.variance = variance;\n  exports.zip = zip;\n\n}));","'use strict';\n\nfunction FFT(size) {\n  this.size = size | 0;\n  if (this.size <= 1 || (this.size & (this.size - 1)) !== 0)\n    throw new Error('FFT size must be a power of two and bigger than 1');\n\n  this._csize = size << 1;\n\n  // NOTE: Use of `var` is intentional for old V8 versions\n  var table = new Array(this.size * 2);\n  for (var i = 0; i < table.length; i += 2) {\n    const angle = Math.PI * i / this.size;\n    table[i] = Math.cos(angle);\n    table[i + 1] = -Math.sin(angle);\n  }\n  this.table = table;\n\n  // Find size's power of two\n  var power = 0;\n  for (var t = 1; this.size > t; t <<= 1)\n    power++;\n\n  // Calculate initial step's width:\n  //   * If we are full radix-4 - it is 2x smaller to give inital len=8\n  //   * Otherwise it is the same as `power` to give len=4\n  this._width = power % 2 === 0 ? power - 1 : power;\n\n  // Pre-compute bit-reversal patterns\n  this._bitrev = new Array(1 << this._width);\n  for (var j = 0; j < this._bitrev.length; j++) {\n    this._bitrev[j] = 0;\n    for (var shift = 0; shift < this._width; shift += 2) {\n      var revShift = this._width - shift - 2;\n      this._bitrev[j] |= ((j >>> shift) & 3) << revShift;\n    }\n  }\n\n  this._out = null;\n  this._data = null;\n  this._inv = 0;\n}\nmodule.exports = FFT;\n\nFFT.prototype.fromComplexArray = function fromComplexArray(complex, storage) {\n  var res = storage || new Array(complex.length >>> 1);\n  for (var i = 0; i < complex.length; i += 2)\n    res[i >>> 1] = complex[i];\n  return res;\n};\n\nFFT.prototype.createComplexArray = function createComplexArray() {\n  const res = new Array(this._csize);\n  for (var i = 0; i < res.length; i++)\n    res[i] = 0;\n  return res;\n};\n\nFFT.prototype.toComplexArray = function toComplexArray(input, storage) {\n  var res = storage || this.createComplexArray();\n  for (var i = 0; i < res.length; i += 2) {\n    res[i] = input[i >>> 1];\n    res[i + 1] = 0;\n  }\n  return res;\n};\n\nFFT.prototype.completeSpectrum = function completeSpectrum(spectrum) {\n  var size = this._csize;\n  var half = size >>> 1;\n  for (var i = 2; i < half; i += 2) {\n    spectrum[size - i] = spectrum[i];\n    spectrum[size - i + 1] = -spectrum[i + 1];\n  }\n};\n\nFFT.prototype.transform = function transform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._transform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.realTransform = function realTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._realTransform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.inverseTransform = function inverseTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 1;\n  this._transform4();\n  for (var i = 0; i < out.length; i++)\n    out[i] /= this.size;\n  this._out = null;\n  this._data = null;\n};\n\n// radix-4 implementation\n//\n// NOTE: Uses of `var` are intentional for older V8 version that do not\n// support both `let compound assignments` and `const phi`\nFFT.prototype._transform4 = function _transform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform2(outOff, off, step);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform4(outOff, off, step);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var quarterLen = len >>> 2;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      // Full case\n      var limit = outOff + quarterLen;\n      for (var i = outOff, k = 0; i < limit; i += 2, k += step) {\n        const A = i;\n        const B = A + quarterLen;\n        const C = B + quarterLen;\n        const D = C + quarterLen;\n\n        // Original values\n        const Ar = out[A];\n        const Ai = out[A + 1];\n        const Br = out[B];\n        const Bi = out[B + 1];\n        const Cr = out[C];\n        const Ci = out[C + 1];\n        const Dr = out[D];\n        const Di = out[D + 1];\n\n        // Middle values\n        const MAr = Ar;\n        const MAi = Ai;\n\n        const tableBr = table[k];\n        const tableBi = inv * table[k + 1];\n        const MBr = Br * tableBr - Bi * tableBi;\n        const MBi = Br * tableBi + Bi * tableBr;\n\n        const tableCr = table[2 * k];\n        const tableCi = inv * table[2 * k + 1];\n        const MCr = Cr * tableCr - Ci * tableCi;\n        const MCi = Cr * tableCi + Ci * tableCr;\n\n        const tableDr = table[3 * k];\n        const tableDi = inv * table[3 * k + 1];\n        const MDr = Dr * tableDr - Di * tableDi;\n        const MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        const T0r = MAr + MCr;\n        const T0i = MAi + MCi;\n        const T1r = MAr - MCr;\n        const T1i = MAi - MCi;\n        const T2r = MBr + MDr;\n        const T2i = MBi + MDi;\n        const T3r = inv * (MBr - MDr);\n        const T3i = inv * (MBi - MDi);\n\n        // Final values\n        const FAr = T0r + T2r;\n        const FAi = T0i + T2i;\n\n        const FCr = T0r - T2r;\n        const FCi = T0i - T2i;\n\n        const FBr = T1r + T3i;\n        const FBi = T1i - T3r;\n\n        const FDr = T1r - T3i;\n        const FDi = T1i + T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n        out[C] = FCr;\n        out[C + 1] = FCi;\n        out[D] = FDr;\n        out[D + 1] = FDi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleTransform2 = function _singleTransform2(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const evenI = data[off + 1];\n  const oddR = data[off + step];\n  const oddI = data[off + step + 1];\n\n  const leftR = evenR + oddR;\n  const leftI = evenI + oddI;\n  const rightR = evenR - oddR;\n  const rightI = evenI - oddI;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = leftI;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = rightI;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleTransform4 = function _singleTransform4(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Ai = data[off + 1];\n  const Br = data[off + step];\n  const Bi = data[off + step + 1];\n  const Cr = data[off + step2];\n  const Ci = data[off + step2 + 1];\n  const Dr = data[off + step3];\n  const Di = data[off + step3 + 1];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T0i = Ai + Ci;\n  const T1r = Ar - Cr;\n  const T1i = Ai - Ci;\n  const T2r = Br + Dr;\n  const T2i = Bi + Di;\n  const T3r = inv * (Br - Dr);\n  const T3i = inv * (Bi - Di);\n\n  // Final values\n  const FAr = T0r + T2r;\n  const FAi = T0i + T2i;\n\n  const FBr = T1r + T3i;\n  const FBi = T1i - T3r;\n\n  const FCr = T0r - T2r;\n  const FCi = T0i - T2i;\n\n  const FDr = T1r - T3i;\n  const FDi = T1i + T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = FAi;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = FCi;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n\n// Real input radix-4 implementation\nFFT.prototype._realTransform4 = function _realTransform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform2(outOff, off >>> 1, step >>> 1);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform4(outOff, off >>> 1, step >>> 1);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var halfLen = len >>> 1;\n    var quarterLen = halfLen >>> 1;\n    var hquarterLen = quarterLen >>> 1;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      for (var i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {\n        var A = outOff + i;\n        var B = A + quarterLen;\n        var C = B + quarterLen;\n        var D = C + quarterLen;\n\n        // Original values\n        var Ar = out[A];\n        var Ai = out[A + 1];\n        var Br = out[B];\n        var Bi = out[B + 1];\n        var Cr = out[C];\n        var Ci = out[C + 1];\n        var Dr = out[D];\n        var Di = out[D + 1];\n\n        // Middle values\n        var MAr = Ar;\n        var MAi = Ai;\n\n        var tableBr = table[k];\n        var tableBi = inv * table[k + 1];\n        var MBr = Br * tableBr - Bi * tableBi;\n        var MBi = Br * tableBi + Bi * tableBr;\n\n        var tableCr = table[2 * k];\n        var tableCi = inv * table[2 * k + 1];\n        var MCr = Cr * tableCr - Ci * tableCi;\n        var MCi = Cr * tableCi + Ci * tableCr;\n\n        var tableDr = table[3 * k];\n        var tableDi = inv * table[3 * k + 1];\n        var MDr = Dr * tableDr - Di * tableDi;\n        var MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        var T0r = MAr + MCr;\n        var T0i = MAi + MCi;\n        var T1r = MAr - MCr;\n        var T1i = MAi - MCi;\n        var T2r = MBr + MDr;\n        var T2i = MBi + MDi;\n        var T3r = inv * (MBr - MDr);\n        var T3i = inv * (MBi - MDi);\n\n        // Final values\n        var FAr = T0r + T2r;\n        var FAi = T0i + T2i;\n\n        var FBr = T1r + T3i;\n        var FBi = T1i - T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n\n        // Output final middle point\n        if (i === 0) {\n          var FCr = T0r - T2r;\n          var FCi = T0i - T2i;\n          out[C] = FCr;\n          out[C + 1] = FCi;\n          continue;\n        }\n\n        // Do not overwrite ourselves\n        if (i === hquarterLen)\n          continue;\n\n        // In the flipped case:\n        // MAi = -MAi\n        // MBr=-MBi, MBi=-MBr\n        // MCr=-MCr\n        // MDr=MDi, MDi=MDr\n        var ST0r = T1r;\n        var ST0i = -T1i;\n        var ST1r = T0r;\n        var ST1i = -T0i;\n        var ST2r = -inv * T3i;\n        var ST2i = -inv * T3r;\n        var ST3r = -inv * T2i;\n        var ST3i = -inv * T2r;\n\n        var SFAr = ST0r + ST2r;\n        var SFAi = ST0i + ST2i;\n\n        var SFBr = ST1r + ST3i;\n        var SFBi = ST1i - ST3r;\n\n        var SA = outOff + quarterLen - i;\n        var SB = outOff + halfLen - i;\n\n        out[SA] = SFAr;\n        out[SA + 1] = SFAi;\n        out[SB] = SFBr;\n        out[SB + 1] = SFBi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleRealTransform2 = function _singleRealTransform2(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const oddR = data[off + step];\n\n  const leftR = evenR + oddR;\n  const rightR = evenR - oddR;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = 0;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleRealTransform4 = function _singleRealTransform4(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Br = data[off + step];\n  const Cr = data[off + step2];\n  const Dr = data[off + step3];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T1r = Ar - Cr;\n  const T2r = Br + Dr;\n  const T3r = inv * (Br - Dr);\n\n  // Final values\n  const FAr = T0r + T2r;\n\n  const FBr = T1r;\n  const FBi = -T3r;\n\n  const FCr = T0r - T2r;\n\n  const FDr = T1r;\n  const FDi = T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = 0;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n","/*!\n * assign-deep <https://github.com/jonschlinkert/assign-deep>\n *\n * Copyright (c) 2017-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nconst toString = Object.prototype.toString;\nconst assignSymbols = require('assign-symbols');\n\nconst isValidKey = key => {\n  return key !== '__proto__' && key !== 'constructor' && key !== 'prototype';\n};\n\nconst assign = module.exports = (target, ...args) => {\n  let i = 0;\n  if (isPrimitive(target)) target = args[i++];\n  if (!target) target = {};\n  for (; i < args.length; i++) {\n    if (isObject(args[i])) {\n      for (const key of Object.keys(args[i])) {\n        if (isValidKey(key)) {\n          if (isObject(target[key]) && isObject(args[i][key])) {\n            assign(target[key], args[i][key]);\n          } else {\n            target[key] = args[i][key];\n          }\n        }\n      }\n      assignSymbols(target, args[i]);\n    }\n  }\n  return target;\n};\n\nfunction isObject(val) {\n  return typeof val === 'function' || toString.call(val) === '[object Object]';\n}\n\nfunction isPrimitive(val) {\n  return typeof val === 'object' ? val === null : typeof val !== 'function';\n}\n","/*!\n * assign-symbols <https://github.com/jonschlinkert/assign-symbols>\n *\n * Copyright (c) 2015-present, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nconst toString = Object.prototype.toString;\nconst isEnumerable = Object.prototype.propertyIsEnumerable;\nconst getSymbols = Object.getOwnPropertySymbols;\n\nmodule.exports = (target, ...args) => {\n  if (!isObject(target)) {\n    throw new TypeError('expected the first argument to be an object');\n  }\n\n  if (args.length === 0 || typeof Symbol !== 'function' || typeof getSymbols !== 'function') {\n    return target;\n  }\n\n  for (let arg of args) {\n    let names = getSymbols(arg);\n\n    for (let key of names) {\n      if (isEnumerable.call(arg, key)) {\n        target[key] = arg[key];\n      }\n    }\n  }\n  return target;\n};\n\nfunction isObject(val) {\n  return typeof val === 'function' || toString.call(val) === '[object Object]' || Array.isArray(val);\n}\n","const toString = Object.prototype.toString;\r\n\r\nexport default function isAnyArray(object) {\r\n  return toString.call(object).endsWith('Array]');\r\n}\r\n","/**\n * Returns the closest index of a `target` in an ordered array\n * @param {array<Number>} array\n * @param {number} target\n */\n\nexport function xFindClosestIndex(array, target) {\n  let low = 0;\n  let high = array.length - 1;\n  let middle = 0;\n  while (high - low > 1) {\n    middle = low + ((high - low) >> 1);\n    if (array[middle] < target) {\n      low = middle;\n    } else if (array[middle] > target) {\n      high = middle;\n    } else {\n      return middle;\n    }\n  }\n\n  if (low < array.length - 1) {\n    if (Math.abs(target - array[low]) < Math.abs(array[low + 1] - target)) {\n      return low;\n    } else {\n      return low + 1;\n    }\n  } else {\n    return low;\n  }\n}\n","import { xFindClosestIndex } from './xFindClosestIndex';\n\n/**\n * Returns an object with {fromIndex, toIndex} for a specific from / to\n * @param {array} x\n * @param {object} [options={}]\n * @param {number} [options.from] - First value for xyIntegration in the X scale\n * @param {number} [options.fromIndex=0] - First point for xyIntegration\n * @param {number} [options.to] - Last value for xyIntegration in the X scale\n * @param {number} [options.toIndex=x.length-1] - Last point for xyIntegration\n */\n\nexport function xGetFromToIndex(x, options = {}) {\n  let { fromIndex, toIndex, from, to } = options;\n\n  if (fromIndex === undefined) {\n    if (from !== undefined) {\n      fromIndex = xFindClosestIndex(x, from);\n    } else {\n      fromIndex = 0;\n    }\n  }\n  if (toIndex === undefined) {\n    if (to !== undefined) {\n      toIndex = xFindClosestIndex(x, to);\n    } else {\n      toIndex = x.length - 1;\n    }\n  }\n  if (fromIndex > toIndex) [fromIndex, toIndex] = [toIndex, fromIndex];\n  return { fromIndex, toIndex };\n}\n","import isArray from 'is-any-array';\n\nfunction min(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var minValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport default min;\n","import isArray from 'is-any-array';\n\nfunction max(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var maxValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport default max;\n","export const GAUSSIAN_EXP_FACTOR = -4 * Math.LN2;\nexport const ROOT_PI_OVER_LN2 = Math.sqrt(Math.PI / Math.LN2);\nexport const ROOT_THREE = Math.sqrt(3);\nexport const ROOT_2LN2 = Math.sqrt(2 * Math.LN2);\nexport const ROOT_2LN2_MINUS_ONE = Math.sqrt(2 * Math.LN2) - 1;\n","// https://en.wikipedia.org/wiki/Error_function#Inverse_functions\n// This code yields to a good approximation\n\n// If needed a better implementation using polynomial can be found on https://en.wikipedia.org/wiki/Error_function#Inverse_functions\n\nexport default function erfinv(x) {\n  let a = 0.147;\n  if (x === 0) return 0;\n  let ln1MinusXSqrd = Math.log(1 - x * x);\n  let lnEtcBy2Plus2 = ln1MinusXSqrd / 2 + 2 / (Math.PI * a);\n  let firstSqrt = Math.sqrt(lnEtcBy2Plus2 ** 2 - ln1MinusXSqrd / a);\n  let secondSqrt = Math.sqrt(firstSqrt - lnEtcBy2Plus2);\n  return secondSqrt * (x > 0 ? 1 : -1);\n}\n","import {\n  ROOT_2LN2,\n  GAUSSIAN_EXP_FACTOR,\n  ROOT_PI_OVER_LN2,\n} from '../util/constants';\nimport erfinv from '../util/erfinv';\n\nexport class Gaussian {\n  /**\n   * @param {object} [options = {}]\n   * @param {number} [options.height=4*LN2/(PI*FWHM)] Define the height of the peak, by default area=1 (normalized)\n   * @param {number} [options.fwhm = 500] - Full Width at Half Maximum in the number of points in FWHM.\n   * @param {number} [options.sd] - Standard deviation, if it's defined options.fwhm will be ignored and the value will be computed sd * Math.sqrt(8 * Math.LN2);\n   */\n  constructor(options = {}) {\n    this.fwhm = options.sd\n      ? Gaussian.widthToFWHM(2 * options.sd)\n      : options.fwhm\n      ? options.fwhm\n      : 500;\n    this.height =\n      options.height === undefined\n        ? Math.sqrt(-GAUSSIAN_EXP_FACTOR / Math.PI) / this.fwhm\n        : options.height;\n  }\n  /**\n   * Calculate a gaussian shape\n   * @param {object} [options = {}]\n   * @param {number} [options.factor = 6] - Number of time to take fwhm to calculate length. Default covers 99.99 % of area.\n   * @param {number} [options.length = fwhm * factor + 1] - total number of points to calculate\n   * @return {Float64Array} y values\n   */\n\n  getData(options = {}) {\n    let { length, factor = this.getFactor() } = options;\n\n    if (!length) {\n      length = Math.min(Math.ceil(this.fwhm * factor), Math.pow(2, 25) - 1);\n      if (length % 2 === 0) length++;\n    }\n\n    const center = (length - 1) / 2;\n    const data = new Float64Array(length);\n    for (let i = 0; i <= center; i++) {\n      data[i] = this.fct(i - center) * this.height;\n      data[length - 1 - i] = data[i];\n    }\n\n    return data;\n  }\n\n  /**\n   * Return a parameterized function of a gaussian shape (see README for equation).\n   * @param {number} x - x value to calculate.\n   * @returns {number} - the y value of gaussian with the current parameters.\n   */\n  fct(x) {\n    return Gaussian.fct(x, this.fwhm);\n  }\n\n  /**\n   * Calculate the number of times FWHM allows to reach a specific area coverage\n   * @param {number} [area=0.9999]\n   * @returns {number}\n   */\n  getFactor(area = 0.9999) {\n    return Gaussian.getFactor(area);\n  }\n\n  /**\n   * Calculate the area of the shape.\n   * @returns {number} - returns the area.\n   */\n\n  getArea() {\n    return Gaussian.getArea(this.fwhm, { height: this.height });\n  }\n\n  /**\n   * Compute the value of Full Width at Half Maximum (FWHM) from the width between the inflection points.\n   * //https://mathworld.wolfram.com/GaussianFunction.html\n   * @param {number} width - Width between the inflection points\n   * @returns {number} fwhm\n   */\n  widthToFWHM(width) {\n    //https://mathworld.wolfram.com/GaussianFunction.html\n    return Gaussian.widthToFWHM(width);\n  }\n\n  /**\n   * Compute the value of width between the inflection points from Full Width at Half Maximum (FWHM).\n   * //https://mathworld.wolfram.com/GaussianFunction.html\n   * @param {number} fwhm - Full Width at Half Maximum.\n   * @returns {number} width\n   */\n  fwhmToWidth(fwhm = this.fwhm) {\n    return Gaussian.fwhmToWidth(fwhm);\n  }\n\n  /**\n   * set a new full width at half maximum\n   * @param {number} fwhm - full width at half maximum\n   */\n  setFWHM(fwhm) {\n    this.fwhm = fwhm;\n  }\n\n  /**\n   * set a new height\n   * @param {number} height - The maximal intensity of the shape.\n   */\n  setHeight(height) {\n    this.height = height;\n  }\n}\n\n/**\n * Return a parameterized function of a gaussian shape (see README for equation).\n * @param {number} x - x value to calculate.\n * @param {number} fwhm - full width half maximum\n * @returns {number} - the y value of gaussian with the current parameters.\n */\nGaussian.fct = function fct(x, fwhm = 500) {\n  return Math.exp(GAUSSIAN_EXP_FACTOR * Math.pow(x / fwhm, 2));\n};\n\n/**\n * Compute the value of Full Width at Half Maximum (FWHM) from the width between the inflection points.\n * //https://mathworld.wolfram.com/GaussianFunction.html\n * @param {number} width - Width between the inflection points\n * @returns {number} fwhm\n */\nGaussian.widthToFWHM = function widthToFWHM(width) {\n  return width * ROOT_2LN2;\n};\n\n/**\n * Compute the value of width between the inflection points from Full Width at Half Maximum (FWHM).\n * //https://mathworld.wolfram.com/GaussianFunction.html\n * @param {number} fwhm - Full Width at Half Maximum.\n * @returns {number} width\n */\nGaussian.fwhmToWidth = function fwhmToWidth(fwhm) {\n  return fwhm / ROOT_2LN2;\n};\n\n/**\n * Calculate the area of a specific shape.\n * @param {number} fwhm - Full width at half maximum.\n * @param {object} [options = {}] - options.\n * @param {number} [options.height = 1] - Maximum y value of the shape.\n * @returns {number} - returns the area of the specific shape and parameters.\n */\n\nGaussian.getArea = function getArea(fwhm, options = {}) {\n  let { height = 1 } = options;\n  return (height * ROOT_PI_OVER_LN2 * fwhm) / 2;\n};\n\n/**\n * Calculate the number of times FWHM allows to reach a specific area coverage.\n * @param {number} [area=0.9999]\n * @returns {number}\n */\nGaussian.getFactor = function getFactor(area = 0.9999) {\n  return Math.sqrt(2) * erfinv(area);\n};\n","import { ROOT_THREE } from '../util/constants';\n\nexport class Lorentzian {\n  /**\n   * @param {object} [options = {}]\n   * @param {number} [options.height=2/(PI*FWHM)] Define the height of the peak, by default area=1 (normalized)\n   * @param {number} [options.fwhm = 500] - Full Width at Half Maximum in the number of points in FWHM.\n   * @param {number} [options.sd] - Standard deviation, if it's defined options.fwhm will be ignored and the value will be computed sd * Math.sqrt(8 * Math.LN2);\n   */\n  constructor(options = {}) {\n    this.fwhm = options.fwhm === undefined ? 500 : options.fwhm;\n    this.height =\n      options.height === undefined ? 2 / Math.PI / this.fwhm : options.height;\n  }\n  /**\n   * Calculate a lorentzian shape\n   * @param {object} [options = {}]\n   * @param {number} [options.factor = Math.tan(Math.PI * (0.9999 - 0.5))] - Number of time to take fwhm to calculate length. Default covers 99.99 % of area.\n   * @param {number} [options.length = fwhm * factor + 1] - total number of points to calculate\n   * @return {Float64Array} y values\n   */\n  getData(options = {}) {\n    let { length, factor = this.getFactor() } = options;\n\n    if (!length) {\n      length = Math.min(Math.ceil(this.fwhm * factor), Math.pow(2, 25) - 1);\n      if (length % 2 === 0) length++;\n    }\n\n    const center = (length - 1) / 2;\n    const data = new Float64Array(length);\n    for (let i = 0; i <= center; i++) {\n      data[i] = this.fct(i - center) * this.height;\n      data[length - 1 - i] = data[i];\n    }\n    return data;\n  }\n\n  /**\n   * Return a parameterized function of a lorentzian shape (see README for equation).\n   * @param {number} x - x value to calculate.\n   * @returns {number} - the y value of lorentzian with the current parameters.\n   */\n  fct(x) {\n    return Lorentzian.fct(x, this.fwhm);\n  }\n\n  /**\n   * Calculate the number of times FWHM allows to reach a specific area coverage\n   * @param {number} [area=0.9999]\n   * @returns {number}\n   */\n  getFactor(area = 0.9999) {\n    return Lorentzian.getFactor(area);\n  }\n\n  /**\n   * Calculate the area of the shape.\n   * @returns {number} - returns the area.\n   */\n\n  getArea() {\n    return Lorentzian.getArea(this.fwhm, { height: this.height });\n  }\n\n  /**\n   * Compute the value of width between the inflection points of a specific shape from Full Width at Half Maximum (FWHM).\n   * //https://mathworld.wolfram.com/LorentzianFunction.html\n   * @param {number} [fwhm] - Full Width at Half Maximum.\n   * @returns {number} width between the inflection points\n   */\n  fwhmToWidth(fwhm = this.fwhm) {\n    return Lorentzian.fwhmToWidth(fwhm);\n  }\n\n  /**\n   * Compute the value of Full Width at Half Maximum (FWHM) of a specific shape from the width between the inflection points.\n   * //https://mathworld.wolfram.com/LorentzianFunction.html\n   * @param {number} [width] Width between the inflection points\n   * @returns {number} fwhm\n   */\n  widthToFWHM(width) {\n    return Lorentzian.widthToFWHM(width);\n  }\n  /**\n   * set a new full width at half maximum\n   * @param {number} fwhm - full width at half maximum\n   */\n  setFWHM(fwhm) {\n    this.fwhm = fwhm;\n  }\n\n  /**\n   * set a new height\n   * @param {number} height - The maximal intensity of the shape.\n   */\n  setHeight(height) {\n    this.height = height;\n  }\n}\n\n/**\n * Return a parameterized function of a gaussian shape (see README for equation).\n * @param {number} x - x value to calculate.\n * @param {number} fwhm - full width half maximum\n * @returns {number} - the y value of gaussian with the current parameters.\n */\nLorentzian.fct = function fct(x, fwhm) {\n  const squareFWHM = fwhm * fwhm;\n  return squareFWHM / (4 * Math.pow(x, 2) + squareFWHM);\n};\n\n/**\n * Compute the value of width between the inflection points of a specific shape from Full Width at Half Maximum (FWHM).\n * //https://mathworld.wolfram.com/LorentzianFunction.html\n * @param {number} [fwhm] - Full Width at Half Maximum.\n * @returns {number} width between the inflection points\n */\nLorentzian.fwhmToWidth = function fwhmToWidth(fwhm) {\n  return fwhm / ROOT_THREE;\n};\n\n/**\n * Compute the value of Full Width at Half Maximum (FWHM) of a specific shape from the width between the inflection points.\n * //https://mathworld.wolfram.com/LorentzianFunction.html\n * @param {number} [width] Width between the inflection points\n * @returns {number} fwhm\n */\nLorentzian.widthToFWHM = function widthToFWHM(width) {\n  return width * ROOT_THREE;\n};\n\n/**\n * Calculate the area of a specific shape.\n * @param {number} fwhm - Full width at half maximum.\n * @param {*} [options = {}] - options.\n * @param {number} [options.height = 1] - Maximum y value of the shape.\n * @returns {number} - returns the area of the specific shape and parameters.\n */\nLorentzian.getArea = function getArea(fwhm, options = {}) {\n  let { height = 1 } = options;\n\n  return (height * Math.PI * fwhm) / 2;\n};\n\n/**\n * Calculate the number of times FWHM allows to reach a specific area coverage\n * @param {number} [area=0.9999]\n * @returns {number}\n */\nLorentzian.getFactor = function getFactor(area = 0.9999) {\n  return 2 * Math.tan(Math.PI * (area - 0.5));\n};\n","import {\n  GAUSSIAN_EXP_FACTOR,\n  ROOT_2LN2_MINUS_ONE,\n  ROOT_PI_OVER_LN2,\n} from '../util/constants';\n\nimport { Gaussian } from './Gaussian';\nimport { Lorentzian } from './Lorentzian';\n\nexport class PseudoVoigt {\n  /**\n   * @param {object} [options={}]\n   * @param {number} [options.height=1/(mu*FWHM/sqrt(4*LN2/PI)+(1-mu)*fwhm*PI*0.5)] Define the height of the peak, by default area=1 (normalized)\n   * @param {number} [options.fwhm=500] - Full Width at Half Maximum in the number of points in FWHM.\n   * @param {number} [options.mu=0.5] - ratio of gaussian contribution.\n   */\n\n  constructor(options = {}) {\n    this.mu = options.mu === undefined ? 0.5 : options.mu;\n    this.fwhm = options.fwhm === undefined ? 500 : options.fwhm;\n    this.height =\n      options.height === undefined\n        ? 1 /\n          ((this.mu / Math.sqrt(-GAUSSIAN_EXP_FACTOR / Math.PI)) * this.fwhm +\n            ((1 - this.mu) * this.fwhm * Math.PI) / 2)\n        : options.height;\n  }\n\n  /**\n   * Calculate a linear combination of gaussian and lorentzian function width an same full width at half maximum\n   * @param { object } [options = {}]\n   * @param { number } [options.factor = 2 * Math.tan(Math.PI * (0.9999 - 0.5))] - Number of time to take fwhm in the calculation of the length.Default covers 99.99 % of area.\n   * @param { number } [options.length = fwhm * factor + 1] - total number of points to calculate\n   * @return { object } - { fwhm, data<Float64Array>} - An with the number of points at half maximum and the array of y values covering the 99.99 % of the area.\n   */\n\n  getData(options = {}) {\n    let { length, factor = this.getFactor() } = options;\n    if (!length) {\n      length = Math.ceil(this.fwhm * factor);\n      if (length % 2 === 0) length++;\n    }\n\n    const center = (length - 1) / 2;\n\n    let data = new Float64Array(length);\n    for (let i = 0; i <= center; i++) {\n      data[i] = this.fct(i - center) * this.height;\n      data[length - 1 - i] = data[i];\n    }\n\n    return data;\n  }\n\n  /**\n   * Return a parameterized function of a linear combination of Gaussian and Lorentzian shapes where the full width at half maximum are the same for both kind of shapes (see README for equation).\n   * @param {number} [x] x value to calculate.\n   * @returns {number} - the y value of a pseudo voigt with the current parameters.\n   */\n\n  fct(x) {\n    return PseudoVoigt.fct(x, this.fwhm, this.mu);\n  }\n\n  /**\n   * Calculate the number of times FWHM allows to reach a specific area coverage\n   * @param {number} [area=0.9999] - required area to be coverage\n   * @param {number} [mu=this.mu] - ratio of gaussian contribution.\n   * @returns {number}\n   */\n  getFactor(area = 0.9999, mu = this.mu) {\n    return PseudoVoigt.getFactor(area, mu);\n  }\n\n  /**\n   * Calculate the area of the shape.\n   * @returns {number} - returns the area.\n   */\n  getArea() {\n    return PseudoVoigt.getArea(this.fwhm, { height: this.height, mu: this.mu });\n  }\n\n  /**\n   * Compute the value of Full Width at Half Maximum (FMHM) from width between the inflection points.\n   * @param {number} width - width between the inflection points\n   * @param {number} [mu = 0.5] - ratio of gaussian contribution.\n   * @returns {number} Full Width at Half Maximum (FMHM).\n   */\n  widthToFWHM(width, mu) {\n    return PseudoVoigt.widthToFWHM(width, mu);\n  }\n  /**\n   * Compute the value of width between the inflection points from Full Width at Half Maximum (FWHM).\n   * @param {number} fwhm - Full Width at Half Maximum.\n   * @param {number} [mu] - ratio of gaussian contribution.\n   * @returns {number} width between the inflection points.\n   */\n  fwhmToWidth(fwhm = this.fwhm, mu = this.mu) {\n    return PseudoVoigt.fwhmToWidth(fwhm, mu);\n  }\n\n  /**\n   * set a new full width at half maximum\n   * @param {number} fwhm - full width at half maximum\n   */\n  setFWHM(fwhm) {\n    this.fwhm = fwhm;\n  }\n\n  /**\n   * set a new height\n   * @param {number} height - The maximal intensity of the shape.\n   */\n  setHeight(height) {\n    this.height = height;\n  }\n\n  /**\n   * set a new mu\n   * @param {number} mu - ratio of gaussian contribution.\n   */\n  setMu(mu) {\n    this.mu = mu;\n  }\n}\n\n/**\n * Return a parameterized function of a gaussian shape (see README for equation).\n * @param {number} x - x value to calculate.\n * @param {number} fwhm - full width half maximum\n * @param {number} [mu=0.5] - ratio of gaussian contribution.\n * @returns {number} - the y value of gaussian with the current parameters.\n */\nPseudoVoigt.fct = function fct(x, fwhm, mu = 0.5) {\n  return (1 - mu) * Lorentzian.fct(x, fwhm) + mu * Gaussian.fct(x, fwhm);\n};\n\n/**\n * Compute the value of Full Width at Half Maximum (FMHM) from width between the inflection points.\n * @param {number} width - width between the inflection points\n * @param {number} [mu = 0.5] - ratio of gaussian contribution.\n * @returns {number} Full Width at Half Maximum (FMHM).\n */\nPseudoVoigt.widthToFWHM = function widthToFWHM(width, mu = 0.5) {\n  return width * (mu * ROOT_2LN2_MINUS_ONE + 1);\n};\n/**\n * Compute the value of width between the inflection points from Full Width at Half Maximum (FWHM).\n * @param {number} fwhm - Full Width at Half Maximum.\n * @param {number} [mu = 0.5] - ratio of gaussian contribution.\n * @returns {number} width between the inflection points.\n */\nPseudoVoigt.fwhmToWidth = function fwhmToWidth(fwhm, mu = 0.5) {\n  return fwhm / (mu * ROOT_2LN2_MINUS_ONE + 1);\n};\n\n/**\n * Calculate the area of a specific shape.\n * @param {number} fwhm - Full width at half maximum.\n * @param {*} [options = {}] - options.\n * @param {number} [options.height = 1] - Maximum y value of the shape.\n * @param {number} [options.mu = 0.5] - ratio of gaussian contribution.\n * @returns {number} - returns the area of the specific shape and parameters.\n */\nPseudoVoigt.getArea = function getArea(fwhm, options = {}) {\n  let { height = 1, mu = 0.5 } = options;\n  return (fwhm * height * (mu * ROOT_PI_OVER_LN2 + (1 - mu) * Math.PI)) / 2;\n};\n\n/**\n * Calculate the number of times FWHM allows to reach a specific area coverage\n * @param {number} [area=0.9999] - required area to be coverage\n * @param {number} [mu=this.mu] - ratio of gaussian contribution.\n * @returns {number}\n */\nPseudoVoigt.getFactor = function getFactor(area = 0.9999, mu = 0.5) {\n  return mu < 1 ? Lorentzian.getFactor(area) : Gaussian.getFactor(area);\n};\n","import { ROOT_2LN2, GAUSSIAN_EXP_FACTOR } from '../util/constants';\nimport erfinv from '../util/erfinv';\n\nlet axis = ['x', 'y'];\n\nexport class Gaussian2D {\n  /**\n   * @param {object} [options = {}]\n   * @param {number} [options.height=4*LN2/(PI*xFWHM*yFWHM)] Define the height of the peak, by default area=1 (normalized).\n   * @param {number} [options.fwhm = 500] - Full Width at Half Maximum in the number of points in FWHM used if x or y has not the fwhm property.\n   * @param {object} [options.x] - Options for x axis.\n   * @param {number} [options.x.fwhm = fwhm] - Full Width at Half Maximum in the number of points in FWHM for x axis.\n   * @param {number} [options.x.sd] - Standard deviation for x axis, if it's defined options.x.fwhm will be ignored and the value will be computed sd * Math.sqrt(8 * Math.LN2);\n   * @param {object} [options.y] - Options for y axis.\n   * @param {number} [options.y.fwhm = fwhm] - Full Width at Half Maximum in the number of points in FWHM for y axis.\n   * @param {number} [options.y.sd] - Standard deviation for y axis, if it's defined options.y.fwhm will be ignored and the value will be computed sd * Math.sqrt(8 * Math.LN2);\n   */\n  constructor(options = {}) {\n    let { fwhm: globalFWHM = 500 } = options;\n\n    for (let i of axis) {\n      let fwhm;\n      if (!options[i]) {\n        fwhm = globalFWHM;\n      } else {\n        fwhm = options[i].sd\n          ? Gaussian2D.widthToFWHM(2 * options[i].sd)\n          : options[i].fwhm || globalFWHM;\n      }\n      this[i] = { fwhm };\n    }\n\n    this.height =\n      options.height === undefined\n        ? -GAUSSIAN_EXP_FACTOR / Math.PI / this.x.fwhm / this.y.fwhm\n        : options.height;\n  }\n  /**\n   * Calculate a Gaussian2D shape\n   * @param {object} [options = {}]\n   * @param {number} [options.factor] - Number of time to take fwhm to calculate length. Default covers 99.99 % of area.\n   * @param {object} [options.x] - parameter for x axis.\n   * @param {number} [options.x.length=fwhm*factor+1] - length on x axis.\n   * @param {number} [options.x.factor=factor] - Number of time to take fwhm to calculate length. Default covers 99.99 % of area.\n   * @param {object} [options.y] - parameter for y axis.\n   * @param {number} [options.y.length=fwhm*factor+1] - length on y axis.\n   * @param {number} [options.y.factor=factor] - Number of time to take fwhm to calculate length. Default covers 99.99 % of area.\n   * @return {Array<Float64Array>} - z values.\n   */\n\n  getData(options = {}) {\n    let { x = {}, y = {}, factor = this.getFactor(), length } = options;\n\n    let xLength = x.length || length;\n    if (!xLength) {\n      let { factor: xFactor = factor } = x;\n      xLength = Math.min(Math.ceil(this.x.fwhm * xFactor), Math.pow(2, 25) - 1);\n      if (xLength % 2 === 0) xLength++;\n    }\n\n    let yLength = y.length || length;\n    if (!yLength) {\n      let { factor: yFactor = factor } = y;\n      yLength = Math.min(Math.ceil(this.y.fwhm * yFactor), Math.pow(2, 25) - 1);\n      if (yLength % 2 === 0) yLength++;\n    }\n\n    const xCenter = (xLength - 1) / 2;\n    const yCenter = (yLength - 1) / 2;\n    const data = new Array(xLength);\n    for (let i = 0; i < xLength; i++) {\n      data[i] = new Array(yLength);\n    }\n\n    for (let i = 0; i < xLength; i++) {\n      for (let j = 0; j < yLength; j++) {\n        data[i][j] = this.fct(i - xCenter, j - yCenter) * this.height;\n      }\n    }\n\n    return data;\n  }\n\n  /**\n   * Return the intensity value of a 2D gaussian shape (see README for equation).\n   * @param {number} x - x value to calculate.\n   * @param {number} y - y value to calculate.\n   * @returns {number} - the z value of bi-dimensional gaussian with the current parameters.\n   */\n  fct(x, y) {\n    return Gaussian2D.fct(x, y, this.x.fwhm, this.y.fwhm);\n  }\n\n  /**\n   * Calculate the number of times FWHM allows to reach a specific volume coverage.\n   * @param {number} [volume=0.9999]\n   * @returns {number}\n   */\n  getFactor(volume = 0.9999) {\n    return Gaussian2D.getFactor(volume);\n  }\n\n  /**\n   * Calculate the volume of the shape.\n   * @returns {number} - returns the volume.\n   */\n\n  getVolume() {\n    return Gaussian2D.getVolume(this.x.fwhm, this.y.fwhm, {\n      height: this.height,\n    });\n  }\n\n  /**\n   * Compute the value of Full Width at Half Maximum (FWHM) from the width between the inflection points.\n   * //https://mathworld.wolfram.com/Gaussian2DFunction.html\n   * @param {number} width - Width between the inflection points\n   * @returns {number} fwhm\n   */\n  widthToFWHM(width) {\n    //https://mathworld.wolfram.com/Gaussian2DFunction.html\n    return Gaussian2D.widthToFWHM(width);\n  }\n\n  /**\n   * Compute the value of width between the inflection points from Full Width at Half Maximum (FWHM).\n   * //https://mathworld.wolfram.com/Gaussian2DFunction.html\n   * @param {number} fwhm - Full Width at Half Maximum.\n   * @returns {number} width\n   */\n  fwhmToWidth(fwhm = this.x.fwhm) {\n    return Gaussian2D.fwhmToWidth(fwhm);\n  }\n\n  /**\n   * set a new full width at half maximum\n   * @param {number} fwhm - full width at half maximum\n   * @param {string|Array<string>} axisLabel - label of axis, if it is undefined fwhm is set to both axis.\n   */\n  setFWHM(fwhm, axisLabel) {\n    if (!axisLabel) axisLabel = axis;\n    if (!Array.isArray(axisLabel)) axisLabel = [axisLabel];\n    for (let i of axisLabel) {\n      let axisName = i.toLowerCase();\n      if (axisName !== 'y' && axisName !== 'x') {\n        throw new Error('axis label should be x or y');\n      }\n      this[axisName].fwhm = fwhm;\n    }\n  }\n\n  /**\n   * set a new height\n   * @param {number} height - The maximal intensity of the shape.\n   */\n  setHeight(height) {\n    this.height = height;\n  }\n}\n\n/**\n * Return a parameterized function of a Gaussian2D shape (see README for equation).\n * @param {number} x - x value to calculate.\n * @param {number} y - y value to calculate.\n * @param {number} fwhmX - full width half maximum in the x axis.\n * @param {number} fwhmY - full width half maximum in the y axis.\n * @returns {number} - the z value of bi-dimensional gaussian with the current parameters.\n */\nGaussian2D.fct = function fct(x, y, xFWHM = 500, yFWHM = 500) {\n  return Math.exp(\n    GAUSSIAN_EXP_FACTOR * (Math.pow(x / xFWHM, 2) + Math.pow(y / yFWHM, 2)),\n  );\n};\n\n/**\n * Compute the value of Full Width at Half Maximum (FWHM) from the width between the inflection points.\n * //https://mathworld.wolfram.com/Gaussian2DFunction.html\n * @param {number} width - Width between the inflection points\n * @returns {number} fwhm\n */\nGaussian2D.widthToFWHM = function widthToFWHM(width) {\n  return width * ROOT_2LN2;\n};\n\n/**\n * Compute the value of width between the inflection points from Full Width at Half Maximum (FWHM).\n * //https://mathworld.wolfram.com/Gaussian2DFunction.html\n * @param {number} fwhm - Full Width at Half Maximum.\n * @returns {number} width\n */\nGaussian2D.fwhmToWidth = function fwhmToWidth(fwhm) {\n  return fwhm / ROOT_2LN2;\n};\n\n/**\n * Calculate the volume of a specific shape.\n * @param {number} xFWHM - Full width at half maximum for x axis.\n * @param {number} yFWHM - Full width at half maximum for y axis.\n * @param {object} [options = {}] - options.\n * @param {number} [options.height = 1] - Maximum z value of the shape.\n * @returns {number} - returns the area of the specific shape and parameters.\n */\n\nGaussian2D.getVolume = function getVolume(xFWHM, yFWHM, options = {}) {\n  let { height = 1 } = options;\n  return (height * Math.PI * xFWHM * yFWHM) / Math.LN2 / 4;\n};\n\n/**@TODO look for a better factor\n * Calculate the number of times FWHM allows to reach a specific volume coverage.\n * @param {number} [volume=0.9999]\n * @returns {number}\n */\nGaussian2D.getFactor = function getFactor(volume = 0.9999) {\n  return Math.sqrt(2) * erfinv(volume);\n};\n","import isArray from 'is-any-array';\nimport max from 'ml-array-max';\nimport min from 'ml-array-min';\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport default rescale;\n","const indent = ' '.repeat(2);\nconst indentData = ' '.repeat(4);\n\nexport function inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\n\nexport function inspectMatrixWithOptions(matrix, options = {}) {\n  const { maxRows = 15, maxColumns = 10, maxNumSize = 8 } = options;\n  return `${matrix.constructor.name} {\n${indent}[\n${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize)}\n${indent}]\n${indent}rows: ${matrix.rows}\n${indent}columns: ${matrix.columns}\n}`;\n}\n\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indentData}`);\n}\n\nfunction formatNumber(num, maxNumSize) {\n  const numStr = String(num);\n  if (numStr.length <= maxNumSize) {\n    return numStr.padEnd(maxNumSize, ' ');\n  }\n  const precise = num.toPrecision(maxNumSize - 2);\n  if (precise.length <= maxNumSize) {\n    return precise;\n  }\n  const exponential = num.toExponential(maxNumSize - 2);\n  const eIndex = exponential.indexOf('e');\n  const e = exponential.slice(eIndex);\n  return exponential.slice(0, maxNumSize - e.length) + e;\n}\n","/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nexport function checkIndices(matrix, rowIndices, columnIndices) {\n  return {\n    row: checkRowIndices(matrix, rowIndices),\n    column: checkColumnIndices(matrix, columnIndices),\n  };\n}\n\nexport function checkRowIndices(matrix, rowIndices) {\n  if (typeof rowIndices !== 'object') {\n    throw new TypeError('unexpected type for row indices');\n  }\n\n  let rowOut = rowIndices.some((r) => {\n    return r < 0 || r >= matrix.rows;\n  });\n\n  if (rowOut) {\n    throw new RangeError('row indices are out of range');\n  }\n\n  if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n\n  return rowIndices;\n}\n\nexport function checkColumnIndices(matrix, columnIndices) {\n  if (typeof columnIndices !== 'object') {\n    throw new TypeError('unexpected type for column indices');\n  }\n\n  let columnOut = columnIndices.some((c) => {\n    return c < 0 || c >= matrix.columns;\n  });\n\n  if (columnOut) {\n    throw new RangeError('column indices are out of range');\n  }\n  if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);\n\n  return columnIndices;\n}\n\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nexport function newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n\nexport function checkNonEmpty(matrix) {\n  if (matrix.isEmpty()) {\n    throw new Error('Empty matrix has no elements to index');\n  }\n}\n","import { newArray } from './util';\n\nexport function sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nexport function varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nexport function varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nexport function centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nexport function centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nexport function centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nexport function getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nexport function getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nexport function getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nexport function scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n","import rescale from 'ml-array-rescale';\n\nimport { inspectMatrix, inspectMatrixWithOptions } from './inspect';\nimport { installMathOperations } from './mathOperations';\nimport {\n  sumByRow,\n  sumByColumn,\n  sumAll,\n  productByRow,\n  productByColumn,\n  productAll,\n  varianceByRow,\n  varianceByColumn,\n  varianceAll,\n  centerByRow,\n  centerByColumn,\n  centerAll,\n  scaleByRow,\n  scaleByColumn,\n  scaleAll,\n  getScaleByRow,\n  getScaleByColumn,\n  getScaleAll,\n} from './stat';\nimport {\n  checkRowVector,\n  checkRowIndex,\n  checkColumnIndex,\n  checkColumnVector,\n  checkRange,\n  checkIndices,\n  checkNonEmpty,\n} from './util';\n\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max() {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min() {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      if (row.length > 0) {\n        rescale(row, { min, max, output: row });\n      }\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      if (column.length) {\n        rescale(column, {\n          min: min,\n          max: max,\n          output: column,\n        });\n      }\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  kroneckerSum(other) {\n    other = Matrix.checkMatrix(other);\n    if (!this.isSquare() || !other.isSquare()) {\n      throw new Error('Kronecker Sum needs two Square Matrices');\n    }\n    let m = this.rows;\n    let n = other.rows;\n    let AxI = this.kroneckerProduct(Matrix.eye(n, n));\n    let IxB = Matrix.eye(m, m).kroneckerProduct(other);\n    return AxI.add(IxB);\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (matrix.isEmpty()) {\n      return this;\n    }\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    let indices = checkIndices(this, rowIndices, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < indices.row.length; i++) {\n      let rowIndex = indices.row[i];\n      for (let j = 0; j < indices.column.length; j++) {\n        let columnIndex = indices.column[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[\n    Symbol.for('nodejs.util.inspect.custom')\n  ] = inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      // eslint-disable-next-line no-constructor-return\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns >= 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (Array.isArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n      if (typeof nColumns !== 'number') {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n","export function installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n    return this;\n  };\n}\n"],"sourceRoot":""}