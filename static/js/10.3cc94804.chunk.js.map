{"version":3,"sources":["services/devicesOptions.js","services/db.js","services/devicesService.js","hooks/useNotification.js","services/mqttService.js","services/broadCastDeviceService.js","pages/BroadcastDevices/DevicesList.jsx","pages/BroadcastDevices/DeviceModal.jsx","pages/BroadcastDevices/index.jsx"],"names":["DEVICES_DB","DEFAULT_PORT","window","location","protocol","DEFAULT_PROTOCOL","DEVICE_PROTOCOLS","DEVICE_TYPE","broadcast","interactive","local","COMMANDS","help","settings","compactSettings","runExperiment","kinetic","reset","sleep","setParameter","label","value","DEVICE_KINDS","Object","keys","legoinoDeviceInformation","filter","key","kind","map","events","parameters","DB","dbName","connect","PouchDB","revs_limit","auto_compaction","getInfo","Promise","resolve","reject","db","info","then","res","close","catch","err","getAll","options","a","allDocs","include_docs","get","docId","Error","put","doc","update","_id","resGet","_rev","resPut","errPut","remove","resRm","errRm","destroy","throwDbError","error","additionalMsg","console","log","message","name","concatDeviceId","type","id","getDevices","startkey","endkey","rows","i","e","getDevice","deviceId","updateDevice","deviceData","deleteDevice","deviceID","addDevice","url","port","topic","username","password","addDevice2","device","useNotification","notificationContext","useNotificationCenter","addNotification","title","textColor","Icon","timeout","className","clsx","content","icon","addErrorNotification","SvgSolidExclamation","addWarningNotification","addInfoNotification","SvgOutlineExclamationCircle","client","onSuccess","onError","connected","hostname","isFunction","brokerUrl","mqtt","keepalive","reconnectPeriod","on","stream","end","getClientInstance","subscribe","onMessageReceived","qos","payload","data","parseCurrentSettings","toString","unsubscribe","disconnect","callback","connectDevice","mqttClient","dbClient","onSubscribe","Date","now","getAllData","getLastData","descending","limit","getPageData","skip","getAllDataCount","total_rows","testDeviceConnection","DevicesList","onSelect","onEdit","onDelete","useState","selectedElement","setSelectedElement","handleSelect","element","onClick","protocolOptions","val","toUpperCase","kindOptions","option","validationSchema","Yup","shape","max","matches","required","positive","integer","DeviceModal","isOpen","onClose","onSave","onUpdate","initialValues","updateMode","isEmpty","footerMessage","setFooterMessage","formRef","useRef","_initialValues","v","useEffect","setTimeout","onSubmit","values","renderFooterMessage","state","onRequestClose","iconColor","animated","hasCloseButton","requestCloseOnBackdrop","requestCloseOnEsc","fluid","wrapperComponent","Form","wrapperProps","innerRef","Header","Body","placeholder","disabled","inputClassName","leadingInlineAddon","renderOption","o","getValue","Footer","stopPropagation","current","BroadcastDevices","history","match","render","setRender","isModalOpen","setIsModalOpen","devicesList","setDevicesList","onEditValues","setOnEditValues","list","push"],"mappings":"4ZAIaA,EAAa,wBACbC,EACkB,WAA7BC,OAAOC,SAASC,SAAwB,MAAQ,KACrCC,EACkB,WAA7BH,OAAOC,SAASC,SAAwB,MAAQ,OAIrCE,EAAmB,CAAC,OAAQ,MAAO,OAEnCC,EAAc,CACzBC,UAAW,YACXC,YAAa,cACbC,MAAO,SAGIC,EAAW,CACtBC,KAAM,IACNC,SAAU,IACVC,gBAAiB,KACjBC,cAAe,IACfC,QAAS,IACTC,MAAO,SACPC,MAAO,IACPC,aAAc,SAACC,EAAOC,GAAR,gBAAqBD,GAArB,OAA6BC,KAGhCC,EAAeC,OAAOC,KAAKC,KACrCC,QAAO,SAACC,GAAD,OAASF,IAAyBE,GAAKC,QAC9CC,KAAI,SAACF,GACJ,MAAwCF,IAAyBE,GAAjE,EAAQG,OAAR,EAAgBC,WAChB,OADA,qB,8ECiEWC,IA/FJ,SAACC,GACV,IAAMC,EAAU,kBACd,IAAIC,IAAQF,EAAQ,CAAEG,WAAY,EAAGC,iBAAiB,KAkFxD,MAAO,CACLC,QA/Ec,kBACd,IAAIC,SAAQ,SAACC,EAASC,GACpB,IAAMC,EAAKR,IACXQ,EAAGC,OACAC,MAAK,SAACC,GAAD,OAASH,EAAGI,OAAM,kBAAMN,EAAQK,SACrCE,OAAM,SAACC,GAAD,OAASN,EAAGI,OAAM,kBAAML,EAAOO,aA2E1CC,OAxEU,uCAAG,WAAOC,GAAP,SAAAC,EAAA,+EACb,IAAIZ,SAAQ,SAACC,EAASC,GACpB,IAAMC,EAAKR,IACXQ,EAAGU,QAAH,aACEC,cAAc,GACXH,IAEFN,MAAK,SAACC,GAAD,OAASH,EAAGI,OAAM,kBAAMN,EAAQK,SACrCE,OAAM,SAACC,GAAD,OAASN,EAAGI,OAAM,kBAAML,EAAOO,aAR7B,2CAAH,sDAyEVM,IA9DU,SAACC,GAAD,OACV,IAAIhB,SAAQ,SAACC,EAASC,GACpB,IAAMC,EAAKR,IACXqB,EACIb,EACGY,IAAIC,GACJX,MAAK,SAACC,GAAD,OAASH,EAAGI,OAAM,kBAAMN,EAAQK,SACrCE,OAAM,SAACC,GAAD,OAASN,EAAGI,OAAM,kBAAML,EAAOO,SACxCP,EAAO,IAAIe,MAAM,sCAuDvBC,IApDU,SAACC,GAAD,OACV,IAAInB,SAAQ,SAACC,EAASC,GACpB,IAAMC,EAAKR,IACT,QAASwB,EAEPhB,EACGe,IAAIC,GACJd,MAAK,SAACC,GAAD,OAASH,EAAGI,OAAM,kBAAMN,EAAQK,SACrCE,OAAM,SAACC,GAAD,OAASN,EAAGI,OAAM,kBAAML,EAAOO,SAJxCP,EAAO,IAAIe,MAAM,4CAiDvBG,OA1Ca,SAACD,GAAD,OACb,IAAInB,SAAQ,SAACC,EAASC,GACpB,IAAMC,EAAKR,IACT,QAASwB,EAEPhB,EACGY,IAAII,EAAIE,KACRhB,MAAK,SAACiB,GAAD,OACJnB,EACGe,IADH,2BACYC,GADZ,IACiBI,KAAMD,EAAOC,QAC3BlB,MAAK,SAACmB,GAAD,OAAYrB,EAAGI,OAAM,kBAAMN,EAAQuB,SACxChB,OAAM,SAACiB,GAAD,OAAYvB,EAAOuB,SAE7BjB,OAAM,SAACC,GAAD,OAASN,EAAGI,OAAM,kBAAML,EAAOO,SATxCP,EAAO,IAAIe,MAAM,4CAuCvBS,OA3Ba,SAACV,GAAD,OACb,IAAIhB,SAAQ,SAACC,EAASC,GACpB,IAAMC,EAAKR,IACXqB,EACIb,EACGY,IAAIC,GACJX,MAAK,SAACiB,GAAD,OACJnB,EACGuB,OAAO,CAAEL,IAAKL,EAAOO,KAAMD,EAAOC,OAClClB,MAAK,SAACsB,GAAD,OAAWxB,EAAGI,OAAM,kBAAMN,EAAQ0B,SACvCnB,OAAM,SAACoB,GAAD,OAAW1B,EAAO0B,SAE5BpB,OAAM,SAACC,GAAD,OAASN,EAAGI,OAAM,kBAAML,EAAOO,SACxCP,EAAO,IAAIe,MAAM,uCAevBY,QAZc,WAEd,OADWlC,IACDkC,c,8TChFRC,EAAe,SAACC,EAAOC,GAC3BC,QAAQC,IAAIH,GACZ,IAAMtB,EAAM,IAAIQ,MAAJ,UAAae,EAAb,qBAAgCD,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAOI,UAEnD,MADA1B,EAAI2B,KAAO,iBACL3B,GAGK4B,EAAiB,SAACC,EAAMjD,EAAMkD,GAAb,gBAAuBD,EAAvB,YAA+BjD,EAA/B,YAAuCkD,IAExDC,EAAU,uCAAG,WAAOF,GAAP,SAAA1B,EAAA,+EACxBnB,YAAGhC,KACAiD,OAAO,CAAE+B,SAAS,GAAD,OAAKH,GAAQI,OAAO,GAAD,OAAKJ,EAAL,YACpCjC,MAAK,SAACC,GAAD,OAASA,EAAIqC,KAAKrD,KAAI,SAACsD,GAAD,OAAOA,EAAEzB,UACpCX,OAAM,SAACqC,GAAD,OAAOf,EAAae,EAAD,uCAJJ,2CAAH,sDAYVC,EAAS,uCAAG,WAAOC,GAAP,SAAAnC,EAAA,+EACvBnB,YAAGhC,KACAsD,IAAIgC,GACJvC,OAAM,SAACqC,GAAD,OAAOf,EAAae,EAAD,wBAHL,2CAAH,sDAKTG,EAAY,uCAAG,WAAOC,GAAP,SAAArC,EAAA,+EAC1BnB,YAAGhC,KACA2D,OAAO6B,GACPzC,OAAM,SAACqC,GAAD,OAAOf,EAAae,EAAD,2BAHF,2CAAH,sDAKZK,EAAe,SAACC,GAAD,OAC1B1D,YAAGhC,KACAiE,OAAOyB,GACP3C,OAAM,SAACqC,GAAD,OAAOf,EAAae,EAAD,2BAIjBO,EAAY,SACvBd,EADuB,OAGrBjD,EAHqB,EAGrBA,KACA+C,EAJqB,EAIrBA,KACAiB,EALqB,EAKrBA,IALqB,IAMrBxF,gBANqB,MAMVC,IANU,MAOrBwF,YAPqB,MAOd5F,IAPc,EAQrB6F,EARqB,EAQrBA,MACAC,EATqB,EASrBA,SACAC,EAVqB,EAUrBA,SAVqB,OAavBhE,YAAGhC,KACAyD,IAAI,CACHG,IAAI,GAAD,OAAKiB,EAAL,YAAajD,EAAb,YAAqB+C,GACxBA,OACAiB,MACAxF,WACAyF,OACAC,QACAlE,OACAmE,WACAC,aAEDjD,OAAM,SAACqC,GAAD,MACM,aAAXA,EAAET,KACEN,EAAae,EAAD,8BACZf,EAAae,EAAD,2BAGTa,EAAa,SAACC,GAAD,OACxBlE,YAAGhC,KACAyD,IAAIyC,GACJnD,OAAM,SAACqC,GAAD,MACM,aAAXA,EAAET,KACEN,EAAae,EAAD,8BACZf,EAAae,EAAD,4B,iCChFtB,4DAOe,SAASe,IACtB,IAAMC,EAAsBC,cAEtBC,EAAkB,SAACC,EAAO7B,EAAR,GAAmD,IAAhC8B,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC1DN,EAAoBE,gBAClB,CACEC,MACE,sBAAMI,UAAWC,YAAK,0BAA2BJ,EAAY,OAA7D,SACGD,IAGLM,QAAS,sBAAMF,UAAU,2BAAhB,SAA4CjC,IACrDoC,KAAM,cAACL,EAAD,CAAME,UAAWC,YAAK,UAAWJ,EAAY,UAErDE,IA4BJ,MAAO,CAAEK,qBARoB,SAACR,EAAO7B,GAA6B,IAApBgC,EAAmB,uDAAT,IACtDJ,EAAgBC,EAAO7B,EAAS,CAC9B8B,UAAW,eACXC,KAAMO,IACNN,QAASA,KAIkBO,uBAhBA,SAACV,EAAO7B,GAA6B,IAApBgC,EAAmB,uDAAT,KACxDJ,EAAgBC,EAAO7B,EAAS,CAC9B8B,UAAW,gBACXC,KAAMO,IACNN,QAASA,KAY0CQ,oBAxB3B,SAACX,EAAO7B,GAA6B,IAApBgC,EAAmB,uDAAT,IACrDJ,EAAgBC,EAAO7B,EAAS,CAC9B8B,UAAW,gBACXC,KAAMU,IACNT,QAASA,Q,yGCxBXU,E,6EAyCSlF,EAAU,SAAC0D,EAAKxF,EAAUyF,EAAME,EAAUC,GAYrD,OAXsB,IAAIzD,SAAQ,SAACC,EAASC,IAxCpB,SACxBmD,EACAxF,EACAyF,EACAE,EACAC,EACAqB,EACAC,GAGIF,GAAUA,EAAOG,WAAaH,EAAOlE,QAAQsE,WAAa5B,GAC5D6B,qBAAWJ,IAAcA,EAAUD,GAErC,IAAMM,EAAS,UAAMtH,EAAN,cAAoBwF,EAApB,YAA2BC,IAC1CuB,EAASO,IAAKzF,QAAQwF,EAAW,CAC/BE,UAAW,IACXC,gBAAiB,OAGZC,GAAG,WAAW,WACnBtD,QAAQC,IAAR,uBAA4BiD,EAA5B,cAA2CN,EAAOG,YAClDE,qBAAWJ,IAAcA,EAAUD,MAGrCA,EAAOW,OAAOD,GAAG,SAAS,SAAC9E,GACzBwB,QAAQC,IAAIzB,GACZ,IAAMsB,EAAQ,IAAId,MAAJ,uCAAyCkE,EAAzC,MACdpD,EAAMK,KAAO,aACbyC,EAAOY,MACPP,qBAAWH,IAAYA,EAAQhD,MAY/B2D,CACErC,EACAxF,EACAyF,EACAE,EACAC,GACA,SAACoB,GAAD,OAAY5E,EAAQ4E,MACpB,SAAC9C,GAAD,OAAW7B,EAAO6B,UAQX4D,EAAY,SAACd,EAAQtB,EAAOqC,EAAmBb,GAC1DF,EAAOc,UAAUpC,EAAO,CAAEsC,IAAK,IAAK,SAACpF,GACnCA,EACIyE,qBAAWH,IAAYA,EAAQtE,GAC/BoE,EAAOU,GAAG,WAAW,SAAChC,EAAOuC,GA3BjB,IAACC,EA4BXb,qBAAWU,IACTA,GA7BSG,EA6BqBD,EA5BjCE,+BAAqBD,EAAKE,WAAY,YAkC7C,OAFoB,SAAClB,GAAD,OAAaF,EAAOqB,YAAY3C,EAAO,GAAIwB,KAKpDoB,EAAa,SAACtB,EAAQuB,GAAT,OACxBvB,EAAOY,KAAI,WACTxD,QAAQC,IAAR,uBAA4B2C,EAAOlE,QAAQsE,SAA3C,mBACAC,qBAAWkB,IAAaA,Q,SCzEfC,EAAgB,SAAC,GAWvB,IAVLhF,EAUI,EAVJA,IACAe,EASI,EATJA,KACA/C,EAQI,EARJA,KAQI,IAPJ0D,gBAOI,MAPO1B,GAAG,UAAOhC,EAAP,YAAe+C,GAOzB,EANJiB,EAMI,EANJA,IAMI,IALJxF,gBAKI,MALOC,IAKP,MAJJwF,YAII,MAJG5F,IAIH,EAHJ6F,EAGI,EAHJA,MAGI,EAFJC,SAEI,EADJC,SAoDA,OAlDsB,IAAIzD,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,iBAAAU,EAAA,+EAELjB,EAAQ0D,EAAKxF,EAAUyF,GAFlB,OAExBgD,EAFwB,OAGxBC,EAAW9G,YAAGsD,GAiCpB9C,EAAQ,CACN0F,UAhCiB,SAACa,EAAazB,GAU/B,OAToBY,EAClBW,EACA/C,GACA,SAACuC,GACCS,EAASrF,IAAT,aAAeG,IAAKoF,KAAKC,MAAMT,YAAeH,IAC9CU,EAAYV,KAEdf,IAyBFoB,WApBkB,kBAAMA,EAAWG,IAqBnCK,WAnBiB,kBACjBJ,EAAS7F,SAASL,MAAK,SAACC,GAAD,OAASA,EAAIqC,KAAKrD,KAAI,SAACsD,GAAD,OAAOA,EAAEzB,WAmBtDyF,YAjBkB,kBAClBL,EACG7F,OAAO,CAAEmG,YAAY,EAAMC,MAAO,IAClCzG,MAAK,SAACC,GAAD,OAASA,EAAIqC,KAAKrD,KAAI,SAACsD,GAAD,OAAOA,EAAEzB,WAevC4F,YAbkB,SAACC,EAAMF,GAAP,OAClBP,EACG7F,OAAO,CAAEmG,YAAY,EAAMG,KAAMA,EAAMF,MAAOA,IAC9CzG,MAAK,SAACC,GAAD,OAASA,EAAIqC,KAAKrD,KAAI,SAACsD,GAAD,OAAOA,EAAEzB,WAWvC8F,gBATsB,kBACtBV,EAAS7F,SAASL,MAAK,SAACC,GAAD,OAASA,EAAI4G,iBAlCR,kDA8C9BhH,EAAO,EAAD,IA9CwB,0DAAZ,0DAqDXiH,EAAuB,SAAC,GAO9B,IANL9D,EAMI,EANJA,IAMI,IALJxF,gBAKI,MALOC,IAKP,MAJJwF,YAII,MAJG5F,IAIH,EAHJ6F,EAGI,EAHJA,MAGI,EAFJC,SAEI,EADJC,SAoBA,OAlBsB,IAAIzD,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,iBAAAU,EAAA,+EAELjB,EAAQ0D,EAAKxF,EAAUyF,GAFlB,OAExBgD,EAFwB,OAGxBJ,EAAcP,EAClBW,EACA/C,GACA,SAACuC,GACCI,IACAC,EAAWG,GAAY,kBAAMrG,EAAQ6F,QAEvC5F,GAV4B,gDAc9BA,EAAO,EAAD,IAdwB,yDAAZ,2D,iOCATkH,EAzEK,SAAC,GAA0C,IAAxCrB,EAAuC,EAAvCA,KAAMsB,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAC7C,EAA8CC,qBAA9C,mBAAOC,EAAP,KAAwBC,EAAxB,KAEMC,EAAY,uCAAG,WAAOC,EAAS/E,GAAhB,SAAAjC,EAAA,sDAEd6G,IACHC,EAAmBE,GAEnBP,EAASO,EAAS/E,GADD,kBAAM6E,EAAmB,UAJzB,2CAAH,wDAQlB,OACE,qBAAKtD,UAAU,gDAAf,SACG2B,EAAKzG,KAAI,SAACsI,GAAD,OACR,qBAEExD,UAAU,gHACVyD,QAAS,SAAChF,GAAD,OAAO8E,EAAaC,EAAS/E,IAHxC,UAKE,sBAAKuB,UAAU,+CAAf,UACGqD,IAAoBG,GACnB,qBAAKxD,UAAU,gEAAf,SACE,qBAAKA,UAAU,iDAAf,SACE,cAAC,IAAD,CAASA,UAAU,iCAIzB,qBAAKA,UAAU,mCAAf,SACE,sBAAKA,UAAU,qDAAf,UACE,mBAAGA,UAAU,6DAAb,SACGwD,EAAQxF,OAEX,sBAAKgC,UAAU,qDAAf,UACE,oBAAGA,UAAU,WAAb,UACE,sBAAMA,UAAU,gBAAhB,4BACCwD,EAAQvI,QAEX,oBAAG+E,UAAU,WAAb,UACE,sBAAMA,UAAU,gBAAhB,oBADF,UAEMwD,EAAQ/J,SAFd,cAE4B+J,EAAQvE,IAFpC,YAE2CuE,EAAQtE,SAEnD,oBAAGc,UAAU,WAAb,UACE,sBAAMA,UAAU,gBAAhB,sBACCwD,EAAQrE,YAGb,sBAAKa,UAAU,4DAAf,UACE,wBACEA,UAAU,4FACVyD,QAAS,SAAChF,GAAD,OAAOyE,EAAOM,EAAS/E,IAFlC,SAIE,cAAC,IAAD,CAAauB,UAAU,oBAEzB,wBACEA,UAAU,4FACVyD,QAAS,SAAChF,GAAD,OAAO0E,EAASK,EAAS/E,IAFpC,SAIE,cAAC,IAAD,CAAeuB,UAAU,4BAKjC,8BACE,cAAC,IAAD,CAAwBA,UAAU,kCAGtC,qBAAKA,UAAU,yCAnDVwD,EAAQvI,KAAOuI,EAAQxF,Y,kCCOhC0F,EAAkB/J,IAAiBuB,KAAI,SAACyI,GAC5C,MAAO,CAAElJ,MAAOkJ,EAAIC,cAAelJ,MAAOiJ,MAEtCE,EAAclJ,IAAaO,KAAI,SAAC4I,GACpC,OAAO,2BAAKA,GAAZ,IAAoBrJ,MAAOqJ,EAAO9F,KAAMtD,MAAOoJ,EAAO7I,UAElD8I,EAAmBC,MAAaC,MAAM,CAC1CjG,KAAMgG,MACHE,IAAI,GAAI,kBACRC,QACC,gBACA,oDAEDC,SAAS,YACZnF,IAAK+E,MAAaI,SAAS,YAC3BlF,KAAM8E,MAAaK,WAAWC,UAC9B7K,SAAUuK,MACV/I,KAAM+I,MAAaI,SAAS,YAC5BjF,MAAO6E,MAAaI,SAAS,YAC7BhF,SAAU4E,MAAaI,SAAS,cA6NnBG,EAzNK,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,OAAQC,EAA+C,EAA/CA,QAASC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cAClDC,GAAcC,kBAAQF,GAC5B,EAA0CxB,mBAAS,yBAAnD,mBAAO2B,EAAP,KAAsBC,EAAtB,KACMC,EAAUC,iBAAO,MAEjBC,EAAc,aAClBnH,KAAM,WACNiB,IAAK,sBACLxF,SAAUiK,EAAgB3I,QAAO,SAACqK,GAAD,OAAOA,EAAE1K,QAAUhB,OAAkB,GACnEgB,MACHwE,KAAM5F,IACN2B,KAAM4I,EAAY,GAAGnJ,MACrByE,MAAO,0BACPC,SAAU,WACVC,SAAU,QACPuF,GAGLS,qBAAU,YAEPb,GAAUc,YAAW,kBAAMN,EAAiB,2BAAU,OACtD,CAACR,IAGJ,IAAMe,EAAQ,uCAAG,WAAOC,GAAP,SAAAhJ,EAAA,mEAGbqI,EAHa,gCAIHF,EAASa,GAJN,6CAKHd,EAAO9K,IAAYC,UAAW2L,GAL3B,OAMbf,IANa,wDAQP,IAAI5H,MAAM,KAAEkB,SARL,0DAAH,sDA2BR0H,EAAsB,SAACC,EAAO3H,GAClC,OAAQ2H,GACN,IAAK,aACHV,EACE,sBAAKhF,UAAU,qEAAf,UACE,cAAC,IAAD,CAASA,UAAU,iBACnB,+BAAOjC,QAGX,MAEF,IAAK,UACHiH,EACE,sBAAKhF,UAAU,qEAAf,UACE,cAAC,IAAD,CAAiBA,UAAU,iBAC3B,+BAAOjC,QAGX,MAEF,IAAK,QACHiH,EACE,sBAAKhF,UAAU,oEAAf,UACE,cAAC,IAAD,CAAaA,UAAU,iBACvB,+BAAOjC,QAGX,MAEF,QACEiH,EAAiB,2BAKvB,OACE,eAAC,IAAD,CACER,OAAQA,EACRmB,eAAgBlB,EAChBtE,KAAM,cAAC,IAAD,IACNyF,UAAU,UACVC,UAAQ,EACRC,gBAAc,EACdC,wBAAsB,EACtBC,mBAAiB,EACjBC,OAAK,EACLC,iBAAkBC,IAClBC,aAAc,CACZC,SAAUpB,EACVL,cAAeO,EACfpB,mBACAwB,SAAUA,EACVvF,UAAW,UAhBf,UAmBE,cAAC,IAAMsG,OAAP,iCACA,eAAC,IAAMC,KAAP,WACE,sBAAKvG,UAAU,WAAf,UACE,cAAC,IAAD,CACEhC,KAAK,OACLG,GAAG,OACH1D,MAAM,cACN+L,YAAY,cACZC,SAAU5B,EACVT,UAAQ,EACRpE,UAAU,SACV0G,eAAe,WAEjB,sBAAK1G,UAAU,gGAAf,UACE,cAAC,IAAD,CACEhC,KAAK,MACLG,GAAG,MACH1D,MAAM,MACN+L,YAAY,kBACZpC,UAAQ,EACRuC,mBAAoB,cAAC,IAAD,IACpB3G,UAAU,+BACV0G,eAAe,WAEjB,sBAAK1G,UAAU,mDAAf,UACE,cAAC,IAAD,CACEhC,KAAK,WACLG,GAAG,WACH1D,MAAM,WACN8B,QAASmH,EACTkD,aAAc,SAACC,GAAD,gBAAUA,EAAEpM,QAC1BqM,SAAU,SAACD,GAAD,OAAOA,EAAEnM,OACnBsF,UAAU,kBACV0G,eAAe,WAEjB,cAAC,IAAD,CACE1I,KAAK,OACLG,GAAG,OACH1D,MAAM,OACNuF,UAAU,cACV0G,eAAe,iBAIrB,sBAAK1G,UAAU,4CAAf,UACE,cAAC,IAAD,CACEhC,KAAK,OACLG,GAAG,OACH1D,MAAM,cACN8B,QAASsH,EACT+C,aAAc,SAACC,GAAD,gBAAUA,EAAEpM,QAC1BqM,SAAU,SAACD,GAAD,OAAOA,EAAEnM,OACnB0J,UAAQ,EACRpE,UAAU,mBACV0G,eAAe,uBAEjB,cAAC,IAAD,CACE1I,KAAK,QACLG,GAAG,QACH1D,MAAM,QACN2J,UAAQ,EACRpE,UAAU,cACV0G,eAAe,cAInB,sBAAK1G,UAAU,gGAAf,UACE,cAAC,IAAD,CACEhC,KAAK,WACLG,GAAG,WACH1D,MAAM,WACN+L,YAAY,WACZpC,UAAQ,EACRuC,mBAAoB,cAAC,IAAD,IACpB3G,UAAU,+BACV0G,eAAe,WAEjB,cAAC,IAAD,CACE1I,KAAK,WACLG,GAAG,WACH1D,MAAM,WACNyD,KAAK,WACLsI,YAAY,WACZpC,UAAQ,EACRuC,mBAAoB,cAAC,IAAD,IACpB3G,UAAU,wBACV0G,eAAe,iBAIrB,cAAC,IAAD,OAEF,cAAC,IAAMK,OAAP,UACE,sBAAK/G,UAAU,yCAAf,UACG+E,EACD,wBACEtB,QAtKa,SAAChF,GACtBA,EAAEuI,kBACFvB,EAAoB,aAAc,kBAClCH,YAAW,WACTvC,YAAqBkC,EAAQgC,QAAQzB,QAClCvJ,MAAK,WACJwJ,EAAoB,UAAW,gBAEhCrJ,OAAM,SAACC,GACNoJ,EAAoB,QAAD,4BAA+BpJ,EAAI0B,eAEzD,MA4JKG,KAAK,SACL8B,UAAU,uKAHZ,6BAOA,cAAC,IAAD,CAAcA,UAAU,gCAAxB,SACG6E,EAAa,SAAW,iBCtKtBqC,UAjFU,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACnC,EAA4BhE,oBAAS,GAArC,mBAAOiE,EAAP,KAAeC,EAAf,KACA,EAAsClE,oBAAS,GAA/C,mBAAOmE,EAAP,KAAoBC,EAApB,KACA,EAAsCpE,mBAAS,IAA/C,mBAAOqE,EAAP,KAAoBC,EAApB,KACA,EAAwCtE,mBAAS,IAAjD,mBAAOuE,EAAP,KAAqBC,EAArB,KACQxH,EAAyBZ,cAAzBY,qBAERiF,qBAAU,WAERjH,YAAWxE,IAAYC,WAAWoC,MAAK,SAAC4L,GAAD,OAAUH,EAAeG,QAC/D,CAACR,IAuCJ,OACE,sBAAKrH,UAAU,MAAf,UACE,oBAAIA,UAAU,+BAAd,+BACA,qBAAKA,UAAU,+BAAf,SACE,cAAC,IAAD,CAAQyD,QAzCM,WAClBmE,EAAgB,IAChBJ,GAAe,IAuCX,0BAEF,gCACE,sBAAKxH,UAAU,0CAAf,UACE,oBAAIA,UAAU,8DAAd,+BAGA,qBAAKA,UAAU,0CAEjB,cAAC,EAAD,CACE2B,KAAM8F,EACNxE,SA1Ca,SAAC1D,EAAQd,EAAGuD,GAC/BsD,WAAU,sBAAC,sBAAA9I,EAAA,sDACTuG,YAAqBxD,GAClBtD,MAAK,WACJ+F,IACAmF,EAAQW,KAAKV,EAAMnI,IAAM,IAAMM,EAAOtC,QAEvCb,OAAM,SAACC,GACN+D,EAAqB3B,EAAET,KAAMS,EAAEV,SAC/BiE,OARK,2CAUR,MAgCGkB,OA7BW,SAAC3D,EAAQd,GAC1BA,EAAEuI,kBACFY,EAAgBrI,GAChBiI,GAAe,IA2BTrE,SAxBa,SAAC5D,EAAQd,GAC5BA,EAAEuI,kBACFlI,YAAaS,EAAOtC,KACjBhB,MAAK,kBAAMqL,GAAWD,MACtBjL,OAAM,SAACqC,GAAD,OAAO2B,EAAqB3B,EAAET,KAAMS,EAAEV,kBAwB7C,cAAC,EAAD,CACEyG,OAAQ+C,EACR9C,QAvDe,WACnB6C,GAAWD,GACXG,GAAe,IAsDX5C,cAAe+C,EACfjD,OAAQ1F,IACR2F,SAAU/F","file":"static/js/10.3cc94804.chunk.js","sourcesContent":["import legoinoDeviceInformation from 'legoino-device-information';\n\n// Default Values\n\nexport const DEVICES_DB = 'BIOREACTOR-UI_devices';\nexport const DEFAULT_PORT =\n  window.location.protocol === 'https:' ? '443' : '80'; // old '8080'\nexport const DEFAULT_PROTOCOL =\n  window.location.protocol === 'https:' ? 'wss' : 'http'; // old tcp\n\n// Static Values\n\nexport const DEVICE_PROTOCOLS = ['http', 'tcp', 'wss'];\n\nexport const DEVICE_TYPE = {\n  broadcast: 'broadcast',\n  interactive: 'interactive',\n  local: 'local',\n};\n\nexport const COMMANDS = {\n  help: 'h',\n  settings: 'u',\n  compactSettings: 'uc',\n  runExperiment: 'r',\n  kinetic: 'k',\n  reset: 'ur1234',\n  sleep: 'l',\n  setParameter: (label, value) => `${label}${value}`,\n};\n\nexport const DEVICE_KINDS = Object.keys(legoinoDeviceInformation)\n  .filter((key) => legoinoDeviceInformation[key].kind)\n  .map((key) => {\n    const { events, parameters, ...info } = legoinoDeviceInformation[key];\n    return info;\n  });\n\nexport const DEVICE_STATUS = {\n  opening: 1,\n  opened: 2,\n  closed: 3,\n  missing: 9,\n  error: 10,\n};\n","import PouchDB from 'pouchdb';\n\n// Wrap Db interface in case of switching to another Db other than \"PouchDb\"\n\nconst DB = (dbName) => {\n  const connect = () =>\n    new PouchDB(dbName, { revs_limit: 1, auto_compaction: true });\n\n  // DB operations to return\n\n  const getInfo = () =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      db.info()\n        .then((res) => db.close(() => resolve(res)))\n        .catch((err) => db.close(() => reject(err)));\n    });\n\n  const getAll = async (options) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      db.allDocs({\n        include_docs: true,\n        ...options,\n      })\n        .then((res) => db.close(() => resolve(res)))\n        .catch((err) => db.close(() => reject(err)));\n    });\n\n  const get = (docId) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      docId\n        ? db\n            .get(docId)\n            .then((res) => db.close(() => resolve(res)))\n            .catch((err) => db.close(() => reject(err)))\n        : reject(new Error('Doc fetch : docId is required'));\n    });\n\n  const put = (doc) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      !('_id' in doc)\n        ? reject(new Error('Doc create : _id is required in doc'))\n        : db\n            .put(doc)\n            .then((res) => db.close(() => resolve(res)))\n            .catch((err) => db.close(() => reject(err)));\n    });\n\n  const update = (doc) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      !('_id' in doc)\n        ? reject(new Error('Doc update : _id is required in doc'))\n        : db\n            .get(doc._id)\n            .then((resGet) =>\n              db\n                .put({ ...doc, _rev: resGet._rev })\n                .then((resPut) => db.close(() => resolve(resPut)))\n                .catch((errPut) => reject(errPut)),\n            )\n            .catch((err) => db.close(() => reject(err)));\n    });\n\n  const remove = (docId) =>\n    new Promise((resolve, reject) => {\n      const db = connect();\n      docId\n        ? db\n            .get(docId)\n            .then((resGet) =>\n              db\n                .remove({ _id: docId, _rev: resGet._rev })\n                .then((resRm) => db.close(() => resolve(resRm)))\n                .catch((errRm) => reject(errRm)),\n            )\n            .catch((err) => db.close(() => reject(err)))\n        : reject(new Error('Doc remove : docId is required'));\n    });\n\n  const destroy = () => {\n    const db = connect();\n    return db.destroy();\n  };\n\n  return {\n    getInfo,\n    getAll,\n    get,\n    put,\n    update,\n    remove,\n    destroy,\n  };\n};\n\nexport default DB;\n","import DB from './db';\nimport { DEVICES_DB, DEFAULT_PORT, DEFAULT_PROTOCOL } from './devicesOptions';\n\n// Private Functions\n\nconst throwDbError = (error, additionalMsg) => {\n  console.log(error);\n  const err = new Error(`${additionalMsg} \\n${error?.message}`);\n  err.name = 'DATABASE_ERROR';\n  throw err;\n};\n\nexport const concatDeviceId = (type, kind, id) => `${type}_${kind}_${id}`;\n\nexport const getDevices = async (type) =>\n  DB(DEVICES_DB)\n    .getAll({ startkey: `${type}`, endkey: `${type}\\uffff` })\n    .then((res) => res.rows.map((i) => i.doc))\n    .catch((e) => throwDbError(e, `Get locally saved devices error`));\n\nexport const getDevicesByKind = async (type, kind) =>\n  DB(DEVICES_DB)\n    .getAll({ startkey: `${type}_${kind}`, endkey: `${type}_${kind}\\uffff` })\n    .then((res) => res.rows)\n    .catch((e) => throwDbError(e, `Get locally saved devices error`));\n\nexport const getDevice = async (deviceId) =>\n  DB(DEVICES_DB)\n    .get(deviceId)\n    .catch((e) => throwDbError(e, `Get device error`));\n\nexport const updateDevice = async (deviceData) =>\n  DB(DEVICES_DB)\n    .update(deviceData)\n    .catch((e) => throwDbError(e, `Update device error`));\n\nexport const deleteDevice = (deviceID) =>\n  DB(DEVICES_DB)\n    .remove(deviceID)\n    .catch((e) => throwDbError(e, `Delete device error`));\n\n// add device to devices DB\n\nexport const addDevice = (\n  type,\n  {\n    kind,\n    name,\n    url,\n    protocol = DEFAULT_PROTOCOL,\n    port = DEFAULT_PORT,\n    topic,\n    username,\n    password,\n  },\n) =>\n  DB(DEVICES_DB)\n    .put({\n      _id: `${type}_${kind}_${name}`,\n      name,\n      url,\n      protocol,\n      port,\n      topic,\n      kind,\n      username,\n      password,\n    })\n    .catch((e) =>\n      e.name === 'conflict'\n        ? throwDbError(e, `Device name must be unique`)\n        : throwDbError(e, `Insert device error`),\n    );\n\nexport const addDevice2 = (device) =>\n  DB(DEVICES_DB)\n    .put(device)\n    .catch((e) =>\n      e.name === 'conflict'\n        ? throwDbError(e, `Device name must be unique`)\n        : throwDbError(e, `Insert device error`),\n    );\n","import clsx from 'clsx';\nimport {\n  SvgOutlineExclamationCircle,\n  SvgSolidExclamation,\n  useNotificationCenter,\n} from '../components/tailwind-ui';\n\nexport default function useNotification() {\n  const notificationContext = useNotificationCenter();\n\n  const addNotification = (title, message, { textColor, Icon, timeout }) => {\n    notificationContext.addNotification(\n      {\n        title: (\n          <span className={clsx('text-base font-semibold', textColor + '500')}>\n            {title}\n          </span>\n        ),\n        content: <span className=\"text-sm text-neutral-500\">{message}</span>,\n        icon: <Icon className={clsx('w-8 h-8', textColor + '600')} />,\n      },\n      timeout,\n    );\n  };\n\n  const addInfoNotification = (title, message, timeout = 1000) => {\n    addNotification(title, message, {\n      textColor: 'text-primary-',\n      Icon: SvgOutlineExclamationCircle,\n      timeout: timeout,\n    });\n  };\n\n  const addWarningNotification = (title, message, timeout = 2500) => {\n    addNotification(title, message, {\n      textColor: 'text-warning-',\n      Icon: SvgSolidExclamation,\n      timeout: timeout,\n    });\n  };\n\n  const addErrorNotification = (title, message, timeout = 5000) => {\n    addNotification(title, message, {\n      textColor: 'text-danger-',\n      Icon: SvgSolidExclamation,\n      timeout: timeout,\n    });\n  };\n\n  return { addErrorNotification, addWarningNotification, addInfoNotification };\n}\n","import mqtt from 'mqtt';\nimport { isFunction } from 'lodash';\nimport { parseCurrentSettings } from 'legoino-util';\n\n// Private Functions\nlet client;\n\nconst getClientInstance = (\n  url,\n  protocol,\n  port,\n  username,\n  password,\n  onSuccess,\n  onError,\n) => {\n  // if client is already connected\n  if (client && client.connected && client.options.hostname === url)\n    isFunction(onSuccess) && onSuccess(client);\n\n  const brokerUrl = `${protocol}://${url}:${port}`;\n  client = mqtt.connect(brokerUrl, {\n    keepalive: 300,\n    reconnectPeriod: 5000,\n  });\n\n  client.on('connect', () => {\n    console.log(`connected to ${brokerUrl} : ${client.connected}`);\n    isFunction(onSuccess) && onSuccess(client);\n  });\n\n  client.stream.on('error', (err) => {\n    console.log(err);\n    const error = new Error(`Couldn't connect to BROKER \"${brokerUrl}\"`);\n    error.name = 'Mqtt Error';\n    client.end();\n    isFunction(onError) && onError(error);\n  });\n};\n\nconst parseToJson = (data) => {\n  return parseCurrentSettings(data.toString(), {});\n};\n\n// Public Functions\n\nexport const connect = (url, protocol, port, username, password) => {\n  const clientPromise = new Promise((resolve, reject) => {\n    getClientInstance(\n      url,\n      protocol,\n      port,\n      username,\n      password,\n      (client) => resolve(client),\n      (error) => reject(error),\n    );\n  });\n  return clientPromise;\n};\n\n// TO DO: update function\n\nexport const subscribe = (client, topic, onMessageReceived, onError) => {\n  client.subscribe(topic, { qos: 2 }, (err) => {\n    err\n      ? isFunction(onError) && onError(err)\n      : client.on('message', (topic, payload) => {\n          isFunction(onMessageReceived) &&\n            onMessageReceived(parseToJson(payload));\n        });\n  });\n\n  const unsubscribe = (onError) => client.unsubscribe(topic, {}, onError);\n\n  return unsubscribe;\n};\n\nexport const disconnect = (client, callback) =>\n  client.end(() => {\n    console.log(`mqtt broker \"${client.options.hostname}\" disconnected`);\n    isFunction(callback) && callback();\n  });\n","import DB from './db';\nimport { connect, subscribe, disconnect } from './mqttService';\nimport { DEFAULT_PORT, DEFAULT_PROTOCOL } from './devicesOptions';\n\n// Public Functions\n\n//\n// connect to broadcast device & return a client instance with {subscribe, disconnect, getAllData, getLastData}\nexport const connectDevice = ({\n  _id,\n  name,\n  kind,\n  deviceId = _id || `${kind}_${name}`,\n  url,\n  protocol = DEFAULT_PROTOCOL,\n  port = DEFAULT_PORT,\n  topic,\n  username,\n  password,\n}) => {\n  const clientPromise = new Promise(async (resolve, reject) => {\n    try {\n      const mqttClient = await connect(url, protocol, port, username, password);\n      const dbClient = DB(deviceId);\n\n      const _subscribe = (onSubscribe, onError) => {\n        const unsubscribe = subscribe(\n          mqttClient,\n          topic,\n          (payload) => {\n            dbClient.put({ _id: Date.now().toString(), ...payload });\n            onSubscribe(payload);\n          },\n          onError,\n        );\n        return unsubscribe;\n      };\n\n      const _disconnect = () => disconnect(mqttClient);\n\n      const getAllData = () =>\n        dbClient.getAll().then((res) => res.rows.map((i) => i.doc));\n\n      const getLastData = () =>\n        dbClient\n          .getAll({ descending: true, limit: 1 })\n          .then((res) => res.rows.map((i) => i.doc));\n\n      const getPageData = (skip, limit) =>\n        dbClient\n          .getAll({ descending: true, skip: skip, limit: limit })\n          .then((res) => res.rows.map((i) => i.doc));\n\n      const getAllDataCount = () =>\n        dbClient.getAll().then((res) => res.total_rows);\n\n      resolve({\n        subscribe: _subscribe,\n        disconnect: _disconnect,\n        getAllData,\n        getLastData,\n        getPageData,\n        getAllDataCount,\n      });\n    } catch (e) {\n      // connection error\n      reject(e);\n    }\n  });\n\n  return clientPromise;\n};\n\nexport const testDeviceConnection = ({\n  url,\n  protocol = DEFAULT_PROTOCOL,\n  port = DEFAULT_PORT,\n  topic,\n  username,\n  password,\n}) => {\n  const clientPromise = new Promise(async (resolve, reject) => {\n    try {\n      const mqttClient = await connect(url, protocol, port, username, password);\n      const unsubscribe = subscribe(\n        mqttClient,\n        topic,\n        (payload) => {\n          unsubscribe();\n          disconnect(mqttClient, () => resolve(payload));\n        },\n        reject,\n      );\n    } catch (e) {\n      // connection error\n      reject(e);\n    }\n  });\n\n  return clientPromise;\n};\n","import { useState } from 'react';\nimport {\n  Spinner,\n  SvgOutlineChevronRight,\n  SvgSolidCog,\n  SvgSolidTrash,\n} from '../../components/tailwind-ui';\n\nconst DevicesList = ({ data, onSelect, onEdit, onDelete }) => {\n  const [selectedElement, setSelectedElement] = useState();\n\n  const handleSelect = async (element, e) => {\n    // ignore click if another element is already selected (is loading)\n    if (!selectedElement) {\n      setSelectedElement(element);\n      const callback = () => setSelectedElement(null);\n      onSelect(element, e, callback);\n    }\n  };\n  return (\n    <div className=\"overflow-hidden bg-white shadow sm:rounded-md\">\n      {data.map((element) => (\n        <li\n          key={element.kind + element.name}\n          className=\"block transition duration-150 ease-in-out hover:bg-gray-50 focus:outline-none focus:bg-gray-50 cursor-pointer\"\n          onClick={(e) => handleSelect(element, e)}\n        >\n          <div className=\"relative flex items-center px-4 py-4 sm:px-6\">\n            {selectedElement === element && ( // if element is selected, display spinner\n              <div className=\"absolute top-0 left-0 w-full h-full opacity-30 bg-neutral-300\">\n                <div className=\"w-full h-full flex justify-center items-center\">\n                  <Spinner className=\"w-8 h-8 text-primary-800\" />\n                </div>\n              </div>\n            )}\n            <div className=\"flex items-center flex-1 min-w-0\">\n              <div className=\"flex-1 min-w-0 px-4 sm:grid sm:grid-col-2 sm:gap-4\">\n                <p className=\"col-span-2 text-lg font-semibold truncate text-primary-700\">\n                  {element.name}\n                </p>\n                <div className=\"flex flex-col text-xs font-italic text-neutral-600\">\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">Device kind : </span>\n                    {element.kind}\n                  </p>\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">URL : </span>\n                    {`${element.protocol}://${element.url}:${element.port}`}\n                  </p>\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">Topic : </span>\n                    {element.topic}\n                  </p>\n                </div>\n                <div className=\"pt-2 sm:pt-0 flex justify-end items-center cursor-default\">\n                  <button\n                    className=\"mx-1 p-2 border rounded shadow-sm bg-neutral-100 focus:outline-none active:bg-neutral-200\"\n                    onClick={(e) => onEdit(element, e)}\n                  >\n                    <SvgSolidCog className=\"text-gray-700\" />\n                  </button>\n                  <button\n                    className=\"mx-1 p-2 border rounded shadow-sm bg-neutral-100 focus:outline-none active:bg-neutral-200\"\n                    onClick={(e) => onDelete(element, e)}\n                  >\n                    <SvgSolidTrash className=\"text-gray-700\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div>\n              <SvgOutlineChevronRight className=\"w-5 h-5 text-neutral-400\" />\n            </div>\n          </div>\n          <div className=\"w-full border-t border-neutral-100\" />\n        </li>\n      ))}\n    </div>\n  );\n};\n\nexport default DevicesList;\n","import { useRef, useState, useEffect } from 'react';\nimport * as Yup from 'yup';\nimport { isEmpty } from 'lodash';\nimport {\n  Form,\n  InputField,\n  Modal,\n  SvgOutlinePlus,\n  FormError,\n  SubmitButton,\n  SvgOutlineUser,\n  SvgOutlineKey,\n  SvgOutlineLink,\n  SvgOutlineX,\n  SelectField,\n  Spinner,\n  SvgOutlineCheck,\n} from '../../components/tailwind-ui';\n\nimport { testDeviceConnection } from '../../services/broadCastDeviceService';\nimport {\n  DEFAULT_PORT,\n  DEFAULT_PROTOCOL,\n  DEVICE_KINDS,\n  DEVICE_PROTOCOLS,\n  DEVICE_TYPE,\n} from '../../services/devicesOptions';\n\n//\n// Pre-defined Vars\nconst protocolOptions = DEVICE_PROTOCOLS.map((val) => {\n  return { label: val.toUpperCase(), value: val };\n});\nconst kindOptions = DEVICE_KINDS.map((option) => {\n  return { ...option, label: option.name, value: option.kind };\n});\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .max(50, 'Name too Long!')\n    .matches(\n      /^[A-z0-9_-]*$/,\n      'Field supports only : letters / numbers / _ / - ',\n    )\n    .required('Required'),\n  url: Yup.string().required('Required'),\n  port: Yup.number().positive().integer(),\n  protocol: Yup.string(),\n  kind: Yup.string().required('Required'),\n  topic: Yup.string().required('Required'),\n  username: Yup.string().required('Required'),\n});\n//\n\nconst DeviceModal = ({ isOpen, onClose, onSave, onUpdate, initialValues }) => {\n  const updateMode = !isEmpty(initialValues); // if initialValues defined : updates the recode; else: add the record\n  const [footerMessage, setFooterMessage] = useState(<div />);\n  const formRef = useRef(null); // Ref the Form\n\n  const _initialValues = {\n    name: 'Computer',\n    url: 'mqtt.hackuarium.org',\n    protocol: protocolOptions.filter((v) => v.value === DEFAULT_PROTOCOL)[0]\n      .value,\n    port: DEFAULT_PORT,\n    kind: kindOptions[0].value,\n    topic: 'lpatiny/Computer/server',\n    username: 'testUser',\n    password: 'word',\n    ...initialValues,\n  };\n\n  useEffect(() => {\n    // clear footer when modal is closed\n    !isOpen && setTimeout(() => setFooterMessage(<div />), 500);\n  }, [isOpen]);\n\n  // events functions\n  const onSubmit = async (values) => {\n    try {\n      //await addDevice(values);\n      updateMode\n        ? await onUpdate(values)\n        : await onSave(DEVICE_TYPE.broadcast, values);\n      onClose();\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  const testConnection = (e) => {\n    e.stopPropagation();\n    renderFooterMessage('connecting', 'Connecting ...');\n    setTimeout(() => {\n      testDeviceConnection(formRef.current.values)\n        .then(() => {\n          renderFooterMessage('success', 'Connected');\n        })\n        .catch((err) => {\n          renderFooterMessage('error', `Connection Error: ${err.message}`);\n        });\n    }, 500);\n  };\n\n  // helper function for testConnection event\n  const renderFooterMessage = (state, message) => {\n    switch (state) {\n      case 'connecting':\n        setFooterMessage(\n          <div className=\"mx-6 flex flex-row items-center text-sm text-left text-neutral-500\">\n            <Spinner className=\"w-6 h-6 mr-2\" />\n            <span>{message}</span>\n          </div>,\n        );\n        break;\n\n      case 'success':\n        setFooterMessage(\n          <div className=\"mx-4 flex flex-row items-center text-sm text-left text-success-500\">\n            <SvgOutlineCheck className=\"h-6 w-6 mr-4\" />\n            <span>{message}</span>\n          </div>,\n        );\n        break;\n\n      case 'error':\n        setFooterMessage(\n          <div className=\"mx-4 flex flex-row items-center text-sm text-left text-danger-500\">\n            <SvgOutlineX className=\"h-6 w-6 mr-4\" />\n            <span>{message}</span>\n          </div>,\n        );\n        break;\n\n      default:\n        setFooterMessage(<div />);\n        break;\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={onClose}\n      icon={<SvgOutlinePlus />}\n      iconColor=\"neutral\"\n      animated\n      hasCloseButton\n      requestCloseOnBackdrop\n      requestCloseOnEsc\n      fluid\n      wrapperComponent={Form}\n      wrapperProps={{\n        innerRef: formRef,\n        initialValues: _initialValues,\n        validationSchema,\n        onSubmit: onSubmit,\n        className: 'h-full',\n      }}\n    >\n      <Modal.Header>Connect New Device</Modal.Header>\n      <Modal.Body>\n        <div className=\"p-2 mt-2\">\n          <InputField\n            name=\"name\"\n            id=\"name\"\n            label=\"Custom name\"\n            placeholder=\"Device name\"\n            disabled={updateMode}\n            required\n            className=\"w-full\"\n            inputClassName=\"w-full\"\n          ></InputField>\n          <div className=\"flex flex-col sm:flex-row sm:justify-between mt-4 sm:mt-0 border-t border-neutral sm:border-0\">\n            <InputField\n              name=\"url\"\n              id=\"url\"\n              label=\"URL\"\n              placeholder=\"mqtt.domain.com\"\n              required\n              leadingInlineAddon={<SvgOutlineLink />}\n              className=\"mt-4 sm:mr-4 w-full sm:w-1/2\"\n              inputClassName=\"w-full\"\n            ></InputField>\n            <div className=\"flex flex-row justify-between items-start flex-1\">\n              <SelectField\n                name=\"protocol\"\n                id=\"protocol\"\n                label=\"Protocol\"\n                options={protocolOptions}\n                renderOption={(o) => `${o.label}`}\n                getValue={(o) => o.value}\n                className=\"mt-4 mr-4 w-1/2\"\n                inputClassName=\"w-full\"\n              ></SelectField>\n              <InputField\n                name=\"port\"\n                id=\"port\"\n                label=\"Port\"\n                className=\"mt-4 flex-1\"\n                inputClassName=\"w-full\"\n              ></InputField>\n            </div>\n          </div>\n          <div className=\"flex flex-row justify-between items-start\">\n            <SelectField\n              name=\"kind\"\n              id=\"kind\"\n              label=\"Device kind\"\n              options={kindOptions}\n              renderOption={(o) => `${o.label}`}\n              getValue={(o) => o.value}\n              required\n              className=\"mt-4 mr-4 w-1/2 \"\n              inputClassName=\"w-full bg-gray-500\"\n            ></SelectField>\n            <InputField\n              name=\"topic\"\n              id=\"topic\"\n              label=\"Topic\"\n              required\n              className=\"mt-4 flex-1\"\n              inputClassName=\"w-full\"\n            ></InputField>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row sm:justify-between mt-4 sm:mt-0 border-t border-neutral sm:border-0\">\n            <InputField\n              name=\"username\"\n              id=\"username\"\n              label=\"Username\"\n              placeholder=\"Username\"\n              required\n              leadingInlineAddon={<SvgOutlineUser />}\n              className=\"mt-4 w-full sm:mr-4 sm:w-1/2\"\n              inputClassName=\"w-full\"\n            ></InputField>\n            <InputField\n              name=\"password\"\n              id=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              placeholder=\"********\"\n              required\n              leadingInlineAddon={<SvgOutlineKey />}\n              className=\"mt-4 w-full sm:flex-1\"\n              inputClassName=\"w-full\"\n            ></InputField>\n          </div>\n        </div>\n        <FormError />\n      </Modal.Body>\n      <Modal.Footer>\n        <div className=\"flex flex-col sm:flex-row items-center\">\n          {footerMessage}\n          <button\n            onClick={testConnection}\n            type=\"button\"\n            className=\"w-full sm:w-max mt-2 sm:my-0 px-4 py-2 sm:mr-4 text-sm font-semibold text-neutral-700 border rounded-md shadow bg-neutral-200 focus:outline-none flex-1 sm:flex-none\"\n          >\n            Test connection\n          </button>\n          <SubmitButton className=\"w-full my-2 sm:my-0 sm:w-max \">\n            {updateMode ? 'Update' : 'Add'}\n          </SubmitButton>\n        </div>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default DeviceModal;\n","import { useState, useEffect } from 'react';\n\nimport { Button } from '../../components/tailwind-ui';\nimport { testDeviceConnection } from '../../services/broadCastDeviceService';\nimport {\n  addDevice,\n  updateDevice,\n  deleteDevice,\n  getDevices,\n} from '../../services/devicesService';\nimport useNotification from '../../hooks/useNotification';\nimport DevicesList from './DevicesList';\nimport DeviceModal from './DeviceModal';\nimport { DEVICE_TYPE } from '../../services/devicesOptions';\n\nconst BroadcastDevices = ({ history, match }) => {\n  const [render, setRender] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [devicesList, setDevicesList] = useState([]);\n  const [onEditValues, setOnEditValues] = useState({});\n  const { addErrorNotification } = useNotification();\n\n  useEffect(() => {\n    // get saved devices from DB\n    getDevices(DEVICE_TYPE.broadcast).then((list) => setDevicesList(list));\n  }, [render]);\n\n  const onOpenModal = () => {\n    setOnEditValues({});\n    setIsModalOpen(true);\n  };\n\n  const onCloseModal = () => {\n    setRender(!render); // refresh devices list\n    setIsModalOpen(false); // close modal\n  };\n\n  const onSelectItem = (device, e, callback) => {\n    setTimeout(async () => {\n      testDeviceConnection(device)\n        .then(() => {\n          callback();\n          history.push(match.url + '/' + device._id);\n        })\n        .catch((err) => {\n          addErrorNotification(e.name, e.message);\n          callback();\n        });\n    }, 500);\n  };\n\n  const onEditItem = (device, e) => {\n    e.stopPropagation();\n    setOnEditValues(device);\n    setIsModalOpen(true);\n  };\n\n  const onDeleteItem = (device, e) => {\n    e.stopPropagation();\n    deleteDevice(device._id)\n      .then(() => setRender(!render))\n      .catch((e) => addErrorNotification(e.name, e.message));\n  };\n\n  return (\n    <div className=\"p-8\">\n      <h2 className=\"text-3xl font-semibold mb-10\">Broadcast devices</h2>\n      <div className=\"w-full flex justify-end mb-4\">\n        <Button onClick={onOpenModal}>Add device</Button>\n      </div>\n      <div>\n        <div className=\"w-full my-2 flex flex-row items-center \">\n          <h3 className=\"w-max ml-2 mr-4 text-neutral-600 text-sm whitespace-nowrap \">\n            Available devices\n          </h3>\n          <div className=\"w-full border-t border-neutral-300\" />\n        </div>\n        <DevicesList\n          data={devicesList}\n          onSelect={onSelectItem}\n          onEdit={onEditItem}\n          onDelete={onDeleteItem}\n        />\n      </div>\n\n      <DeviceModal\n        isOpen={isModalOpen}\n        onClose={onCloseModal}\n        initialValues={onEditValues}\n        onSave={addDevice}\n        onUpdate={updateDevice}\n      ></DeviceModal>\n    </div>\n  );\n};\n\nexport default BroadcastDevices;\n"],"sourceRoot":""}