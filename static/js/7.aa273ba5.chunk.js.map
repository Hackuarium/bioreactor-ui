{"version":3,"sources":["services/db.js","services/mqttService.js","services/deviceService.js","pages/DeviceDetails.jsx","services/devicesOptions.js"],"names":["DB","client","_db","_dbInfo","connect","dbName","db_name","PouchDB","info","then","res","console","log","getInfo","put","doc","Promise","reject","Error","get","docId","getAll","options","a","allDocs","include_docs","docs","rows","getAllCount","total_rows","update","_id","_rev","remove","removeAll","destroy","JSON","stringify","close","callback","isFunction","url","protocol","port","username","password","resolve","DEFAULT_PROTOCOL","DEFAULT_PORT","onSuccess","onError","connected","hostname","brokerUrl","mqtt","keepalive","reconnectPeriod","on","stream","err","error","name","end","getClientInstance","subscribe","topic","onMessageReceived","qos","payload","data","parseCurrentSettings","toString","unsubscribe","getSavedDevices","dbClient","db","DEVICES_DB","list","map","item","getDevice","deviceId","device","updateDevice","deviceData","deleteDevice","deviceID","catch","e","message","addDevice","props","kind","key","id","r","exist","inserted","connectDevice","mqttClient","onSubscribe","Date","now","disconnect","getAllData","getLastData","descending","limit","getPageDate","skip","getAllDataCount","DeviceDetails","match","useState","currentPage","setCurrentPage","count","setCount","setData","previousData","setPreviousData","deviceClient","setDeviceClient","params","useEffect","deviceInfo","result","class","parameters","A","B","Header","Tr","value","C","D","E","F","G","H","I","J","K","L","M","N","O","pagination","itemsPerPage","onPageChange","page","totalCount","withText","DEVICE_PROTOCOLS","DEVICE_KINDS","Object","keys","legoinoDeviceInformation","COMMANDS","compactSettings","reset","sleep","setParameter","label"],"mappings":"uXAwFeA,IClFXC,EDkFWD,EAnFf,WACE,IAAIE,EAAM,KACNC,EAAU,GA8Ed,MAAO,CAAEC,QA5EO,SAACC,KACVH,GAAQC,GAAWA,EAAQG,UAAYD,MAC1CH,EAAM,IAAIK,IAAQF,IACdG,OAAOC,MAAK,SAACC,GAAD,OAAUP,EAAUO,KACpCC,QAAQC,IAAR,2BAAgCP,EAAhC,OA4DF,MAAO,CACLQ,QAxDc,kBAAMV,GAyDpBW,IAvDU,SAACC,GACX,MAAM,QAASA,EAERb,EAAIY,IAAIC,GADNC,QAAQC,OAAO,IAAIC,MAAM,0BAsDlCC,IAlDU,SAACC,GAAD,OAAWlB,EAAIiB,IAAIC,IAmD7BC,OAjDU,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACMrB,EAAIsB,QAAJ,aACjBC,cAAc,GACXH,IAHQ,cACPI,EADO,yBAONA,EAAKC,MAPC,2CAAH,sDAkDVC,YAxCe,uCAAG,WAAON,GAAP,eAAAC,EAAA,sEACCrB,EAAIsB,QAAJ,aACjBC,cAAc,GACXH,IAHa,cACZI,EADY,yBAKXA,EAAKG,YALM,2CAAH,sDAyCfC,OAjCa,SAACf,GACd,MAAM,QAASA,EAERb,EACJiB,IAAIJ,EAAIgB,KACRtB,MAAK,SAACC,GAAD,OAASR,EAAIY,IAAJ,2BAAaC,GAAb,IAAkBiB,KAAMtB,EAAIsB,WAHpChB,QAAQC,OAAO,IAAIC,MAAM,0BAgClCe,OA1Ba,SAACb,GACd,OAAOlB,EACJiB,IAAIC,GACJX,MAAK,SAACC,GAAD,OAASR,EAAI+B,OAAO,CAAEF,IAAKX,EAAOY,KAAMtB,EAAIsB,WAwBpDE,UArBgB,kBAChBhC,EAAIiC,UAAU1B,MAAK,SAACC,GAClBR,EAAM,KACNS,QAAQC,IAAI,cAAOP,EAAP,kBAAgC+B,KAAKC,UAAU3B,QAmB7D4B,MAhBY,SAACC,GAAD,OACZrC,EAAIoC,OAAM,WACRpC,EAAM,KACNS,QAAQC,IAAR,cAAmBP,EAAnB,aACAmC,qBAAWD,IAAaA,WAkBjBvC,G,mCCzCFI,EAAU,SAACqC,EAAKC,EAAUC,EAAMC,EAAUC,GAYrD,OAXsB,IAAI7B,SAAQ,SAAC8B,EAAS7B,IAxCpB,SACxBwB,GAOI,IANJC,EAMG,uDANQK,IACXJ,EAKG,uDALIK,IAGPC,EAEG,uCADHC,EACG,uCAECjD,GAAUA,EAAOkD,WAAalD,EAAOqB,QAAQ8B,WAAaX,GAC5DD,qBAAWS,IAAcA,EAAUhD,GAErC,IAAMoD,EAAS,UAAMX,EAAN,cAAoBD,EAApB,YAA2BE,IAC1C1C,EAASqD,IAAKlD,QAAQiD,EAAW,CAC/BE,UAAW,IACXC,gBAAiB,OAGZC,GAAG,WAAW,WACnB9C,QAAQC,IAAR,uBAA4ByC,EAA5B,cAA2CpD,EAAOkD,YAClDX,qBAAWS,IAAcA,EAAUhD,MAGrCA,EAAOyD,OAAOD,GAAG,SAAS,SAACE,GACzBhD,QAAQC,IAAI+C,GACZ,IAAMC,EAAQ,IAAI1C,MAAJ,uCAAyCmC,EAAzC,MACdO,EAAMC,KAAO,aACb5D,EAAO6D,MACPtB,qBAAWU,IAAYA,EAAQU,MAY/BG,CACEtB,EACAC,EACAC,EACAC,EACAC,GACA,SAAC5C,GAAD,OAAY6C,EAAQ7C,MACpB,SAAC2D,GAAD,OAAW3C,EAAO2C,UAQXI,EAAY,SAAC/D,EAAQgE,EAAOC,EAAmBhB,GAC1DjD,EAAO+D,UAAUC,EAAO,CAAEE,IAAK,IAAK,SAACR,GACnCA,EACInB,qBAAWU,IAAYA,EAAQS,GAC/B1D,EAAOwD,GAAG,WAAW,SAACQ,EAAOG,GA3BjB,IAACC,EA4BX7B,qBAAW0B,IACTA,GA7BSG,EA6BqBD,EA5BjCE,+BAAqBD,EAAKE,WAAY,YAkC7C,OAFoB,SAACrB,GAAD,OAAajD,EAAOuE,YAAYP,EAAO,GAAIf,KCnEpDuB,EAAe,uCAAG,8BAAAlD,EAAA,6DACvBmD,EAAWC,EAAGvE,QAAQwE,KADC,SAEVF,EAASrD,SAFC,cAEvBwD,EAFuB,yBAGtBA,EAAKC,KAAI,SAACC,GAAD,OAAUA,EAAKhE,QAHF,2CAAH,qDAMfiE,EAAS,uCAAG,WAAOC,GAAP,iBAAA1D,EAAA,6DACjBmD,EAAWC,EAAGvE,QAAQwE,KADL,SAEFF,EAASvD,IAAI8D,GAFX,cAEjBC,EAFiB,yBAGhBA,GAHgB,2CAAH,sDAMTC,EAAY,uCAAG,WAAOC,GAAP,eAAA7D,EAAA,6DACpBmD,EAAWC,EAAGvE,QAAQwE,KADF,kBAEnBF,EAAS5C,OAAOsD,IAFG,2CAAH,sDAKZC,EAAe,SAACC,GAE3B,OADiBX,EAAGvE,QAAQwE,KACZ3C,OAAOqD,GAAUC,OAAM,SAACC,GACtC,IAAM7B,EAAM,IAAIzC,MAAJ,kCAAqCsE,EAAEC,UAEnD,MADA9B,EAAIE,KAAO,iBACLF,MAKG+B,EAAY,SAACC,GACxB,IAAMjB,EAAWC,EAAGvE,QAAQwE,KACpBgB,EAA+DD,EAA/DC,KAAM/B,EAAyD8B,EAAzD9B,KAAMpB,EAAmDkD,EAAnDlD,IAAKC,EAA8CiD,EAA9CjD,SAAUC,EAAoCgD,EAApChD,KAAMsB,EAA8B0B,EAA9B1B,MAAOrB,EAAuB+C,EAAvB/C,SAAUC,EAAa8C,EAAb9C,SAG1D,IAAK,IAAIgD,KAAOF,EACd,IAAKA,EAAME,GAAM,MAAM,IAAI3E,MAAJ,yBAA4B2E,EAA5B,MAEzB,IAAMC,EAAE,UAAMF,EAAN,YAAc/B,GAEtB,OAAOa,EACJvD,IAAI2E,GACJrF,MAAK,SAACsF,GAEL,IAAMpC,EAAM,IAAIzC,MAAM,4CAEtB,MADAyC,EAAIS,QAAU,CAAE4B,OAAO,EAAM5B,QAAS2B,GAChCpC,KAEP4B,OAAM,SAACC,GAEN,GAAIA,EAAEpB,SAAWoB,EAAEpB,QAAQ4B,MAAO,MAAMR,EAExC,OAAOd,EACJ5D,IAAI,CACHiB,IAAK+D,EACLjC,OACApB,MACAC,WACAC,OACAsB,QACA2B,OACAhD,WACAC,aAEDpC,MAAK,SAACsF,GAEL,MAAO,CAAEC,OAAO,EAAOC,UAAU,EAAM7B,QAAS2B,MAEjDR,OAAM,SAACC,GAEN,IAAM7B,EAAM,IAAIzC,MAAMsE,EAAEjB,YAMxB,MALAZ,EAAIS,QAAU,CACZ4B,OAAO,EACPC,UAAU,EACV7B,QAASoB,EAAEjB,YAEPZ,SAQHuC,EAAgB,SAAC,GAWvB,IAVLnE,EAUI,EAVJA,IACA8B,EASI,EATJA,KACA+B,EAQI,EARJA,KAQI,IAPJX,gBAOI,MAPOlD,GAAG,UAAO6D,EAAP,YAAe/B,GAOzB,EANJpB,EAMI,EANJA,IACAC,EAKI,EALJA,SACAC,EAII,EAJJA,KACAsB,EAGI,EAHJA,MACArB,EAEI,EAFJA,SACAC,EACI,EADJA,SAsCA,OApCsB,IAAI7B,QAAJ,uCAAY,WAAO8B,EAAS7B,GAAhB,iBAAAM,EAAA,+EAELnB,EAAQqC,EAAKC,EAAUC,EAAMC,EAAUC,GAFlC,OAExBsD,EAFwB,OAGxBzB,EAAWC,EAAGvE,QAAQ6E,GAmB5BnC,EAAQ,CACNkB,UAnBiB,SAACoC,EAAalD,GAU/B,OAToBc,EAClBmC,EACAlC,GACA,SAACG,GACCM,EAAS5D,IAAT,aAAeiB,IAAKsE,KAAKC,MAAM/B,YAAeH,IAC9C5B,qBAAW4D,IAAgBA,EAAYhC,KAEzClB,IAYFqD,WAPkB,kBDtCShE,ECsCoB,kBAAMmC,EAASpC,UDtC3CrC,ECsCgBkG,GDrClCrC,KAAI,WACTnD,QAAQC,IAAR,uBAA4BX,EAAOqB,QAAQ8B,SAA3C,mBACAZ,qBAAWD,IAAaA,OAHF,IAACtC,EAAQsC,GC8C3BiE,WAPiB,kBAAM9B,EAASrD,UAQhCoF,YAPkB,kBAAM/B,EAASrD,OAAO,CAAEqF,YAAY,EAAMC,MAAO,KAQnEC,YAPkB,SAACC,EAAKF,GAAN,OAAejC,EAASrD,OAAO,CAAEqF,YAAY,EAAKG,KAAKA,EAAMF,MAAOA,KAQtFG,gBAPsB,kBAAIpC,EAAS9C,iBArBP,kDAgC9BX,EAAO,EAAD,IAhCwB,0DAAZ,2D,sOC8FT8F,UA9LO,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACGC,mBAAS,GADZ,mBAC5BC,EAD4B,KACfC,EADe,OAETF,mBAAS,GAFA,mBAE5BG,EAF4B,KAErBC,EAFqB,OAGXJ,mBAAS,IAHE,mBAG5B5C,EAH4B,KAGtBiD,EAHsB,OAIKL,mBAAS,IAJd,mBAI5BM,EAJ4B,KAIdC,EAJc,OAKKP,qBALL,mBAK5BQ,EAL4B,KAKdC,EALc,KAM7BzC,EAAQ,UAAM+B,EAAMW,OAAO7B,IA0CjC,OAzCA8B,qBAAU,WACJ3C,GACFD,YAAUC,GAAUxE,MAAK,SAACoH,GAExB3B,YAAc2B,GAAYpH,MAAK,SAACgH,GAAD,OAC7BC,EAAgBD,YAMxBG,qBAAU,WACJH,IAEFA,EAAaX,kBAAkBrG,MAAK,SAACqH,GACnCnH,QAAQC,IAAIkH,GACZT,EAASS,MAEXL,EAAazD,WACX,SAACyB,GAAD,OAAa6B,EAAQ,CAAC7B,GAAF,mBAAcpB,QAClC,SAACT,GAAD,OAAWjD,QAAQC,IAAIgD,MAEzBjD,QAAQC,IAAIyD,GACZoD,EAAab,YAA0B,GAAdM,EAAkB,IAAIzG,MAAK,SAACqH,GACnDnH,QAAQC,IAAIkH,GACZN,EAAgBM,SAInB,CAACL,IAEJG,qBAAU,WACJH,GACFA,EAAab,YAA0B,GAAdM,EAAkB,IAAIzG,MAAK,SAACqH,GACnDnH,QAAQC,IAAIkH,GACZN,EAAgBM,QAInB,CAACZ,IAGF,sBAAKa,MAAM,OAAX,UACE,sBAAKA,MAAM,wCAAX,UACE,sBAAKA,MAAM,eAAX,UACE,oBAAIA,MAAM,YAAV,4BACA,mBAAGA,MAAM,wBAAT,+CAEF,gCACE,sBAAKA,MAAM,8EAAX,UACE,mBAAGA,MAAM,gBAAT,6BACA,4BAAI1D,GAAQA,EAAK,GAAKA,EAAK,GAAG2D,WAAWC,EAAU,QAErD,sBAAKF,MAAM,8EAAX,UACE,mBAAGA,MAAM,gBAAT,yBACA,4BAAI1D,GAAQA,EAAK,GAAKA,EAAK,GAAG2D,WAAWE,EAAU,cAKzD,sBAAKH,MAAM,uCAAX,UACE,sBAAKA,MAAM,OAAX,UACE,oBAAIA,MAAM,YAAV,8BACA,mBAAGA,MAAM,wBAAT,gDAEF,cAAC,IAAD,CACEA,MAAM,wBACNI,OAAQ,kBACN,qBAAIJ,MAAM,iBAAV,UACE,oBAAIA,MAAM,YAAV,SACE,sBAAMA,MAAM,gBAAZ,wBAEF,oBAAIA,MAAM,YAAV,SACE,sBAAMA,MAAM,gBAAZ,wBAEF,oBAAIA,MAAM,YAAV,SACE,sBAAMA,MAAM,gBAAZ,yBAEF,oBAAIA,MAAM,YAAV,SACE,sBAAMA,MAAM,gBAAZ,uBAEF,oBAAIA,MAAM,YAAV,SACE,sBAAMA,MAAM,gBAAZ,wBAEF,oBAAIA,MAAM,YAAV,SACE,sBAAMA,MAAM,gBAAZ,yBAEF,oBAAIA,MAAM,YAAV,SACE,sBAAMA,MAAM,gBAAZ,yBAEF,oBAAIA,MAAM,YAAV,SACE,sBAAMA,MAAM,gBAAZ,oBAEF,oBAAIA,MAAM,YAAV,SACE,sBAAMA,MAAM,gBAAZ,sBAEF,oBAAIA,MAAM,YAAV,SACE,sBAAMA,MAAM,gBAAZ,wBAEF,oBAAIA,MAAM,YAAV,SACE,sBAAMA,MAAM,gBAAZ,sBAEF,oBAAIA,MAAM,YAAV,SACE,sBAAMA,MAAM,gBAAZ,sBAEF,oBAAIA,MAAM,YAAV,SACE,sBAAMA,MAAM,gBAAZ,qBAEF,oBAAIA,MAAM,YAAV,SACE,sBAAMA,MAAM,gBAAZ,sBAEF,oBAAIA,MAAM,YAAV,SACE,sBAAMA,MAAM,gBAAZ,0BAINK,GAAI,gBAAGC,EAAH,EAAGA,MAAH,OACFA,GAASA,EAAMtH,IAAIiH,WACjB,qBAAID,MAAM,oCAAV,UACE,oBAAIA,MAAM,YAAV,SACE,+BAAOM,EAAMtH,IAAIiH,WAAWC,MAE9B,oBAAIF,MAAM,YAAV,SACE,+BAAOM,EAAMtH,IAAIiH,WAAWE,MAE9B,oBAAIH,MAAM,YAAV,SACE,+BAAOM,EAAMtH,IAAIiH,WAAWM,MAE9B,oBAAIP,MAAM,YAAV,SACE,+BAAOM,EAAMtH,IAAIiH,WAAWO,MAE9B,oBAAIR,MAAM,YAAV,SACE,+BAAOM,EAAMtH,IAAIiH,WAAWQ,MAE9B,oBAAIT,MAAM,YAAV,SACE,+BAAOM,EAAMtH,IAAIiH,WAAWS,MAE9B,oBAAIV,MAAM,YAAV,SACE,+BAAOM,EAAMtH,IAAIiH,WAAWU,MAE9B,oBAAIX,MAAM,YAAV,SACE,+BAAOM,EAAMtH,IAAIiH,WAAWW,MAE9B,oBAAIZ,MAAM,YAAV,SACE,+BAAOM,EAAMtH,IAAIiH,WAAWY,MAE9B,oBAAIb,MAAM,YAAV,SACE,+BAAOM,EAAMtH,IAAIiH,WAAWa,MAE9B,oBAAId,MAAM,YAAV,SACE,+BAAOM,EAAMtH,IAAIiH,WAAWc,MAE9B,oBAAIf,MAAM,YAAV,SACE,+BAAOM,EAAMtH,IAAIiH,WAAWe,MAE9B,oBAAIhB,MAAM,YAAV,SACE,+BAAOM,EAAMtH,IAAIiH,WAAWgB,MAE9B,oBAAIjB,MAAM,YAAV,SACE,+BAAOM,EAAMtH,IAAIiH,WAAWiB,MAE9B,oBAAIlB,MAAM,YAAV,SACE,+BAAOM,EAAMtH,IAAIiH,WAAWkB,SAG9B,MAEN7E,KAAMkD,EACN4B,WAAY,CACVC,aAAc,GACdC,aAAc,SAACC,GACbnC,EAAemC,IAEjBA,KAAMpC,EACNqC,WAAYnC,EACZoC,UAAU,a,gCC1LtB,kOAIa5E,EAAa,qBACb5B,EAAe,OACfD,EAAmB,MAUnB0G,EAAmB,CAAC,MAAO,QAE3BC,EAAeC,OAAOC,KAAKC,KAA0B/E,KAChE,SAACe,GAAD,OAASgE,IAAyBhE,GAAKD,QAW5BkE,EAAW,CACtBC,gBAAiB,KACjBC,MAAO,SACPC,MAAO,IACPC,aAAc,SAACC,EAAO9B,GAAR,gBAAqB8B,GAArB,OAA6B9B","file":"static/js/7.aa273ba5.chunk.js","sourcesContent":["import PouchDB from 'pouchdb';\nimport { isFunction } from 'lodash';\n\n// Wrap Db interface in case of switching to another Db other than \"PouchDb\"\n\nfunction DB() {\n  let _db = null;\n  let _dbInfo = {};\n\n  const connect = (dbName) => {\n    if (!_db || (_dbInfo && _dbInfo.db_name !== dbName)) {\n      _db = new PouchDB(dbName);\n      _db.info().then((res) => (_dbInfo = res));\n      console.log(`connected to DB \"${dbName}\"`);\n    }\n\n    // DB operations to return\n\n    const getInfo = () => _dbInfo;\n\n    const put = (doc) => {\n      if (!('_id' in doc))\n        return Promise.reject(new Error('doc must include _id'));\n      return _db.put(doc);\n    };\n\n    const get = (docId) => _db.get(docId)\n\n    const getAll = async (options) => {\n      const docs = await _db.allDocs({\n        include_docs: true,\n        ...options,\n      });\n      //console.log(`get ${docs.total_rows} rows`);\n      //console.log(docs.rows);\n      return docs.rows;\n    };\n\n    const getAllCount = async (options) => {\n      const docs = await _db.allDocs({\n        include_docs: true,\n        ...options,\n      });\n      return docs.total_rows;\n    };\n\n    const update = (doc) => {\n      if (!('_id' in doc))\n        return Promise.reject(new Error('doc must include _id'));\n      return _db\n        .get(doc._id)\n        .then((res) => _db.put({ ...doc, _rev: res._rev }));\n    };\n\n    const remove = (docId) => {\n      return _db\n        .get(docId)\n        .then((res) => _db.remove({ _id: docId, _rev: res._rev }));\n    };\n\n    const removeAll = () =>\n      _db.destroy().then((res) => {\n        _db = null;\n        console.log(`DB \"${dbName}\" destroyed : ` + JSON.stringify(res));\n      });\n\n    const close = (callback) =>\n      _db.close(() => {\n        _db = null;\n        console.log(`DB \"${dbName}\" closed`);\n        isFunction(callback) && callback();\n      });\n\n    return {\n      getInfo,\n      put,\n      get,\n      getAll,\n      getAllCount,\n      update,\n      remove,\n      removeAll,\n      close,\n    };\n  };\n  return { connect };\n}\n\nexport default DB();\n","import mqtt from 'mqtt';\nimport { isFunction } from 'lodash';\nimport { parseCurrentSettings } from 'legoino-util';\nimport { DEFAULT_PORT, DEFAULT_PROTOCOL } from './devicesOptions';\n\n// Private Functions\nlet client;\n\nconst getClientInstance = (\n  url,\n  protocol = DEFAULT_PROTOCOL,\n  port = DEFAULT_PORT,\n  username,\n  password,\n  onSuccess,\n  onError,\n) => {\n  // if client is already connected\n  if (client && client.connected && client.options.hostname === url)\n    isFunction(onSuccess) && onSuccess(client);\n\n  const brokerUrl = `${protocol}://${url}:${port}`;\n  client = mqtt.connect(brokerUrl, {\n    keepalive: 300,\n    reconnectPeriod: 5000,\n  });\n\n  client.on('connect', () => {\n    console.log(`connected to ${brokerUrl} : ${client.connected}`);\n    isFunction(onSuccess) && onSuccess(client);\n  });\n\n  client.stream.on('error', (err) => {\n    console.log(err);\n    const error = new Error(`Couldn't connect to BROKER \"${brokerUrl}\"`);\n    error.name = 'Mqtt Error';\n    client.end();\n    isFunction(onError) && onError(error);\n  });\n};\n\nconst parseToJson = (data) => {\n  return parseCurrentSettings(data.toString(), {});\n};\n\n// Public Functions\n\nexport const connect = (url, protocol, port, username, password) => {\n  const clientPromise = new Promise((resolve, reject) => {\n    getClientInstance(\n      url,\n      protocol,\n      port,\n      username,\n      password,\n      (client) => resolve(client),\n      (error) => reject(error),\n    );\n  });\n  return clientPromise;\n};\n\n// TO DO: update function\n\nexport const subscribe = (client, topic, onMessageReceived, onError) => {\n  client.subscribe(topic, { qos: 2 }, (err) => {\n    err\n      ? isFunction(onError) && onError(err)\n      : client.on('message', (topic, payload) => {\n          isFunction(onMessageReceived) &&\n            onMessageReceived(parseToJson(payload));\n        });\n  });\n\n  const unsubscribe = (onError) => client.unsubscribe(topic, {}, onError);\n\n  return unsubscribe;\n};\n\nexport const disconnect = (client, callback) =>\n  client.end(() => {\n    console.log(`mqtt broker \"${client.options.hostname}\" disconnected`);\n    isFunction(callback) && callback();\n  });\n","import db from './db';\nimport { isFunction } from 'lodash';\nimport { connect, subscribe, disconnect } from './mqttService';\nimport { DEVICES_DB } from './devicesOptions';\n\n// Public Functions\n\nexport const getSavedDevices = async () => {\n  const dbClient = db.connect(DEVICES_DB);\n  const list = await dbClient.getAll();\n  return list.map((item) => item.doc);\n};\n\nexport const getDevice = async (deviceId) => {\n  const dbClient = db.connect(DEVICES_DB);\n  const device = await dbClient.get(deviceId);\n  return device;\n};\n\nexport const updateDevice = async (deviceData) => {\n  const dbClient = db.connect(DEVICES_DB);\n  return dbClient.update(deviceData);\n};\n\nexport const deleteDevice = (deviceID) => {\n  const dbClient = db.connect(DEVICES_DB);\n  return dbClient.remove(deviceID).catch((e) => {\n    const err = new Error(`Couldn't remove record: ${e.message}`);\n    err.name = 'Database Error';\n    throw err;\n  });\n};\n\n// add device to devices DB\nexport const addDevice = (props) => {\n  const dbClient = db.connect(DEVICES_DB);\n  const { kind, name, url, protocol, port, topic, username, password } = props;\n\n  // make sure all props are defined\n  for (let key in props)\n    if (!props[key]) throw new Error(`Field missing [${key}]`);\n\n  const id = `${kind}_${name}`;\n\n  return dbClient\n    .get(id)\n    .then((r) => {\n      // the device already exists in DB\n      const err = new Error('Another device exists with the same name');\n      err.payload = { exist: true, payload: r };\n      throw err;\n    })\n    .catch((e) => {\n      // if the device exists in DB\n      if (e.payload && e.payload.exist) throw e;\n      // the device does not exist in DB\n      return dbClient\n        .put({\n          _id: id,\n          name,\n          url,\n          protocol,\n          port,\n          topic,\n          kind,\n          username,\n          password,\n        })\n        .then((r) => {\n          // inserted successfully\n          return { exist: false, inserted: true, payload: r };\n        })\n        .catch((e) => {\n          // DB error\n          const err = new Error(e.toString());\n          err.payload = {\n            exist: false,\n            inserted: false,\n            payload: e.toString(),\n          };\n          throw err;\n        });\n    });\n};\n\n\n//\n// connect to broadcast device & return a client instance with {subscribe, disconnect, getAllData, getLastData}\nexport const connectDevice = ({\n  _id,\n  name,\n  kind,\n  deviceId = _id || `${kind}_${name}`,\n  url,\n  protocol,\n  port,\n  topic,\n  username,\n  password,\n}) => {\n  const clientPromise = new Promise(async (resolve, reject) => {\n    try {\n      const mqttClient = await connect(url, protocol, port, username, password);\n      const dbClient = db.connect(deviceId);\n      const _subscribe = (onSubscribe, onError) => {\n        const unsubscribe = subscribe(\n          mqttClient,\n          topic,\n          (payload) => {\n            dbClient.put({ _id: Date.now().toString(), ...payload });\n            isFunction(onSubscribe) && onSubscribe(payload);\n          },\n          onError,\n        );\n        return unsubscribe;\n      };\n\n      const _disconnect = () => disconnect(mqttClient, () => dbClient.close());\n      const getAllData = () => dbClient.getAll();\n      const getLastData = () => dbClient.getAll({ descending: true, limit: 1 });\n      const getPageDate = (skip,limit)=> dbClient.getAll({ descending: true,skip:skip ,limit: limit });\n      const getAllDataCount = ()=>dbClient.getAllCount();\n      resolve({\n        subscribe: _subscribe,\n        disconnect: _disconnect,\n        getAllData,\n        getLastData,\n        getPageDate,\n        getAllDataCount\n      });\n    } catch (e) {\n      // connection error\n      reject(e);\n    }\n  });\n\n  return clientPromise;\n};\n","import { connectDevice, getDevice } from '../services/deviceService';\nimport { useState, useEffect } from 'react';\nimport { Table } from '../components/tailwind-ui';\n\nconst DeviceDetails = ({ match }) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [count, setCount] = useState(0);\n  const [data, setData] = useState([]);\n  const [previousData, setPreviousData] = useState([]);\n  const [deviceClient, setDeviceClient] = useState();\n  const deviceId = `${match.params.id}`;\n  useEffect(() => {\n    if (deviceId) {\n      getDevice(deviceId).then((deviceInfo) => {\n        //console.log(deviceInfo);\n        connectDevice(deviceInfo).then((deviceClient) =>\n          setDeviceClient(deviceClient),\n        );\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (deviceClient) {\n      //getAllDataCount\n      deviceClient.getAllDataCount().then((result) => {\n        console.log(result);\n        setCount(result);\n      });\n      deviceClient.subscribe(\n        (message) => setData([message, ...data]),\n        (error) => console.log(error),\n      );\n      console.log(data);\n      deviceClient.getPageDate(currentPage * 10, 10).then((result) => {\n        console.log(result);\n        setPreviousData(result);\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [deviceClient]);\n\n  useEffect(() => {\n    if (deviceClient) {\n      deviceClient.getPageDate(currentPage * 10, 10).then((result) => {\n        console.log(result);\n        setPreviousData(result);\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentPage]);\n\n  return (\n    <div class=\"m-2 \">\n      <div class=\" bg-white w-full rounded-lg shadow-xl\">\n        <div class=\"p-4 border-b\">\n          <h2 class=\"text-2xl \">Device Details</h2>\n          <p class=\"text-sm text-gray-500\">Current details of the device.</p>\n        </div>\n        <div>\n          <div class=\"md:grid md:grid-cols-2 hover:bg-gray-50 md:space-y-0 space-y-1 p-4 border-b\">\n            <p class=\"text-gray-600\">CPU Temperature</p>\n            <p>{data ? (data[0] ? data[0].parameters.A : '') : ''}</p>\n          </div>\n          <div class=\"md:grid md:grid-cols-2 hover:bg-gray-50 md:space-y-0 space-y-1 p-4 border-b\">\n            <p class=\"text-gray-600\">Free Memory</p>\n            <p>{data ? (data[0] ? data[0].parameters.B : '') : ''}</p>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"  my-8   bg-white w-full rounded-lg \">\n        <div class=\"p-4 \">\n          <h2 class=\"text-2xl \">Previous Details</h2>\n          <p class=\"text-sm text-gray-500\">Previous details of the device.</p>\n        </div>\n        <Table\n          class=\"min-w-full table-auto\"\n          Header={() => (\n            <tr class=\"bg-primary-900\">\n              <th class=\"px-4 py-2\">\n                <span class=\"text-gray-300\">CPU Temp</span>\n              </th>\n              <th class=\"px-4 py-2\">\n                <span class=\"text-gray-300\">Free mem</span>\n              </th>\n              <th class=\"px-2 py-2\">\n                <span class=\"text-gray-300\">Free swap</span>\n              </th>\n              <th class=\"px-2 py-2\">\n                <span class=\"text-gray-300\">FS Read</span>\n              </th>\n              <th class=\"px-2 py-2\">\n                <span class=\"text-gray-300\">FS Write</span>\n              </th>\n              <th class=\"px-2 py-2\">\n                <span class=\"text-gray-300\">Network R</span>\n              </th>\n              <th class=\"px-2 py-2\">\n                <span class=\"text-gray-300\">Network W</span>\n              </th>\n              <th class=\"px-2 py-2\">\n                <span class=\"text-gray-300\">Load</span>\n              </th>\n              <th class=\"px-2 py-2\">\n                <span class=\"text-gray-300\">User L</span>\n              </th>\n              <th class=\"px-2 py-2\">\n                <span class=\"text-gray-300\">System L</span>\n              </th>\n              <th class=\"px-2 py-2\">\n                <span class=\"text-gray-300\">Nice L</span>\n              </th>\n              <th class=\"px-2 py-2\">\n                <span class=\"text-gray-300\">Idle L</span>\n              </th>\n              <th class=\"px-2 py-2\">\n                <span class=\"text-gray-300\">IRQ L</span>\n              </th>\n              <th class=\"px-4 py-2\">\n                <span class=\"text-gray-300\">FS min</span>\n              </th>\n              <th class=\"px-4 py-2\">\n                <span class=\"text-gray-300\">FS mix</span>\n              </th>\n            </tr>\n          )}\n          Tr={({ value }) =>\n            value && value.doc.parameters ? (\n              <tr class=\"bg-white border-4 border-gray-200\">\n                <td class=\"px-4 py-2\">\n                  <span>{value.doc.parameters.A}</span>\n                </td>\n                <td class=\"px-4 py-2\">\n                  <span>{value.doc.parameters.B}</span>\n                </td>\n                <td class=\"px-4 py-2\">\n                  <span>{value.doc.parameters.C}</span>\n                </td>\n                <td class=\"px-4 py-2\">\n                  <span>{value.doc.parameters.D}</span>\n                </td>\n                <td class=\"px-4 py-2\">\n                  <span>{value.doc.parameters.E}</span>\n                </td>\n                <td class=\"px-4 py-2\">\n                  <span>{value.doc.parameters.F}</span>\n                </td>\n                <td class=\"px-4 py-2\">\n                  <span>{value.doc.parameters.G}</span>\n                </td>\n                <td class=\"px-4 py-2\">\n                  <span>{value.doc.parameters.H}</span>\n                </td>\n                <td class=\"px-4 py-2\">\n                  <span>{value.doc.parameters.I}</span>\n                </td>\n                <td class=\"px-4 py-2\">\n                  <span>{value.doc.parameters.J}</span>\n                </td>\n                <td class=\"px-4 py-2\">\n                  <span>{value.doc.parameters.K}</span>\n                </td>\n                <td class=\"px-4 py-2\">\n                  <span>{value.doc.parameters.L}</span>\n                </td>\n                <td class=\"px-4 py-2\">\n                  <span>{value.doc.parameters.M}</span>\n                </td>\n                <td class=\"px-4 py-2\">\n                  <span>{value.doc.parameters.N}</span>\n                </td>\n                <td class=\"px-4 py-2\">\n                  <span>{value.doc.parameters.O}</span>\n                </td>\n              </tr>\n            ) : null\n          }\n          data={previousData}\n          pagination={{\n            itemsPerPage: 10,\n            onPageChange: (page) => {\n              setCurrentPage(page);\n            },\n            page: currentPage,\n            totalCount: count,\n            withText: true,\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default DeviceDetails;\n","import legoinoDeviceInformation from 'legoino-device-information';\n\n// Default Values\n\nexport const DEVICES_DB = 'BIOREACTOR_devices';\nexport const DEFAULT_PORT = '9001';\nexport const DEFAULT_PROTOCOL = 'tcp';\n\n// Static Values\n\nexport const DEVICE_TYPE = {\n  broadcast: 'broadcast',\n  interactive: 'interactive',\n  local: 'local',\n};\n\nexport const DEVICE_PROTOCOLS = ['tcp', 'http'];\n\nexport const DEVICE_KINDS = Object.keys(legoinoDeviceInformation).map(\n  (key) => legoinoDeviceInformation[key].kind,\n);\n\nexport const DEVICE_STATUS = {\n  opening: 1,\n  opened: 2,\n  closed: 3,\n  missing: 9,\n  error: 10,\n};\n\nexport const COMMANDS = {\n  compactSettings: 'uc',\n  reset: 'ur1234',\n  sleep: 'l',\n  setParameter: (label, value) => `${label}${value}`,\n};\n"],"sourceRoot":""}