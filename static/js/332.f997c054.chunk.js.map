{"version":3,"file":"static/js/332.f997c054.chunk.js","mappings":"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","sources":["hooks/useNotification.js","pages/BroadcastDevices/DevicesList.jsx","pages/BroadcastDevices/index.jsx"],"sourcesContent":["import clsx from 'clsx';\nimport {\n  SvgOutlineExclamationCircle,\n  SvgSolidExclamation,\n  useNotificationCenter,\n} from '../components/tailwind-ui';\n\nexport default function useNotification() {\n  const notificationContext = useNotificationCenter();\n\n  const addNotification = (title, message, { textColor, Icon, timeout }) => {\n    notificationContext.addNotification(\n      {\n        title: (\n          <span className={clsx('text-base font-semibold', textColor + '500')}>\n            {title}\n          </span>\n        ),\n        content: <span className=\"text-sm text-neutral-500\">{message}</span>,\n        icon: <Icon className={clsx('w-8 h-8', textColor + '600')} />,\n      },\n      timeout,\n    );\n  };\n\n  const addInfoNotification = (title, message, timeout = 1000) => {\n    addNotification(title, message, {\n      textColor: 'text-primary-',\n      Icon: SvgOutlineExclamationCircle,\n      timeout: timeout,\n    });\n  };\n\n  const addWarningNotification = (title, message, timeout = 2500) => {\n    addNotification(title, message, {\n      textColor: 'text-warning-',\n      Icon: SvgSolidExclamation,\n      timeout: timeout,\n    });\n  };\n\n  const addErrorNotification = (title, message, timeout = 5000) => {\n    addNotification(title, message, {\n      textColor: 'text-danger-',\n      Icon: SvgSolidExclamation,\n      timeout: timeout,\n    });\n  };\n\n  return { addErrorNotification, addWarningNotification, addInfoNotification };\n}\n","import React from 'react';\nimport {\n  Badge,\n  BadgeSize,\n  SvgOutlineChevronRight,\n  SvgSolidCog,\n  SvgSolidTrash,\n} from '../../components/tailwind-ui';\n\nconst DevicesList = ({ data, onSelect, onEdit, onDelete }) => {\n  return (\n    <div className=\"overflow-hidden bg-white shadow sm:rounded-md\">\n      {data.map((element) => (\n        <li\n          key={element.kind?.kind + element.name}\n          className=\"block transition duration-150 ease-in-out hover:bg-gray-50 focus:outline-none focus:bg-gray-50 cursor-pointer\"\n          onClick={(e) => onSelect(element, e)}\n        >\n          <div className=\"relative flex items-center px-4 py-4 sm:px-6\">\n            <div className=\"flex items-center flex-1 min-w-0\">\n              <div className=\"flex-1 min-w-0 px-4 sm:grid sm:grid-col-2 sm:gap-4\">\n                <div className=\"col-span-2 flex flex-row items-center flex-wrap\">\n                  <p className=\"mr-4 text-lg font-semibold truncate text-primary-700 \">\n                    {element.name}\n                  </p>\n                  <Badge\n                    dot\n                    rounded\n                    label={element.connected ? 'Active' : 'Inactive'}\n                    size={BadgeSize.SMALL}\n                    color={element.connected ? 'success' : 'neutral'}\n                    className=\"w-min h-min\"\n                  />\n                </div>\n                <div className=\"flex flex-col text-xs font-italic text-neutral-600\">\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">Device kind : </span>\n                    {element.kind?.kind}\n                  </p>\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">URL : </span>\n                    {`${element.protocol}://${element.url}:${element.port}`}\n                  </p>\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">Topic : </span>\n                    {element.topic}\n                  </p>\n                </div>\n                <div className=\"pt-2 sm:pt-0 flex justify-end items-center cursor-default\">\n                  <button\n                    className=\"mx-1 p-2 border rounded shadow-sm bg-neutral-100 focus:outline-none active:bg-neutral-200\"\n                    onClick={(e) => onEdit(element, e)}\n                  >\n                    <SvgSolidCog className=\"text-gray-700\" />\n                  </button>\n                  <button\n                    className=\"mx-1 p-2 border rounded shadow-sm bg-neutral-100 focus:outline-none active:bg-neutral-200\"\n                    onClick={(e) => onDelete(element, e)}\n                  >\n                    <SvgSolidTrash className=\"text-gray-700\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div>\n              <SvgOutlineChevronRight className=\"w-5 h-5 text-neutral-400\" />\n            </div>\n          </div>\n          <div className=\"w-full border-t border-neutral-100\" />\n        </li>\n      ))}\n    </div>\n  );\n};\n\nexport default DevicesList;\n","import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { Button } from '../../components/tailwind-ui';\nimport {\n  broadcastDeviceInfo,\n  continuousListenToDevices,\n} from '../../services/broadCastDeviceService';\nimport {\n  updateDevice,\n  deleteDevice,\n  getDevices,\n  addDevice,\n} from '../../services/devicesService';\nimport useNotification from '../../hooks/useNotification';\nimport DevicesList from './DevicesList';\nimport DeviceModal from './DeviceModal';\nimport { DEVICE_TYPE } from '../../services/devicesOptions';\n\nconst SCAN_INTERVAL = 10000; // refresh devices status every 10s\n\nconst BroadcastDevices = ({ history, match }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [devicesList, setDevicesList] = useState([]);\n  const [onEditValues, setOnEditValues] = useState({});\n  const { addErrorNotification } = useNotification();\n\n  const navigate = useNavigate();\n\n  // get saved devices from DB\n  useEffect(() => {\n    refreshDevices();\n  }, []);\n\n  // listen continuously to devices status\n  useEffect(() => {\n    const cleanup = continuousListenToDevices(\n      devicesList,\n      (res) => {\n        const _devices = [];\n        let isChanged = false;\n        res.forEach((response) => {\n          if (response.status === 'fulfilled') {\n            const device = response.value.device;\n            if (!device.connected) {\n              device.connected = true;\n              isChanged = true;\n            }\n            _devices.push(device);\n          } else {\n            const device = response.reason.device;\n            if (device.connected) {\n              device.connected = false;\n              isChanged = true;\n            }\n            _devices.push(device);\n          }\n        });\n        if (isChanged) setDevicesList(_devices);\n      },\n      SCAN_INTERVAL,\n    );\n\n    return () => cleanup.then((intervalId) => clearInterval(intervalId));\n  }, [devicesList]);\n\n  const refreshDevices = () =>\n    getDevices(DEVICE_TYPE.broadcast).then(setDevicesList);\n\n  const onCloseModal = () => {\n    setIsModalOpen(false); // close modal\n    setOnEditValues({});\n  };\n\n  const onSelectDevice = (device, e) => {\n    // history.push(match.url + '/' + device._id);\n    navigate(match.url + '/' + device._id);\n  };\n\n  const onAddDevice = async (device) => {\n    const deviceInfo = broadcastDeviceInfo(device);\n    await addDevice(deviceInfo);\n    refreshDevices();\n  };\n\n  const onUpdateDevice = async (device) => {\n    await updateDevice(device);\n    refreshDevices();\n  };\n\n  const onEditDevice = (device, e) => {\n    e.stopPropagation();\n    setOnEditValues(device);\n    setIsModalOpen(true);\n  };\n\n  const onDeleteDevice = (device, e) => {\n    e.stopPropagation();\n    deleteDevice(device._id)\n      .then(() => refreshDevices())\n      .catch((e) => addErrorNotification(e.name, e.message));\n  };\n\n  return (\n    <div className=\"p-8\">\n      <h2 className=\"text-3xl font-semibold mb-10\">Broadcast devices</h2>\n      <div className=\"w-full flex justify-end mb-4\">\n        <Button onClick={() => setIsModalOpen(true)}>Add</Button>\n      </div>\n      <div>\n        <div className=\"w-full my-2 flex flex-row items-center \">\n          <h3 className=\"w-max ml-2 mr-4 text-neutral-600 text-sm whitespace-nowrap \">\n            Available devices\n          </h3>\n          <div className=\"w-full border-t border-neutral-300\" />\n        </div>\n        <DevicesList\n          data={devicesList}\n          onSelect={onSelectDevice}\n          onEdit={onEditDevice}\n          onDelete={onDeleteDevice}\n        />\n      </div>\n\n      <DeviceModal\n        isOpen={isModalOpen}\n        onClose={onCloseModal}\n        initialValues={onEditValues}\n        onSave={onAddDevice}\n        onUpdate={onUpdateDevice}\n      ></DeviceModal>\n    </div>\n  );\n};\n\nexport default BroadcastDevices;\n"],"names":["useNotification","notificationContext","useNotificationCenter","addNotification","title","message","textColor","Icon","timeout","className","clsx","content","icon","addErrorNotification","SvgSolidExclamation","addWarningNotification","addInfoNotification","SvgOutlineExclamationCircle","data","onSelect","onEdit","onDelete","map","element","onClick","e","name","dot","rounded","label","connected","size","BadgeSize","color","kind","protocol","url","port","topic","history","match","useState","isModalOpen","setIsModalOpen","devicesList","setDevicesList","onEditValues","setOnEditValues","navigate","useNavigate","useEffect","refreshDevices","cleanup","continuousListenToDevices","res","_devices","isChanged","forEach","response","status","device","value","push","reason","then","intervalId","clearInterval","getDevices","DEVICE_TYPE","onAddDevice","deviceInfo","broadcastDeviceInfo","addDevice","onUpdateDevice","updateDevice","_id","stopPropagation","deleteDevice","catch","DeviceModal","isOpen","onClose","initialValues","onSave","onUpdate"],"sourceRoot":""}