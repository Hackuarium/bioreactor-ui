{"version":3,"file":"static/js/182.23278297.chunk.js","mappings":"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","sources":["pages/BroadcastDeviceDetails/HistoryTab.jsx","pages/BroadcastDeviceDetails/GeneralTab.jsx","pages/BroadcastDeviceDetails/DeviceCardInfo.jsx","pages/BroadcastDeviceDetails/index.jsx","services/util.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { throttle } from 'lodash';\nimport { Button, Table, Td, Th } from '../../components/tailwind-ui';\n\nimport {\n  getSavedDataCount,\n  getSavedDataByPage,\n  mapParameters,\n  clearSavedData,\n  listenToDataChanges,\n} from '../../services/devicesService';\nimport { msToTime } from '../../services/util';\n\nconst ROWS_BY_PAGE = 10;\n\nconst HistoryTab = ({ device }) => {\n  const [headers, setHeaders] = useState([]);\n  const [data, setData] = useState([]);\n  const [page, setPage] = useState(1);\n  const [count, setCount] = useState(0);\n  const [initDataListener, setInitDataListener] = useState(false);\n\n  // initialize headers the first time the data is received\n  const initHeaders = useCallback(\n    (dataArray) => {\n      if (headers.length === 0 && dataArray && dataArray.length > 0) {\n        const heads = dataArray[0]?.parametersArray?.map(\n          (h) => h.name || h.label,\n        );\n        setHeaders(['Time', ...heads]);\n      }\n    },\n    [headers.length],\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const getDataByPage = useCallback(\n    throttle(\n      (_page) => {\n        if (device?._id) {\n          getSavedDataByPage(device?._id, _page, ROWS_BY_PAGE).then((_data) => {\n            const params = _data.map((d) => ({\n              epoch: msToTime(d?.epoch),\n              parametersArray: mapParameters(device?.kind?.kind, d?.parameters),\n            }));\n            initHeaders(params);\n            setData(params);\n            getSavedDataCount(device?._id).then(setCount);\n          });\n        }\n      },\n      1000, // execute it just one time if it's called multiple times in 500ms\n      { trailing: true },\n    ),\n    [device?._id, device?.kind?.kind, initHeaders],\n  );\n\n  useEffect(() => {\n    let unsubscribe;\n    if (device?._id) {\n      unsubscribe = listenToDataChanges(\n        device?._id,\n        (res) => {\n          getDataByPage(page);\n        },\n        (err) => console.log(err),\n      );\n    }\n    return () => unsubscribe && unsubscribe.cancel();\n  }, [device?._id, getDataByPage, page, initDataListener]);\n\n  useEffect(() => {\n    getDataByPage(page);\n  }, [getDataByPage, page]);\n\n  const onClear = () => {\n    // destroy & re-create DB\n    clearSavedData(device?._id).then(() => {\n      getSavedDataCount(device?._id).then(() => {\n        setInitDataListener(!initDataListener);\n        setData([]);\n        setPage(1);\n        setCount(0);\n        document.activeElement.blur();\n      });\n    });\n  };\n\n  const headerValues = useCallback(() => {\n    return (\n      <tr>\n        {headers?.map((h) => (\n          <Th\n            key={h}\n            className=\"p-2 text-center font-normal normal-case\"\n            compact={true}\n          >\n            {h}\n          </Th>\n        ))}\n      </tr>\n    );\n  }, [headers]);\n\n  const Row = useCallback((val) => {\n    const classnames = 'text-xs text-center p-2';\n    return (\n      <tr>\n        <Td compact={true} className={classnames + ' font-medium'}>\n          {val.value.epoch}\n        </Td>\n        {val.value.parametersArray?.map((p, index) => (\n          <Td key={index} compact={true} className={classnames}>\n            {p.value}\n          </Td>\n        ))}\n      </tr>\n    );\n  }, []);\n\n  const Empty = () => (\n    <div className=\"mx-5 mt-4 flex flex-col items-center\">\n      <h3 className=\"text-md font-semibold text-gray-300 leading-loose\">\n        No saved data\n      </h3>\n    </div>\n  );\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"w-full p-2 flex flex-row justify-end\">\n        <Button size=\"small\" variant=\"white\" onClick={onClear}>\n          Clear\n        </Button>\n      </div>\n      <div className=\"w-full p-1 pb-4 overflow-x-auto\">\n        <Table\n          pagination={{\n            totalCount: count,\n            page: page,\n            onPageChange: setPage,\n            withText: true,\n            itemsPerPage: ROWS_BY_PAGE,\n            maxVisiblePages: 1,\n          }}\n          data={data.map((d, index) => ({\n            ...d,\n            id: d.epoch + index,\n          }))}\n          Header={headerValues}\n          Tr={Row}\n          itemsPerPage={ROWS_BY_PAGE}\n          Empty={Empty}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default HistoryTab;\n","import React from 'react';\nimport { CardValue } from '../../components';\n\nconst GeneralTab = ({ data }) => {\n  return (\n    <div className=\" flex flex-row justify-around flex-wrap\">\n      {data?.parameters?.map((param, index) => (\n        <CardValue\n          key={index}\n          title={param.name || param.label}\n          value={String(param.value * param.factor)}\n          unit={param.unit}\n          info={param.description}\n          className=\"w-full sm:w-1/2  md:w-1/4 lg:w-1/5 flex\"\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default GeneralTab;\n","import React from 'react';\nimport {\n  BadgeSize,\n  Badge,\n  Button,\n  SvgSolidPencilAlt,\n  SvgSolidArrowCircleLeft,\n} from '../../components/tailwind-ui';\n\nconst DeviceCardInfo = ({ device, isConnected, goBack, onOpenModel }) => {\n  return (\n    <div className=\"my-2 p-2 flex flex-row items-start rounded-md bg-white shadow \">\n      <SvgSolidArrowCircleLeft\n        className=\"my-3 mr-2 h-6 w-6 text-neutral-300 cursor-pointer\"\n        onClick={goBack}\n      />\n      <div className=\"w-full my-2 flex flex-col\">\n        <div className=\"flex flex-row items-center\">\n          <h1 className=\"mr-4 text-lg font-semibold truncate text-primary-800\">\n            {device?.name}\n          </h1>\n          <Badge\n            dot\n            rounded\n            label={isConnected ? 'Active' : 'Inactive'}\n            size={BadgeSize.SMALL}\n            color={isConnected ? 'success' : 'neutral'}\n            className=\"w-min h-min\"\n          />\n        </div>\n        <div className=\"flex flex-row flex-wrap justify-between items-end\">\n          <div className=\"flex flex-col\">\n            <h3 className=\"mt-2 text-xs font-italic text-neutral-600 font-base truncate\">\n              <span className=\"font-semibold\">Kind: </span>\n              {`${device?.kind?.name} (${device?.kind?.kind})`}\n            </h3>\n            <h3 className=\"mt-2 text-xs font-italic text-neutral-600 font-base truncate\">\n              <span className=\"font-semibold\">URL: </span>\n              {`${device?.protocol}://${device?.url}:${device?.port}`}\n            </h3>\n            <h3 className=\"mt-2 text-xs font-italic text-neutral-600 font-base truncate\">\n              <span className=\"font-semibold\">Topic: </span>\n              {`${device?.topic}`}\n            </h3>\n          </div>\n          <div className=\"flex flex-row mt-2 \">\n            <Button\n              size=\"small\"\n              variant=\"white\"\n              className=\"mr-2 \"\n              onClick={() => onOpenModel(true)}\n            >\n              <SvgSolidPencilAlt className=\"text-gray-700\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DeviceCardInfo;\n","import { useState, useEffect, useCallback } from 'react';\nimport { throttle } from 'lodash';\nimport { HorizontalNavigation } from '../../components/tailwind-ui';\n\nimport HistoryTab from './HistoryTab';\nimport GeneralTab from './GeneralTab';\nimport DeviceCardInfo from './DeviceCardInfo';\nimport DeviceModal from '../BroadcastDevices/DeviceModal';\nimport { connectDevice } from '../../services/broadCastDeviceService';\nimport {\n  getDevice,\n  updateDevice,\n  mapParameters,\n  getLastSavedData,\n  closeDbConnection,\n} from '../../services/devicesService';\n\nconst TABS = ['General', 'Data'].map((value) => ({\n  value: value,\n  label: value,\n}));\n\nconst DeviceDetails = ({ match, history }) => {\n  const [currentDevice, setCurrentDevice] = useState();\n  const [selectedTab, setSelectedTab] = useState(TABS[0]);\n  const [data, setData] = useState({});\n  const [isModalOpen, setModelOpen] = useState(false);\n  const [isConnected, setConnected] = useState(false);\n  const [forceRender, setForceRender] = useState(false);\n\n  const deviceId = `${match.params.id}`;\n\n  // get device from DB at the first render\n  useEffect(() => {\n    if (deviceId) {\n      console.log('getDevice');\n      getDevice(deviceId).then(setCurrentDevice).catch(console.log);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // if it's called multiple times, execute it once in 1000ms\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const updateData = useCallback(\n    throttle(\n      (_data) => {\n        // console.log(currentDevice?.kind?.kind);\n        const params = mapParameters(\n          currentDevice.kind?.kind,\n          _data?.parameters,\n        );\n        setData({ ..._data, parameters: params });\n      },\n      1000,\n      { trailing: true },\n    ),\n    [currentDevice?.kind?.kind],\n  );\n\n  // fetch data locally at first render when remote data is not received yet\n  useEffect(() => {\n    if (currentDevice?._id) {\n      getLastSavedData(currentDevice?._id).then((_data) => {\n        if (_data.length > 0) updateData(_data[0]);\n      });\n    }\n    return () => currentDevice?._id && closeDbConnection(currentDevice?._id);\n  }, [currentDevice?._id, updateData]);\n\n  // get remote data : subscribe to device & listen to data\n  useEffect(() => {\n    let unsubscribe;\n    if (currentDevice?._id) {\n      // let isFirstTime = true;\n      connectDevice(currentDevice)\n        .then((deviceClient) => {\n          unsubscribe = deviceClient?.subscribe(\n            (_data) => {\n              // set device connected\n              !isConnected && setConnected(true);\n              updateData(_data);\n              // set the correct device kind (extracted from deviceId)\n              // if (isFirstTime) {\n              //   const kind = getDeviceKind(_data.deviceId);\n              //   if (kind?.kind !== currentDevice.kind?.kind) {\n              //     updateDevice({ ...currentDevice, kind }).then(() => {\n              //       setCurrentDevice({ ...currentDevice, kind });\n              //     });\n              //   }\n              //   isFirstTime = false;\n              // }\n            },\n            (err) => {\n              console.log(err);\n              isConnected && setConnected(false);\n            },\n          );\n        })\n        .catch((err) => {\n          console.log(err);\n          isConnected && setConnected(false);\n        });\n    }\n    return () => {\n      unsubscribe &&\n        unsubscribe(() => {\n          console.log('unsubscribe');\n          // deviceClient?.disconnect();\n        });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentDevice?._id, isConnected, forceRender]);\n\n  const renderTabContent = (tab) => {\n    switch (tab.value) {\n      case 'General':\n        return <GeneralTab data={data} device={currentDevice} />;\n      case 'Data':\n        return <HistoryTab device={currentDevice} />;\n      default:\n        return <div />;\n    }\n  };\n\n  const goBack = () => history.goBack();\n\n  const onUpdateDevice = (values) =>\n    updateDevice(values).then(() => {\n      setCurrentDevice(values);\n      setForceRender(!forceRender);\n    });\n\n  const onCloseModal = () => setModelOpen(false);\n\n  return (\n    <div className=\"mx-4 pb-4\">\n      <DeviceCardInfo\n        device={currentDevice}\n        isConnected\n        goBack={goBack}\n        onOpenModel={setModelOpen}\n      />\n\n      <HorizontalNavigation\n        onSelect={setSelectedTab}\n        selected={selectedTab}\n        options={TABS}\n      />\n\n      <div className=\"p-3 mt-4 sm:m-0 flex flex-col items-center rounded-md sm:rounded-t-none bg-white shadow \">\n        {renderTabContent(selectedTab)}\n      </div>\n\n      <DeviceModal\n        isOpen={isModalOpen}\n        initialValues={currentDevice}\n        onClose={onCloseModal}\n        onUpdate={onUpdateDevice}\n      />\n    </div>\n  );\n};\n\nexport default DeviceDetails;\n","/**\n *\n * @param {Array} firstArray\n * @param {Array} secondArray\n * @returns {Array} elements in firstArray & not in secondArray\n */\n\nexport const diffDeviceLists = (firstArray, secondArray) => {\n  const compare = (otherArray) => (current) =>\n    otherArray.filter((other) => other.id === current.id).length === 0;\n\n  return firstArray.filter(compare(secondArray));\n};\n\nexport const msToTime = (duration) => {\n  const seconds = Math.floor((duration / 1000) % 60),\n    minutes = Math.floor((duration / (1000 * 60)) % 60),\n    hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n  let time = `${seconds}s`;\n  if (hours) {\n    time = `${hours}h ${minutes}m ` + time;\n  } else if (minutes) {\n    time = `${minutes}m ` + time;\n  }\n  return time;\n};\n"],"names":["device","useState","headers","setHeaders","data","setData","page","setPage","count","setCount","initDataListener","setInitDataListener","initHeaders","useCallback","dataArray","length","heads","parametersArray","map","h","name","label","getDataByPage","throttle","_page","_id","getSavedDataByPage","then","_data","params","d","epoch","msToTime","mapParameters","kind","parameters","getSavedDataCount","trailing","useEffect","unsubscribe","listenToDataChanges","res","err","console","log","cancel","headerValues","Th","className","compact","Row","val","classnames","Td","value","p","index","size","variant","onClick","clearSavedData","document","activeElement","blur","pagination","totalCount","onPageChange","withText","itemsPerPage","maxVisiblePages","id","Header","Tr","Empty","param","title","String","factor","unit","info","description","isConnected","goBack","onOpenModel","dot","rounded","BadgeSize","color","protocol","url","port","topic","TABS","match","history","currentDevice","setCurrentDevice","selectedTab","setSelectedTab","isModalOpen","setModelOpen","setConnected","forceRender","setForceRender","deviceId","getDevice","catch","updateData","getLastSavedData","closeDbConnection","connectDevice","deviceClient","subscribe","onSelect","selected","options","tab","renderTabContent","DeviceModal","isOpen","initialValues","onClose","onUpdate","values","updateDevice","diffDeviceLists","firstArray","secondArray","otherArray","filter","current","other","duration","seconds","Math","floor","minutes","hours","time"],"sourceRoot":""}