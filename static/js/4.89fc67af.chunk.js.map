{"version":3,"sources":["components/devicesList.jsx","services/db.js","services/mqttService.js","services/devicesOptions.js","services/deviceService.js","components/deviceModal.jsx","pages/broadcastDevices.jsx","hooks/useNotification.js"],"names":["DevicesList","data","onSelect","onEdit","onDelete","useState","selectedElement","setSelectedElement","handleSelect","element","e","a","callback","isFunction","className","map","onClick","name","kind","protocol","url","port","topic","DB","client","_db","_dbInfo","connect","dbName","db_name","PouchDB","info","then","res","console","log","getInfo","put","doc","Promise","reject","Error","get","docId","getAll","options","allDocs","include_docs","docs","rows","update","_id","_rev","remove","removeAll","destroy","JSON","stringify","close","getClientInstance","username","password","onSuccess","onError","connected","hostname","brokerUrl","mqtt","keepalive","stream","on","err","error","end","DEVICES_DB","connectDevice","resolve","getSavedDevices","dbClient","db","list","item","updateDevice","deviceData","addDevice","props","key","id","r","payload","exist","catch","inserted","toString","protocolOptions","val","label","toUpperCase","value","kindOptions","validationSchema","Yup","shape","max","matches","required","positive","integer","DeviceModal","isOpen","onClose","onSave","onUpdate","initialValues","updateMode","isEmpty","footerMessage","setFooterMessage","formRef","useRef","_initialValues","onSubmit","values","message","useEffect","setTimeout","renderFooterMessage","state","onRequestClose","icon","iconColor","animated","hasCloseButton","requestCloseOnBackdrop","requestCloseOnEsc","fluid","wrapperComponent","Form","wrapperProps","innerRef","Header","Body","placeholder","disabled","inputClassName","leadingInlineAddon","renderOption","o","getValue","type","Footer","stopPropagation","current","BroadcastDevices","render","setRender","isModalOpen","setIsModalOpen","devicesList","setDevicesList","onEditValues","setOnEditValues","addErrorNotification","notificationContext","useNotificationCenter","title","addNotification","content","addInfoNotification","useNotification","device","deviceID"],"mappings":"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","file":"static/js/4.89fc67af.chunk.js","sourcesContent":["import { isFunction } from 'lodash';\nimport { useState } from 'react';\nimport {\n  Spinner,\n  SvgOutlineChevronRight,\n  SvgSolidCog,\n  SvgSolidTrash,\n} from './tailwind-ui';\n\nconst DevicesList = ({ data, onSelect, onEdit, onDelete }) => {\n  const [selectedElement, setSelectedElement] = useState();\n\n  const handleSelect = async (element, e) => {\n    // ignore click if another element is already selected (is loading)\n    if (!selectedElement) {\n      setSelectedElement(element);\n      const callback = () => setSelectedElement(null);\n      isFunction(onSelect) && onSelect(element, e, callback);\n    }\n  };\n  return (\n    <div className=\"overflow-hidden bg-white shadow sm:rounded-md\">\n      {data.map((element) => (\n        <li\n          key={element.kind + element.name}\n          className=\"block transition duration-150 ease-in-out hover:bg-gray-50 focus:outline-none focus:bg-gray-50 cursor-pointer\"\n          onClick={(e) => handleSelect(element, e)}\n        >\n          <div className=\"relative flex items-center px-4 py-4 sm:px-6\">\n            {selectedElement === element && ( // if element is selected, display spinner\n              <div className=\"absolute top-0 left-0 w-full h-full opacity-30 bg-neutral-300\">\n                <div className=\"w-full h-full flex justify-center items-center\">\n                  <Spinner className=\"w-8 h-8 text-primary-800\" />\n                </div>\n              </div>\n            )}\n            <div className=\"flex items-center flex-1 min-w-0\">\n              <div className=\"flex-1 min-w-0 px-4 sm:grid sm:grid-col-2 sm:gap-4\">\n                <p className=\"col-span-2 text-lg font-semibold truncate text-primary-700\">\n                  {element.name}\n                </p>\n                <div className=\"flex flex-col text-xs font-italic text-neutral-600\">\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">Device kind : </span>\n                    {element.kind}\n                  </p>\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">URL : </span>\n                    {`${element.protocol}://${element.url}:${element.port}`}\n                  </p>\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">Topic : </span>\n                    {element.topic}\n                  </p>\n                </div>\n                <div className=\"pt-2 sm:pt-0 flex justify-end items-center cursor-default\">\n                  <button\n                    className=\"mx-1 p-2 border rounded shadow-sm bg-neutral-100 focus:outline-none active:bg-neutral-200\"\n                    onClick={(e) => onEdit(element, e)}\n                  >\n                    <SvgSolidCog className=\"text-gray-700\" />\n                  </button>\n                  <button\n                    className=\"mx-1 p-2 border rounded shadow-sm bg-neutral-100 focus:outline-none active:bg-neutral-200\"\n                    onClick={(e) => onDelete(element, e)}\n                  >\n                    <SvgSolidTrash className=\"text-gray-700\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div>\n              <SvgOutlineChevronRight className=\"w-5 h-5 text-neutral-400\" />\n            </div>\n          </div>\n          <div className=\"w-full border-t border-neutral-100\" />\n        </li>\n      ))}\n    </div>\n  );\n};\n\nexport default DevicesList;\n","import PouchDB from 'pouchdb';\nimport { isFunction } from 'lodash';\n\n// Wrap Db interface in case of switching to another Db other than \"PouchDb\"\n\nfunction DB() {\n  let _db = null;\n  let _dbInfo = {};\n\n  const connect = (dbName) => {\n    if (!_db || (_dbInfo && _dbInfo.db_name !== dbName)) {\n      _db = new PouchDB(dbName);\n      _db.info().then((res) => (_dbInfo = res));\n      console.log(`connected to DB \"${dbName}\"`);\n    }\n\n    // DB operations to return\n\n    const getInfo = () => _dbInfo;\n\n    const put = (doc) => {\n      if (!('_id' in doc))\n        return Promise.reject(new Error('doc must include _id'));\n      return _db.put(doc);\n    };\n\n    const get = (docId) => _db.get(docId);\n\n    const getAll = async (options) => {\n      const docs = await _db.allDocs({\n        include_docs: true,\n        ...options,\n      });\n      //console.log(`get ${docs.total_rows} rows`);\n      return docs.rows;\n    };\n\n    const update = (doc) => {\n      if (!('_id' in doc))\n        return Promise.reject(new Error('doc must include _id'));\n      return _db\n        .get(doc._id)\n        .then((res) => _db.put({ ...doc, _rev: res._rev }));\n    };\n\n    const remove = (docId) => {\n      return _db\n        .get(docId)\n        .then((res) => _db.remove({ _id: docId, _rev: res._rev }));\n    };\n\n    const removeAll = () =>\n      _db.destroy().then((res) => {\n        _db = null;\n        console.log(`DB \"${dbName}\" destroyed : ` + JSON.stringify(res));\n      });\n\n    const close = (callback) =>\n      _db.close(() => {\n        _db = null;\n        console.log(`DB \"${dbName}\" closed`);\n        isFunction(callback) && callback();\n      });\n\n    return {\n      getInfo,\n      put,\n      get,\n      getAll,\n      update,\n      remove,\n      removeAll,\n      close,\n    };\n  };\n  return { connect };\n}\n\nexport default DB();\n","import mqtt from 'mqtt';\nimport { isFunction } from 'lodash';\nimport { parseCurrentSettings } from 'legoino-util';\n\n// Private Functions\nlet client;\n\nconst getClientInstance = (\n  url,\n  protocol,\n  port,\n  username,\n  password,\n  onSuccess,\n  onError,\n) => {\n  // if client is already connected\n  if (client && client.connected && client.options.hostname === url)\n    isFunction(onSuccess) && onSuccess(client);\n\n  const brokerUrl = `${protocol}://${url}:${port}`;\n  client = mqtt.connect(brokerUrl, {\n    keepalive: 60,\n  });\n\n  client.stream.on('error', (err) => {\n    const error = new Error(`Couldn't connect to BROKER \"${brokerUrl}\"`);\n    error.name = 'Mqtt Error';\n    client.end();\n    isFunction(onError) && onError(error);\n  });\n\n  client.on('connect', () => {\n    console.log(`connected to ${brokerUrl} : ${client.connected}`);\n    isFunction(onSuccess) && onSuccess(client);\n  });\n};\n\nconst parseToJson = (data) => {\n  return parseCurrentSettings(data.toString(), {});\n};\n\n// Public Functions\n\nexport const connect = (url, protocol, port, username, password) => {\n  const clientPromise = new Promise((resolve, reject) => {\n    getClientInstance(\n      url,\n      protocol,\n      port,\n      username,\n      password,\n      (client) => resolve(client),\n      (error) => reject(error),\n    );\n  });\n  return clientPromise;\n};\n\n// TO DO: update function\nexport const subscribe = (url, topic, onSuccess, onError) => {\n  const client = getClientInstance(url);\n  client.subscribe(topic, { qos: 2 }, (err) => {\n    err\n      ? isFunction(onError) && onError(err)\n      : client.on('message', (topic, payload) => {\n          isFunction(onSuccess) && onSuccess(parseToJson(payload));\n        });\n  });\n\n  // Functions to return\n\n  const unsubscribe = (onError) => client.unsubscribe(topic, {}, onError);\n\n  const disconnect = (callback) =>\n    client.end(() => {\n      console.log(`mqtt broker \"${client.options.hostname}\" disconnected`);\n      isFunction(callback) && callback();\n    });\n\n  return { unsubscribe, disconnect };\n};\n","// Default Values\n\nexport const DEVICES_DB = 'BIOREACTOR_devices';\nexport const DEFAULT_PORT = '9001';\nexport const DEFAULT_PROTOCOL = 'tcp';\n\n// Static Values\n\nexport const DEVICE_TYPE = {\n  broadcast: 'broadcast',\n  interactive: 'interactive',\n  local: 'local',\n};\n\nexport const DEVICE_PROTOCOLS = ['tcp', 'http'];\n\nexport const DEVICE_KINDS = [\n  'computer',\n  'beemos',\n  'openBio',\n  'openBio6',\n  'openSpectro',\n  'simpleSpectro',\n  'solar2015',\n];\n","import db from './db';\nimport { isFunction } from 'lodash';\nimport { connect, subscribe } from './mqttService';\nimport { DEVICES_DB, DEFAULT_PROTOCOL, DEFAULT_PORT } from './devicesOptions';\n\n// Public Functions\n\nexport const connectDevice = ({ url, protocol, port, username, password }) => {\n  return connect(url, protocol, port, username, password);\n};\n\nexport const getSavedDevices = async () => {\n  const dbClient = db.connect(DEVICES_DB);\n  const list = await dbClient.getAll();\n  return list.map((item) => item.doc);\n};\n\nexport const updateDevice = async (deviceData) => {\n  const dbClient = db.connect(DEVICES_DB);\n  return dbClient.update(deviceData);\n};\n\nexport const deleteDevice = (deviceID) => {\n  const dbClient = db.connect(DEVICES_DB);\n  return dbClient.remove(deviceID).catch((e) => {\n    const err = new Error(`Couldn't remove record: ${e.message}`);\n    err.name = 'Database Error';\n    throw err;\n  });\n};\n\n// add device to devices DB\nexport const addDevice = async (props) => {\n  const dbClient = db.connect(DEVICES_DB);\n  const {\n    kind,\n    name,\n    url,\n    protocol = DEFAULT_PROTOCOL,\n    port = DEFAULT_PORT,\n    topic,\n    username,\n    password,\n  } = props;\n\n  // make sure all props are defined\n  for (let key in props)\n    if (!props[key]) throw new Error(`Field missing [${key}]`);\n\n  const id = `${kind}_${name}`;\n\n  return dbClient\n    .get(id)\n    .then((r) => {\n      // the device already exists in DB\n      const err = new Error('Another device exists with the same name');\n      err.payload = { exist: true, payload: r };\n      throw err;\n    })\n    .catch((e) => {\n      // if the device exists in DB\n      if (e.payload && e.payload.exist) throw e;\n      // the device does not exist in DB\n      return dbClient\n        .put({\n          _id: id,\n          name,\n          url,\n          protocol,\n          port,\n          topic,\n          kind,\n          username,\n          password,\n        })\n        .then((r) => {\n          // inserted successfully\n          return { exist: false, inserted: true, payload: r };\n        })\n        .catch((e) => {\n          // DB error\n          const err = new Error(e.toString());\n          err.payload = {\n            exist: false,\n            inserted: false,\n            payload: e.toString(),\n          };\n          throw err;\n        });\n    });\n};\n\n// To Do: update it (refactor)\nexport const connectDevice2 = (\n  type,\n  name,\n  url,\n  deviceTopic,\n  onSuccess,\n  onError,\n) => {\n  const dbName = `${type}_${name}`;\n  const dbClient = db.connect(dbName);\n  const mqttClient = subscribe(\n    url,\n    deviceTopic,\n    (payload) => {\n      dbClient.put({ _id: Date.now().toString(), ...payload });\n      isFunction(onSuccess) && onSuccess(payload);\n    },\n    onError,\n  );\n\n  // Functions to return\n  const disconnect = () => mqttClient.disconnect(() => dbClient.close());\n  const getAllData = () => dbClient.getAll();\n  const getLastData = () => dbClient.getAll({ descending: true, limit: 1 });\n\n  return {\n    disconnect,\n    getAllData,\n    getLastData,\n  };\n};\n","import { useRef, useState, useEffect } from 'react';\nimport * as Yup from 'yup';\nimport { isFunction, isEmpty } from 'lodash';\nimport {\n  Form,\n  InputField,\n  Modal,\n  SvgOutlinePlus,\n  FormError,\n  SubmitButton,\n  SvgOutlineUser,\n  SvgOutlineKey,\n  SvgOutlineLink,\n  SvgOutlineX,\n  SelectField,\n  Spinner,\n  SvgOutlineCheck,\n} from './tailwind-ui';\n\nimport { connectDevice } from '../services/deviceService';\nimport { DEVICE_KINDS, DEVICE_PROTOCOLS } from '../services/devicesOptions';\n\n//\n// Pre-defined Vars\nconst protocolOptions = DEVICE_PROTOCOLS.map((val) => {\n  return { label: val.toUpperCase(), value: val };\n});\nconst kindOptions = DEVICE_KINDS.map((val) => {\n  return { label: val, value: val };\n});\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .max(50, 'Name too Long!')\n    .matches(\n      /^[A-z0-9_-]*$/,\n      'Field supports only : letters / numbers / _ / - ',\n    )\n    .required('Required'),\n  url: Yup.string().required('Required'),\n  port: Yup.number().positive().integer(),\n  protocol: Yup.string(),\n  kind: Yup.string().required('Required'),\n  topic: Yup.string().required('Required'),\n  username: Yup.string().required('Required'),\n});\n//\n\nconst DeviceModal = ({ isOpen, onClose, onSave, onUpdate, initialValues }) => {\n  const updateMode = !isEmpty(initialValues); // if initialValues defined : updates the recode; else: add the record\n  const [footerMessage, setFooterMessage] = useState(<div />);\n  const formRef = useRef(null); // Ref the Form\n\n  const _initialValues = {\n    name: '123',\n    url: 'mqtt.beemos.org',\n    protocol: protocolOptions[0].value,\n    port: '9001',\n    kind: kindOptions[0].value,\n    topic: 'test',\n    username: 'testUser',\n    password: 'word',\n    ...initialValues,\n  };\n\n  // events functions\n  const onSubmit = async (values) => {\n    try {\n      //await addDevice(values);\n      updateMode\n        ? isFunction(onUpdate) && (await onUpdate(values))\n        : isFunction(onSave) && (await onSave(values));\n      isFunction(onClose) && onClose();\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  const testConnection = (e) => {\n    e.stopPropagation();\n    setFooterMessage(renderFooterMessage('connecting', 'Connecting ...'));\n    setTimeout(() => {\n      connectDevice(formRef.current.values)\n        .then((client) => {\n          setFooterMessage(renderFooterMessage('success', 'Connected'));\n          // TO DO : disconnect client\n        })\n        .catch((err) => {\n          setFooterMessage(\n            renderFooterMessage('error', `Connection Error: ${err.message}`),\n          );\n        });\n    }, 500);\n  };\n\n  useEffect(() => {\n    // clear footer when modal is closed\n    !isOpen && setTimeout(() => setFooterMessage(<div />), 500);\n  }, [isOpen]);\n\n  // helper function for testConnection event\n  const renderFooterMessage = (state, message) => {\n    switch (state) {\n      case 'connecting':\n        return (\n          <div className=\"mx-6 flex flex-row items-center text-sm text-left text-neutral-500\">\n            <Spinner className=\"w-6 h-6 mr-2\" />\n            <span>{message}</span>\n          </div>\n        );\n      case 'success':\n        return (\n          <div className=\"mx-4 flex flex-row items-center text-sm text-left text-success-500\">\n            <SvgOutlineCheck className=\"h-6 w-6 mr-4\" />\n            <span>{message}</span>\n          </div>\n        );\n      case 'error':\n        return (\n          <div className=\"mx-4 flex flex-row items-center text-sm text-left text-danger-500\">\n            <SvgOutlineX className=\"h-6 w-6 mr-4\" />\n            <span>{message}</span>\n          </div>\n        );\n      default:\n        return <div />;\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={onClose}\n      icon={<SvgOutlinePlus />}\n      iconColor=\"neutral\"\n      animated\n      hasCloseButton\n      requestCloseOnBackdrop\n      requestCloseOnEsc\n      fluid\n      wrapperComponent={Form}\n      wrapperProps={{\n        innerRef: formRef,\n        initialValues: _initialValues,\n        validationSchema,\n        onSubmit: onSubmit,\n        className: 'h-full',\n      }}\n    >\n      <Modal.Header>Connect New Device</Modal.Header>\n      <Modal.Body>\n        <div className=\"p-2 mt-2\">\n          <InputField\n            name=\"name\"\n            id=\"name\"\n            label=\"Custom name\"\n            placeholder=\"device_123\"\n            disabled={updateMode}\n            required\n            className=\"w-full\"\n            inputClassName=\"w-full\"\n          ></InputField>\n          <div className=\"flex flex-col sm:flex-row sm:justify-between mt-4 sm:mt-0 border-t border-neutral sm:border-0\">\n            <InputField\n              name=\"url\"\n              id=\"url\"\n              label=\"URL\"\n              placeholder=\"mqtt.domain.com\"\n              required\n              leadingInlineAddon={<SvgOutlineLink />}\n              className=\"mt-4 sm:mr-4 w-full sm:w-1/2\"\n              inputClassName=\"w-full\"\n            ></InputField>\n            <div className=\"flex flex-row justify-between items-start flex-1\">\n              <SelectField\n                name=\"protocol\"\n                id=\"protocol\"\n                label=\"Protocol\"\n                options={protocolOptions}\n                renderOption={(o) => `${o.label}`}\n                getValue={(o) => o.value}\n                className=\"mt-4 mr-4 w-1/2\"\n                inputClassName=\"w-full\"\n              ></SelectField>\n              <InputField\n                name=\"port\"\n                id=\"port\"\n                label=\"Port\"\n                className=\"mt-4 flex-1\"\n                inputClassName=\"w-full\"\n              ></InputField>\n            </div>\n          </div>\n          <div className=\"flex flex-row justify-between items-start\">\n            <SelectField\n              name=\"kind\"\n              id=\"kind\"\n              label=\"Device kind\"\n              options={kindOptions}\n              renderOption={(o) => `${o.label}`}\n              getValue={(o) => o.value}\n              required\n              className=\"mt-4 mr-4 w-1/3 \"\n              inputClassName=\"w-full bg-gray-500\"\n            ></SelectField>\n            <InputField\n              name=\"topic\"\n              id=\"topic\"\n              label=\"Topic\"\n              required\n              className=\"mt-4 flex-1\"\n              inputClassName=\"w-full\"\n            ></InputField>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row sm:justify-between mt-4 sm:mt-0 border-t border-neutral sm:border-0\">\n            <InputField\n              name=\"username\"\n              id=\"username\"\n              label=\"Username\"\n              placeholder=\"Username\"\n              required\n              leadingInlineAddon={<SvgOutlineUser />}\n              className=\"mt-4 w-full sm:mr-4 sm:w-1/2\"\n              inputClassName=\"w-full\"\n            ></InputField>\n            <InputField\n              name=\"password\"\n              id=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              placeholder=\"********\"\n              required\n              leadingInlineAddon={<SvgOutlineKey />}\n              className=\"mt-4 w-full sm:flex-1\"\n              inputClassName=\"w-full\"\n            ></InputField>\n          </div>\n        </div>\n        <FormError />\n      </Modal.Body>\n      <Modal.Footer>\n        <div className=\"flex flex-col sm:flex-row items-center\">\n          {footerMessage}\n          <button\n            onClick={testConnection}\n            type=\"button\"\n            className=\"w-full sm:w-max mt-2 sm:my-0 px-4 py-2 sm:mr-4 text-sm font-semibold text-neutral-700 border rounded-md shadow bg-neutral-200 focus:outline-none flex-1 sm:flex-none\"\n          >\n            Test connection\n          </button>\n          <SubmitButton className=\"w-full my-2 sm:my-0 sm:w-max \">\n            {updateMode ? 'Update' : 'Add'}\n          </SubmitButton>\n        </div>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default DeviceModal;\n","import { useState, useEffect } from 'react';\nimport { isFunction } from 'lodash';\nimport { Button } from '../components/tailwind-ui';\nimport DevicesList from '../components/devicesList';\nimport DeviceModal from '../components/deviceModal';\nimport {\n  addDevice,\n  updateDevice,\n  deleteDevice,\n  getSavedDevices,\n  connectDevice,\n} from '../services/deviceService';\nimport useNotification from '../hooks/useNotification';\n\nconst BroadcastDevices = () => {\n  const [render, setRender] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [devicesList, setDevicesList] = useState([]);\n  const [onEditValues, setOnEditValues] = useState({});\n  const { addErrorNotification } = useNotification();\n\n  useEffect(() => {\n    // get saved devices from DB\n    getSavedDevices().then((list) => setDevicesList(list));\n  }, [render]);\n\n  const onSelectItem = (device, e, callback) => {\n    setTimeout(() => {\n      connectDevice(device)\n        .then((r) => {\n          // navigate to device details page\n          console.log(r);\n          isFunction(callback) && callback();\n        })\n        .catch((e) => {\n          addErrorNotification(e.name, e.message);\n          isFunction(callback) && callback();\n        });\n    }, 500);\n  };\n\n  const onEditItem = (device, e) => {\n    e.stopPropagation();\n    setOnEditValues(device);\n    setIsModalOpen(true);\n  };\n\n  const onDeleteItem = (device, e) => {\n    e.stopPropagation();\n    deleteDevice(device._id)\n      .then(() => setRender(!render))\n      .catch((e) => addErrorNotification(e.name, e.message));\n  };\n\n  const onCloseModal = () => {\n    setRender(!render);\n    setIsModalOpen(false);\n    setOnEditValues({});\n  };\n\n  return (\n    <div className=\"p-8\">\n      <h2 className=\"text-3xl font-semibold mb-12 lg:mb-16\">\n        Broadcast devices\n      </h2>\n      <div className=\"w-full flex justify-end mb-6 lg:mb-8\">\n        <Button onClick={() => setIsModalOpen(true)}>Add device</Button>\n      </div>\n      <div>\n        <div className=\"w-full my-2 flex flex-row items-center \">\n          <h3 className=\"w-max ml-2 mr-4 text-neutral-600 text-sm whitespace-nowrap \">\n            Available devices\n          </h3>\n          <div className=\"w-full border-t border-neutral-300\" />\n        </div>\n        <DevicesList\n          data={devicesList}\n          onSelect={onSelectItem}\n          onEdit={onEditItem}\n          onDelete={onDeleteItem}\n        />\n      </div>\n\n      <DeviceModal\n        isOpen={isModalOpen}\n        onClose={onCloseModal}\n        initialValues={onEditValues}\n        onSave={addDevice}\n        onUpdate={updateDevice}\n      ></DeviceModal>\n    </div>\n  );\n};\n\nexport default BroadcastDevices;\n","import {\n  SvgOutlineExclamationCircle,\n  SvgSolidExclamation,\n  useNotificationCenter,\n} from '../components/tailwind-ui';\n\nconst TIMEOUT = 4000;\n\nexport default function useNotification() {\n  const notificationContext = useNotificationCenter();\n\n  const addInfoNotification = (title, message) => {\n    notificationContext.addNotification(\n      {\n        title: (\n          <span className=\"text-base font-semibold text-primary-500\">\n            {title}\n          </span>\n        ),\n        content: <span className=\"text-sm text-neutral-500\">{message}</span>,\n        icon: (\n          <SvgOutlineExclamationCircle className=\"w-8 h-8 text-primary-600\" />\n        ),\n      },\n      TIMEOUT,\n    );\n  };\n\n  const addErrorNotification = (title, message) => {\n    notificationContext.addNotification(\n      {\n        title: (\n          <span className=\" text-base font-semibold text-danger-500\">\n            {title}\n          </span>\n        ),\n        content: <span className=\"text-sm text-neutral-500\">{message}</span>,\n        icon: <SvgSolidExclamation className=\"w-8 h-8 text-danger-600\" />,\n      },\n      TIMEOUT,\n    );\n  };\n\n  return { addErrorNotification, addInfoNotification };\n}\n"],"sourceRoot":""}