{"version":3,"sources":["components/availableDevicesList.jsx","services/db.js","services/mqttService.js","services/deviceService.js","components/addDeviceModal.jsx","pages/broadcastDevices.jsx"],"names":["AvailableDevicesList","data","onSelect","onEdit","className","map","element","onClick","e","name","url","topic","DB","client","_db","_dbInfo","connect","dbName","db_name","PouchDB","info","then","res","console","log","getInfo","put","doc","Promise","reject","Error","get","docId","getAll","options","a","allDocs","include_docs","docs","total_rows","rows","update","_id","_rev","remove","removeAll","destroy","JSON","stringify","close","callback","isFunction","getClientInstance","protocol","port","username","password","onSuccess","onError","connected","hostname","brokerUrl","mqtt","keepalive","stream","on","err","error","end","DEVICE_PROTOCOLS","tcp","http","DEVICE_KINDS","DEFAULT_PROTOCOL","connectDevice","resolve","addDevice","props","dbClient","db","kind","key","id","r","payload","exist","catch","inserted","toString","AddDeviceModal","isOpen","onClose","initialValues","useState","footerMessage","setFooterMessage","ref","useRef","protocolOptions","Object","values","val","label","toUpperCase","value","kindOptions","_initialValues","validationSchema","Yup","shape","max","matches","required","positive","integer","onSubmit","message","renderFooterMessage","state","onRequestClose","icon","iconColor","animated","hasCloseButton","requestCloseOnBackdrop","requestCloseOnEsc","fluid","wrapperComponent","Form","wrapperProps","innerRef","Header","Body","placeholder","inputClassName","leadingInlineAddon","renderOption","o","getValue","type","Footer","stopPropagation","setTimeout","current","BroadcastDevices","isModalOpen","setIsModalOpen","device"],"mappings":"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","file":"static/js/4.917daa67.chunk.js","sourcesContent":["import { SvgOutlineChevronRight, SvgSolidCog } from '../components/tailwind-ui';\n\nconst AvailableDevicesList = ({ data, onSelect, onEdit }) => {\n  return (\n    <div>\n      <div className=\"w-full flex flex-row items-center\">\n        <h3 className=\"w-max ml-2 mr-4 text-neutral-600 text-sm font-semibold whitespace-nowrap \">\n          Available devices\n        </h3>\n        <div className=\"w-full border-t border-neutral-300\" />\n      </div>\n      <div className=\"h-4\" />\n      <div className=\"overflow-hidden bg-white shadow sm:rounded-md\">\n        {data.map((element) => (\n          <li\n            key={element.name}\n            className=\"block transition duration-150 ease-in-out hover:bg-gray-50 focus:outline-none focus:bg-gray-50 cursor-pointer\"\n            onClick={(e) => onSelect(element, e)}\n          >\n            <div className=\"flex items-center px-4 py-4 sm:px-6\">\n              <div className=\"flex items-center flex-1 min-w-0\">\n                <div className=\"flex-1 min-w-0 px-4 md:grid md:grid-col-2 md:gap-4\">\n                  <p className=\"col-span-2 text-lg font-semibold truncate text-primary-700\">\n                    {element.name}\n                  </p>\n                  <div className=\"flex flex-col text-sm font-italic text-neutral\">\n                    <p className=\"truncate\">\n                      <span className=\"font-semibold\">URL : </span>\n                      {element.url}\n                    </p>\n                    <p className=\"truncate\">\n                      <span className=\"font-semibold\">Topic : </span>\n                      {element.topic}\n                    </p>\n                  </div>\n                  <div className=\"pt-2 md:pt-0 flex justify-end items-center cursor-default\">\n                    <button\n                      className=\"mx-1 p-2 border rounded-md shadow bg-neutral-100 focus:outline-none active:bg-neutral-200\"\n                      onClick={(e) => onEdit(element, e)}\n                    >\n                      <SvgSolidCog className=\"text-gray-700\" />\n                    </button>\n                  </div>\n                </div>\n              </div>\n              <div>\n                <SvgOutlineChevronRight className=\"w-5 h-5 text-neutral-400\" />\n              </div>\n            </div>\n            <div className=\"w-full border-t border-neutral-100\" />\n          </li>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default AvailableDevicesList;\n","import PouchDB from 'pouchdb';\nimport { isFunction } from 'lodash';\n\n// Wrap Db interface in case of switching to another Db other than \"PouchDb\"\n\nfunction DB() {\n  let _db = null;\n  let _dbInfo = {};\n\n  const connect = (dbName) => {\n    if (!_db || (_dbInfo && _dbInfo.db_name !== dbName)) {\n      _db = new PouchDB(dbName);\n      _db.info().then((res) => (_dbInfo = res));\n      console.log(`connected to DB \"${dbName}\"`);\n    }\n\n    // DB operations to return\n\n    const getInfo = () => _dbInfo;\n\n    const put = (doc) => {\n      if (!('_id' in doc))\n        return Promise.reject(new Error('doc must include _id'));\n      return _db.put(doc);\n    };\n\n    const get = (docId) => _db.get(docId);\n\n    const getAll = async (options) => {\n      const docs = await _db.allDocs({\n        include_docs: true,\n        ...options,\n      });\n      console.log(`get ${docs.total_rows} rows`);\n      return docs.rows;\n    };\n\n    const update = (doc) => {\n      if (!('_id' in doc))\n        return Promise.reject(new Error('doc must include _id'));\n      return _db\n        .get(doc._id)\n        .then((res) => _db.put({ ...doc, _rev: res._rev }));\n    };\n\n    const remove = (docId) => {\n      return _db\n        .get(docId)\n        .then((res) => _db.remove({ _id: docId, _rev: res._rev }));\n    };\n\n    const removeAll = () =>\n      _db.destroy().then((res) => {\n        _db = null;\n        console.log(`DB \"${dbName}\" destroyed : ` + JSON.stringify(res));\n      });\n\n    const close = (callback) =>\n      _db.close(() => {\n        _db = null;\n        console.log(`DB \"${dbName}\" closed`);\n        isFunction(callback) && callback();\n      });\n\n    return {\n      getInfo,\n      put,\n      get,\n      getAll,\n      update,\n      remove,\n      removeAll,\n      close,\n    };\n  };\n  return { connect };\n}\n\nexport default DB();\n","import mqtt from 'mqtt';\nimport { isFunction } from 'lodash';\nimport { parseCurrentSettings } from 'legoino-util';\n\n// Private Functions\nlet client;\n\nconst getClientInstance = (\n  url,\n  protocol,\n  port,\n  username,\n  password,\n  onSuccess,\n  onError,\n) => {\n  // if client is already connected\n  if (client && client.connected && client.options.hostname === url)\n    isFunction(onSuccess) && onSuccess(client);\n\n  const brokerUrl = `${protocol}://${url}:${port}`;\n  client = mqtt.connect(brokerUrl, {\n    keepalive: 60,\n  });\n\n  client.stream.on('error', (err) => {\n    const error = new Error(`couldn't connect to BROKER \"${brokerUrl}\"`);\n    error.name = 'MQTT ERROR';\n    client.end();\n    isFunction(onError) && onError(error);\n  });\n\n  client.on('connect', () => {\n    console.log(`connected to ${brokerUrl} : ${client.connected}`);\n    isFunction(onSuccess) && onSuccess(client);\n  });\n};\n\nconst parseToJson = (data) => {\n  return parseCurrentSettings(data.toString(), {});\n};\n\n// Public Functions\n\nexport const connect = (url, protocol, port, username, password) => {\n  const clientPromise = new Promise((resolve, reject) => {\n    getClientInstance(\n      url,\n      protocol,\n      port,\n      username,\n      password,\n      (client) => resolve(client),\n      (error) => reject(error),\n    );\n  });\n  return clientPromise;\n};\n\nexport const subscribe = (url, topic, onSuccess, onError) => {\n  const client = getClientInstance(url);\n  client.subscribe(topic, { qos: 2 }, (err) => {\n    err\n      ? isFunction(onError) && onError(err)\n      : client.on('message', (topic, payload) => {\n          isFunction(onSuccess) && onSuccess(parseToJson(payload));\n        });\n  });\n\n  // Functions to return\n\n  const unsubscribe = (onError) => client.unsubscribe(topic, {}, onError);\n\n  const disconnect = (callback) =>\n    client.end(() => {\n      console.log(`mqtt broker \"${client.options.hostname}\" disconnected`);\n      isFunction(callback) && callback();\n    });\n\n  return { unsubscribe, disconnect };\n};\n","import db from './db';\nimport { connect, subscribe } from './mqttService';\nimport { isFunction } from 'lodash';\n\n// Public Vars\nexport const DEVICE_TYPE = {\n  broadcast: 'broadcast',\n  interactive: 'interactive',\n  local: 'local',\n};\nexport const DEVICE_PROTOCOLS = {\n  tcp: 'tcp',\n  http: 'http',\n};\nexport const DEVICE_KINDS = {\n  tcp: 'computer',\n  http: 'beemos',\n};\n\n// Private Vars (Default)\nconst DEVICES_DB = 'BIOREACTOR_devices';\nconst DEFAULT_PORT = '9001';\nconst DEFAULT_PROTOCOL = DEVICE_PROTOCOLS.tcp;\n\n// Public Functions\n\nexport const connectDevice = ({ url, protocol, port, username, password }) => {\n  return connect(url, protocol, port, username, password);\n};\n\nexport const connectDevice2 = (\n  type,\n  name,\n  url,\n  deviceTopic,\n  onSuccess,\n  onError,\n) => {\n  const dbName = `${type}_${name}`;\n  const dbClient = db.connect(dbName);\n  const mqttClient = subscribe(\n    url,\n    deviceTopic,\n    (payload) => {\n      dbClient.put({ _id: Date.now().toString(), ...payload });\n      isFunction(onSuccess) && onSuccess(payload);\n    },\n    onError,\n  );\n\n  // Functions to return\n  const disconnect = () => mqttClient.disconnect(() => dbClient.close());\n  const getAllData = () => dbClient.getAll();\n  const getLastData = () => dbClient.getAll({ descending: true, limit: 1 });\n\n  return {\n    disconnect,\n    getAllData,\n    getLastData,\n  };\n};\n\n// add device to devices DB\nexport const addDevice = async (props) => {\n  const dbClient = db.connect(DEVICES_DB);\n  const {\n    kind,\n    name,\n    url,\n    protocol = DEFAULT_PROTOCOL,\n    port = DEFAULT_PORT,\n    topic,\n    username,\n    password,\n  } = props;\n\n  // make sure all props are defined\n  for (let key in props)\n    if (!props[key]) throw new Error(`Field missing [${key}]`);\n\n  const id = `${kind}_${name}`;\n\n  return dbClient\n    .get(id)\n    .then((r) => {\n      // the device already exists in DB\n      const err = new Error('Another device exists with the same name');\n      err.payload = { exist: true, payload: r };\n      throw err;\n    })\n    .catch((e) => {\n      // if the device exists in DB\n      if (e.payload && e.payload.exist) throw e;\n      // the device does not exist in DB\n      return dbClient\n        .put({\n          _id: id,\n          name,\n          url,\n          protocol,\n          port,\n          topic,\n          username,\n          password,\n        })\n        .then((r) => {\n          // inserted successfully\n          return { exist: false, inserted: true, payload: r };\n        })\n        .catch((e) => {\n          // DB error\n          const err = new Error(e.toString());\n          err.payload = {\n            exist: false,\n            inserted: false,\n            payload: e.toString(),\n          };\n          throw err;\n        });\n    });\n};\n","import { useRef, useState } from 'react';\nimport * as Yup from 'yup';\nimport { isFunction } from 'lodash';\nimport {\n  Form,\n  InputField,\n  Modal,\n  SvgOutlinePlus,\n  FormError,\n  SubmitButton,\n  SvgOutlineUser,\n  SvgOutlineKey,\n  SvgOutlineLink,\n  SvgOutlineX,\n  SelectField,\n  Spinner,\n  SvgOutlineCheck,\n} from '../components/tailwind-ui';\n\nimport {\n  addDevice,\n  connectDevice,\n  DEVICE_KINDS,\n  DEVICE_PROTOCOLS,\n} from '../services/deviceService';\n\n//\n//\n\nconst AddDeviceModal = ({ isOpen, onClose, initialValues = {} }) => {\n  const [footerMessage, setFooterMessage] = useState(<div />);\n  const ref = useRef(null); // Ref the Form\n\n  // init initial values\n  const protocolOptions = Object.values(DEVICE_PROTOCOLS).map((val) => {\n    return { label: val.toUpperCase(), value: val };\n  });\n  const kindOptions = Object.values(DEVICE_KINDS).map((val) => {\n    return { label: val.toUpperCase(), value: val };\n  });\n  const _initialValues = {\n    name: '123',\n    url: 'mqtt.beemos.org',\n    protocol: protocolOptions[0].value,\n    port: '9001',\n    kind: kindOptions[0].value,\n    topic: 'test',\n    username: 'testuser',\n    password: 'word',\n    ...initialValues,\n  };\n\n  const validationSchema = Yup.object().shape({\n    name: Yup.string()\n      .max(50, 'Name too Long!')\n      .matches(\n        /^[A-z0-9_-]*$/,\n        'Field supports only : letters / numbers / _ / - ',\n      )\n      .required('Required'),\n    url: Yup.string().required('Required'),\n    port: Yup.number().positive().integer().required('Required'),\n    protocol: Yup.string().required('Required'),\n    username: Yup.string().required('Required'),\n  });\n\n  // events functions\n  const onSubmit = async (values) => {\n    try {\n      await addDevice(values);\n      isFunction(onClose) && onClose();\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  const testConnection = (e) => {\n    e.stopPropagation();\n    setFooterMessage(renderFooterMessage('connecting', 'Connecting ...'));\n    setTimeout(() => {\n      connectDevice(ref.current.values)\n        .then((client) => {\n          setFooterMessage(renderFooterMessage('success', 'Connected'));\n          // TO DO : disconnect client\n        })\n        .catch((err) => {\n          setFooterMessage(\n            renderFooterMessage('error', `Connection Error: ${err.message}`),\n          );\n        });\n    }, 500);\n  };\n\n  const renderFooterMessage = (state, message) => {\n    switch (state) {\n      case 'connecting':\n        return (\n          <div className=\"h-full mx-6 flex flex-row items-center text-sm text-neutral-500\">\n            <Spinner className=\"w-5 h-5 mr-2\" />\n            <span>{message}</span>\n          </div>\n        );\n      case 'success':\n        return (\n          <div className=\"h-full mx-4 flex flex-row items-center text-sm text-success-500\">\n            <SvgOutlineCheck className=\"h-5 w-5 mr-4\" />\n            <span>{message}</span>\n          </div>\n        );\n      case 'error':\n        return (\n          <div className=\"h-full mx-4 flex flex-row items-center text-sm text-danger-500\">\n            <SvgOutlineX className=\"h-5 w-5 mr-4\" />\n            <span>{message}</span>\n          </div>\n        );\n      default:\n        return <div />;\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={onClose}\n      icon={<SvgOutlinePlus />}\n      iconColor=\"neutral\"\n      animated\n      hasCloseButton\n      requestCloseOnBackdrop\n      requestCloseOnEsc\n      fluid\n      wrapperComponent={Form}\n      wrapperProps={{\n        innerRef: ref,\n        initialValues: _initialValues,\n        validationSchema,\n        onSubmit: onSubmit,\n        className: 'h-full',\n      }}\n    >\n      <Modal.Header>Connect New Device</Modal.Header>\n      <Modal.Body>\n        <div className=\"p-2 mt-2\">\n          <InputField\n            name=\"name\"\n            id=\"name\"\n            label=\"Custom name\"\n            placeholder=\"device_123\"\n            required\n            className=\"w-full\"\n            inputClassName=\"w-full\"\n          ></InputField>\n          <div className=\"flex flex-col sm:flex-row sm:justify-between mt-4 sm:mt-0 border-t border-neutral sm:border-0\">\n            <InputField\n              name=\"url\"\n              id=\"url\"\n              label=\"URL\"\n              placeholder=\"mqtt.domain.com\"\n              required\n              leadingInlineAddon={<SvgOutlineLink />}\n              className=\"mt-4 sm:mr-4 w-full sm:w-1/2\"\n              inputClassName=\"w-full\"\n            ></InputField>\n            <div className=\"flex flex-row justify-between flex-1\">\n              <SelectField\n                name=\"protocol\"\n                id=\"protocol\"\n                label=\"Protocol\"\n                options={protocolOptions}\n                renderOption={(o) => `${o.label}`}\n                getValue={(o) => o.value}\n                className=\"mt-4 mr-4 w-1/2\"\n                inputClassName=\"w-full\"\n              ></SelectField>\n              <InputField\n                name=\"port\"\n                id=\"port\"\n                label=\"Port\"\n                className=\"mt-4 flex-1\"\n                inputClassName=\"w-full\"\n              ></InputField>\n            </div>\n          </div>\n          <div className=\"flex flex-row justify-between\">\n            <SelectField\n              name=\"kind\"\n              id=\"kind\"\n              label=\"Device kind\"\n              options={kindOptions}\n              renderOption={(o) => `${o.label}`}\n              getValue={(o) => o.value}\n              required\n              className=\"mt-4 mr-4 w-1/3 \"\n              inputClassName=\"w-full bg-gray-500\"\n            ></SelectField>\n            <InputField\n              name=\"topic\"\n              id=\"topic\"\n              label=\"Topic\"\n              required\n              className=\"mt-4 flex-1\"\n              inputClassName=\"w-full\"\n            ></InputField>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row sm:justify-between mt-4 sm:mt-0 border-t border-neutral sm:border-0\">\n            <InputField\n              name=\"username\"\n              id=\"username\"\n              label=\"Username\"\n              placeholder=\"Username\"\n              required\n              leadingInlineAddon={<SvgOutlineUser />}\n              className=\"mt-4 w-full sm:mr-4 sm:w-1/2\"\n              inputClassName=\"w-full\"\n            ></InputField>\n            <InputField\n              name=\"password\"\n              id=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              placeholder=\"********\"\n              required\n              leadingInlineAddon={<SvgOutlineKey />}\n              className=\"mt-4 w-full sm:flex-1\"\n              inputClassName=\"w-full\"\n            ></InputField>\n          </div>\n        </div>\n        <FormError />\n      </Modal.Body>\n      <Modal.Footer>\n        <div className=\"flex flex-row items-center\">\n          {footerMessage}\n          <button\n            onClick={testConnection}\n            type=\"button\"\n            className=\"px-4 py-2 mr-4 text-sm font-semibold text-neutral-700 border rounded-md shadow bg-neutral-200 focus:outline-none flex-1 sm:flex-none\"\n          >\n            Test connection\n          </button>\n          <SubmitButton className=\"w-1/3 sm:w-max \">Add</SubmitButton>\n        </div>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default AddDeviceModal;\n","import AvailableDevicesList from '../components/availableDevicesList';\nimport { useState } from 'react';\nimport AddDeviceModal from '../components/addDeviceModal';\n\nconst BroadcastDevices = () => {\n  const [isModalOpen, setIsModalOpen] = useState(true);\n  const [data] = useState([\n    {\n      name: 'device 1',\n      url: 'mqtt.beemos.org',\n      topic: 'lpatiny/Computer/server',\n    },\n    {\n      name: 'device 2',\n      url: 'mqtt.zakodium.org',\n      topic: 'lpatiny/Computer/server',\n    },\n    {\n      name: 'device 3',\n      url: 'mqtt.zakodium.org',\n      topic: 'lpatiny/Computer/server',\n    },\n  ]);\n\n  const onSelectItem = (device) => {\n    console.log(device);\n  };\n\n  const onEditItem = (device, e) => {\n    e.stopPropagation();\n    console.log(device);\n  };\n\n  return (\n    <div className=\"p-8\">\n      <h2 className=\"text-3xl font-semibold mb-12 lg:mb-16\">\n        Broadcast devices\n      </h2>\n      <div className=\"w-full flex justify-end mb-6 lg:mb-8\">\n        <button\n          onClick={() => setIsModalOpen(true)}\n          className=\"px-4 text-neutral-100 font-semibold p-2 border rounded-md shadow bg-primary-700 focus:outline-none active:bg-primary-500\"\n        >\n          Add device\n        </button>\n      </div>\n      <AddDeviceModal\n        isOpen={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n      ></AddDeviceModal>\n\n      <AvailableDevicesList\n        data={data}\n        onSelect={onSelectItem}\n        onEdit={onEditItem}\n      />\n    </div>\n  );\n};\n\nexport default BroadcastDevices;\n"],"sourceRoot":""}