{"version":3,"sources":["hooks/useNotification.js","services/db.js","services/mqttService.js","services/deviceService.js","components/DevicesList.jsx","components/DeviceModal.jsx","pages/BroadcastDevices.jsx","services/devicesOptions.js"],"names":["useNotification","notificationContext","useNotificationCenter","addNotification","title","message","textColor","Icon","timeout","className","clsx","content","icon","addErrorNotification","SvgSolidExclamation","addWarningNotification","addInfoNotification","SvgOutlineExclamationCircle","DB","client","_db","_dbInfo","connect","dbName","db_name","PouchDB","info","then","res","console","log","getInfo","put","doc","Promise","reject","Error","get","docId","getAll","options","a","allDocs","include_docs","docs","rows","getAllCount","total_rows","update","_id","_rev","remove","removeAll","destroy","JSON","stringify","close","callback","isFunction","url","protocol","port","username","password","resolve","DEFAULT_PROTOCOL","DEFAULT_PORT","onSuccess","onError","connected","hostname","brokerUrl","mqtt","keepalive","reconnectPeriod","on","stream","err","error","name","end","getClientInstance","subscribe","topic","onMessageReceived","qos","payload","data","parseCurrentSettings","toString","unsubscribe","getSavedDevices","dbClient","db","DEVICES_DB","list","map","item","getDevice","deviceId","device","updateDevice","deviceData","deleteDevice","deviceID","catch","e","addDevice","props","kind","key","id","r","exist","inserted","connectDevice","mqttClient","onSubscribe","Date","now","disconnect","getAllData","getLastData","descending","limit","getPageDate","skip","getAllDataCount","DevicesList","onSelect","onEdit","onDelete","useState","selectedElement","setSelectedElement","handleSelect","element","onClick","protocolOptions","DEVICE_PROTOCOLS","val","label","toUpperCase","value","kindOptions","DEVICE_KINDS","validationSchema","Yup","shape","max","matches","required","positive","integer","DeviceModal","isOpen","onClose","onSave","onUpdate","initialValues","updateMode","isEmpty","footerMessage","setFooterMessage","formRef","useRef","_initialValues","onSubmit","values","useEffect","setTimeout","renderFooterMessage","state","onRequestClose","iconColor","animated","hasCloseButton","requestCloseOnBackdrop","requestCloseOnEsc","fluid","wrapperComponent","Form","wrapperProps","innerRef","Header","Body","placeholder","disabled","inputClassName","leadingInlineAddon","renderOption","o","getValue","type","Footer","stopPropagation","current","BroadcastDevices","history","match","render","setRender","isModalOpen","setIsModalOpen","devicesList","setDevicesList","onEditValues","setOnEditValues","push","Object","keys","legoinoDeviceInformation","COMMANDS","compactSettings","runExpirement","kinetic","reset","sleep","setParameter"],"mappings":"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","file":"static/js/6.e181bf85.chunk.js","sourcesContent":["import clsx from 'clsx';\nimport {\n  SvgOutlineExclamationCircle,\n  SvgSolidExclamation,\n  useNotificationCenter,\n} from '../components/tailwind-ui';\n\nexport default function useNotification() {\n  const notificationContext = useNotificationCenter();\n\n  const addNotification = (title, message, { textColor, Icon, timeout }) => {\n    notificationContext.addNotification(\n      {\n        title: (\n          <span className={clsx('text-base font-semibold', textColor + '500')}>\n            {title}\n          </span>\n        ),\n        content: <span className=\"text-sm text-neutral-500\">{message}</span>,\n        icon: <Icon className={clsx('w-8 h-8', textColor + '600')} />,\n      },\n      timeout,\n    );\n  };\n\n  const addInfoNotification = (title, message) => {\n    addNotification(title, message, {\n      textColor: 'text-primary-',\n      Icon: SvgOutlineExclamationCircle,\n      timeout: 1000,\n    });\n  };\n\n  const addWarningNotification = (title, message) => {\n    addNotification(title, message, {\n      textColor: 'text-warning-',\n      Icon: SvgSolidExclamation,\n      timeout: 2500,\n    });\n  };\n\n  const addErrorNotification = (title, message) => {\n    addNotification(title, message, {\n      textColor: 'text-danger-',\n      Icon: SvgSolidExclamation,\n      timeout: 5000,\n    });\n  };\n\n  return { addErrorNotification, addWarningNotification, addInfoNotification };\n}\n","import PouchDB from 'pouchdb';\nimport { isFunction } from 'lodash';\n\n// Wrap Db interface in case of switching to another Db other than \"PouchDb\"\n\nfunction DB() {\n  let _db = null;\n  let _dbInfo = {};\n\n  const connect = (dbName) => {\n    if (!_db || (_dbInfo && _dbInfo.db_name !== dbName)) {\n      _db = new PouchDB(dbName);\n      _db.info().then((res) => (_dbInfo = res));\n      console.log(`connected to DB \"${dbName}\"`);\n    }\n\n    // DB operations to return\n\n    const getInfo = () => _dbInfo;\n\n    const put = (doc) => {\n      if (!('_id' in doc))\n        return Promise.reject(new Error('doc must include _id'));\n      return _db.put(doc);\n    };\n\n    const get = (docId) => _db.get(docId)\n\n    const getAll = async (options) => {\n      const docs = await _db.allDocs({\n        include_docs: true,\n        ...options,\n      });\n      //console.log(`get ${docs.total_rows} rows`);\n      //console.log(docs.rows);\n      return docs.rows;\n    };\n\n    const getAllCount = async (options) => {\n      const docs = await _db.allDocs({\n        include_docs: true,\n        ...options,\n      });\n      return docs.total_rows;\n    };\n\n    const update = (doc) => {\n      if (!('_id' in doc))\n        return Promise.reject(new Error('doc must include _id'));\n      return _db\n        .get(doc._id)\n        .then((res) => _db.put({ ...doc, _rev: res._rev }));\n    };\n\n    const remove = (docId) => {\n      return _db\n        .get(docId)\n        .then((res) => _db.remove({ _id: docId, _rev: res._rev }));\n    };\n\n    const removeAll = () =>\n      _db.destroy().then((res) => {\n        _db = null;\n        console.log(`DB \"${dbName}\" destroyed : ` + JSON.stringify(res));\n      });\n\n    const close = (callback) =>\n      _db.close(() => {\n        _db = null;\n        console.log(`DB \"${dbName}\" closed`);\n        isFunction(callback) && callback();\n      });\n\n    return {\n      getInfo,\n      put,\n      get,\n      getAll,\n      getAllCount,\n      update,\n      remove,\n      removeAll,\n      close,\n    };\n  };\n  return { connect };\n}\n\nexport default DB();\n","import mqtt from 'mqtt';\nimport { isFunction } from 'lodash';\nimport { parseCurrentSettings } from 'legoino-util';\nimport { DEFAULT_PORT, DEFAULT_PROTOCOL } from './devicesOptions';\n\n// Private Functions\nlet client;\n\nconst getClientInstance = (\n  url,\n  protocol = DEFAULT_PROTOCOL,\n  port = DEFAULT_PORT,\n  username,\n  password,\n  onSuccess,\n  onError,\n) => {\n  // if client is already connected\n  if (client && client.connected && client.options.hostname === url)\n    isFunction(onSuccess) && onSuccess(client);\n\n  const brokerUrl = `${protocol}://${url}:${port}`;\n  client = mqtt.connect(brokerUrl, {\n    keepalive: 300,\n    reconnectPeriod: 5000,\n  });\n\n  client.on('connect', () => {\n    console.log(`connected to ${brokerUrl} : ${client.connected}`);\n    isFunction(onSuccess) && onSuccess(client);\n  });\n\n  client.stream.on('error', (err) => {\n    console.log(err);\n    const error = new Error(`Couldn't connect to BROKER \"${brokerUrl}\"`);\n    error.name = 'Mqtt Error';\n    client.end();\n    isFunction(onError) && onError(error);\n  });\n};\n\nconst parseToJson = (data) => {\n  return parseCurrentSettings(data.toString(), {});\n};\n\n// Public Functions\n\nexport const connect = (url, protocol, port, username, password) => {\n  const clientPromise = new Promise((resolve, reject) => {\n    getClientInstance(\n      url,\n      protocol,\n      port,\n      username,\n      password,\n      (client) => resolve(client),\n      (error) => reject(error),\n    );\n  });\n  return clientPromise;\n};\n\n// TO DO: update function\n\nexport const subscribe = (client, topic, onMessageReceived, onError) => {\n  client.subscribe(topic, { qos: 2 }, (err) => {\n    err\n      ? isFunction(onError) && onError(err)\n      : client.on('message', (topic, payload) => {\n          isFunction(onMessageReceived) &&\n            onMessageReceived(parseToJson(payload));\n        });\n  });\n\n  const unsubscribe = (onError) => client.unsubscribe(topic, {}, onError);\n\n  return unsubscribe;\n};\n\nexport const disconnect = (client, callback) =>\n  client.end(() => {\n    console.log(`mqtt broker \"${client.options.hostname}\" disconnected`);\n    isFunction(callback) && callback();\n  });\n","import db from './db';\nimport { isFunction } from 'lodash';\nimport { connect, subscribe, disconnect } from './mqttService';\nimport { DEVICES_DB } from './devicesOptions';\n\n// Public Functions\n\nexport const getSavedDevices = async () => {\n  const dbClient = db.connect(DEVICES_DB);\n  const list = await dbClient.getAll();\n  return list.map((item) => item.doc);\n};\n\nexport const getDevice = async (deviceId) => {\n  const dbClient = db.connect(DEVICES_DB);\n  const device = await dbClient.get(deviceId);\n  return device;\n};\n\nexport const updateDevice = async (deviceData) => {\n  const dbClient = db.connect(DEVICES_DB);\n  return dbClient.update(deviceData);\n};\n\nexport const deleteDevice = (deviceID) => {\n  const dbClient = db.connect(DEVICES_DB);\n  return dbClient.remove(deviceID).catch((e) => {\n    const err = new Error(`Couldn't remove record: ${e.message}`);\n    err.name = 'Database Error';\n    throw err;\n  });\n};\n\n// add device to devices DB\nexport const addDevice = (props) => {\n  const dbClient = db.connect(DEVICES_DB);\n  const { kind, name, url, protocol, port, topic, username, password } = props;\n\n  // make sure all props are defined\n  for (let key in props)\n    if (!props[key]) throw new Error(`Field missing [${key}]`);\n\n  const id = `${kind}_${name}`;\n\n  return dbClient\n    .get(id)\n    .then((r) => {\n      // the device already exists in DB\n      const err = new Error('Another device exists with the same name');\n      err.payload = { exist: true, payload: r };\n      throw err;\n    })\n    .catch((e) => {\n      // if the device exists in DB\n      if (e.payload && e.payload.exist) throw e;\n      // the device does not exist in DB\n      return dbClient\n        .put({\n          _id: id,\n          name,\n          url,\n          protocol,\n          port,\n          topic,\n          kind,\n          username,\n          password,\n        })\n        .then((r) => {\n          // inserted successfully\n          return { exist: false, inserted: true, payload: r };\n        })\n        .catch((e) => {\n          // DB error\n          const err = new Error(e.toString());\n          err.payload = {\n            exist: false,\n            inserted: false,\n            payload: e.toString(),\n          };\n          throw err;\n        });\n    });\n};\n\n\n//\n// connect to broadcast device & return a client instance with {subscribe, disconnect, getAllData, getLastData}\nexport const connectDevice = ({\n  _id,\n  name,\n  kind,\n  deviceId = _id || `${kind}_${name}`,\n  url,\n  protocol,\n  port,\n  topic,\n  username,\n  password,\n}) => {\n  const clientPromise = new Promise(async (resolve, reject) => {\n    try {\n      const mqttClient = await connect(url, protocol, port, username, password);\n      const dbClient = db.connect(deviceId);\n      const _subscribe = (onSubscribe, onError) => {\n        const unsubscribe = subscribe(\n          mqttClient,\n          topic,\n          (payload) => {\n            dbClient.put({ _id: Date.now().toString(), ...payload });\n            isFunction(onSubscribe) && onSubscribe(payload);\n          },\n          onError,\n        );\n        return unsubscribe;\n      };\n\n      const _disconnect = () => disconnect(mqttClient, () => dbClient.close());\n      const getAllData = () => dbClient.getAll();\n      const getLastData = () => dbClient.getAll({ descending: true, limit: 1 });\n      const getPageDate = (skip,limit)=> dbClient.getAll({ descending: true,skip:skip ,limit: limit });\n      const getAllDataCount = ()=>dbClient.getAllCount();\n      resolve({\n        subscribe: _subscribe,\n        disconnect: _disconnect,\n        getAllData,\n        getLastData,\n        getPageDate,\n        getAllDataCount\n      });\n    } catch (e) {\n      // connection error\n      reject(e);\n    }\n  });\n\n  return clientPromise;\n};\n","import { isFunction } from 'lodash';\nimport { useState } from 'react';\nimport {\n  Spinner,\n  SvgOutlineChevronRight,\n  SvgSolidCog,\n  SvgSolidTrash,\n} from './tailwind-ui';\n\nconst DevicesList = ({ data, onSelect, onEdit, onDelete }) => {\n  const [selectedElement, setSelectedElement] = useState();\n\n  const handleSelect = async (element, e) => {\n    // ignore click if another element is already selected (is loading)\n    if (!selectedElement) {\n      setSelectedElement(element);\n      const callback = () => setSelectedElement(null);\n      isFunction(onSelect) && onSelect(element, e, callback);\n    }\n  };\n  return (\n    <div className=\"overflow-hidden bg-white shadow sm:rounded-md\">\n      {data.map((element) => (\n        <li\n          key={element.kind + element.name}\n          className=\"block transition duration-150 ease-in-out hover:bg-gray-50 focus:outline-none focus:bg-gray-50 cursor-pointer\"\n          onClick={(e) => handleSelect(element, e)}\n        >\n          <div className=\"relative flex items-center px-4 py-4 sm:px-6\">\n            {selectedElement === element && ( // if element is selected, display spinner\n              <div className=\"absolute top-0 left-0 w-full h-full opacity-30 bg-neutral-300\">\n                <div className=\"w-full h-full flex justify-center items-center\">\n                  <Spinner className=\"w-8 h-8 text-primary-800\" />\n                </div>\n              </div>\n            )}\n            <div className=\"flex items-center flex-1 min-w-0\">\n              <div className=\"flex-1 min-w-0 px-4 sm:grid sm:grid-col-2 sm:gap-4\">\n                <p className=\"col-span-2 text-lg font-semibold truncate text-primary-700\">\n                  {element.name}\n                </p>\n                <div className=\"flex flex-col text-xs font-italic text-neutral-600\">\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">Device kind : </span>\n                    {element.kind}\n                  </p>\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">URL : </span>\n                    {`${element.protocol}://${element.url}:${element.port}`}\n                  </p>\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">Topic : </span>\n                    {element.topic}\n                  </p>\n                </div>\n                <div className=\"pt-2 sm:pt-0 flex justify-end items-center cursor-default\">\n                  <button\n                    className=\"mx-1 p-2 border rounded shadow-sm bg-neutral-100 focus:outline-none active:bg-neutral-200\"\n                    onClick={(e) => onEdit(element, e)}\n                  >\n                    <SvgSolidCog className=\"text-gray-700\" />\n                  </button>\n                  <button\n                    className=\"mx-1 p-2 border rounded shadow-sm bg-neutral-100 focus:outline-none active:bg-neutral-200\"\n                    onClick={(e) => onDelete(element, e)}\n                  >\n                    <SvgSolidTrash className=\"text-gray-700\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div>\n              <SvgOutlineChevronRight className=\"w-5 h-5 text-neutral-400\" />\n            </div>\n          </div>\n          <div className=\"w-full border-t border-neutral-100\" />\n        </li>\n      ))}\n    </div>\n  );\n};\n\nexport default DevicesList;\n","import { useRef, useState, useEffect } from 'react';\nimport * as Yup from 'yup';\nimport { isFunction, isEmpty } from 'lodash';\nimport {\n  Form,\n  InputField,\n  Modal,\n  SvgOutlinePlus,\n  FormError,\n  SubmitButton,\n  SvgOutlineUser,\n  SvgOutlineKey,\n  SvgOutlineLink,\n  SvgOutlineX,\n  SelectField,\n  Spinner,\n  SvgOutlineCheck,\n} from './tailwind-ui';\n\nimport { connectDevice } from '../services/deviceService';\nimport { DEVICE_KINDS, DEVICE_PROTOCOLS } from '../services/devicesOptions';\n\n//\n// Pre-defined Vars\nconst protocolOptions = DEVICE_PROTOCOLS.map((val) => {\n  return { label: val.toUpperCase(), value: val };\n});\nconst kindOptions = DEVICE_KINDS.map((val) => {\n  return { label: val, value: val };\n});\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .max(50, 'Name too Long!')\n    .matches(\n      /^[A-z0-9_-]*$/,\n      'Field supports only : letters / numbers / _ / - ',\n    )\n    .required('Required'),\n  url: Yup.string().required('Required'),\n  port: Yup.number().positive().integer(),\n  protocol: Yup.string(),\n  kind: Yup.string().required('Required'),\n  topic: Yup.string().required('Required'),\n  username: Yup.string().required('Required'),\n});\n//\n\nconst DeviceModal = ({ isOpen, onClose, onSave, onUpdate, initialValues }) => {\n  const updateMode = !isEmpty(initialValues); // if initialValues defined : updates the recode; else: add the record\n  const [footerMessage, setFooterMessage] = useState(<div />);\n  const formRef = useRef(null); // Ref the Form\n\n  const _initialValues = {\n    name: 'Computer',\n    url: 'mqtt.hackuarium.org',\n    protocol: protocolOptions[0].value,\n    port: '9001',\n    kind: kindOptions[0].value,\n    topic: 'lpatiny/Computer/server',\n    username: 'testUser',\n    password: 'word',\n    ...initialValues,\n  };\n\n  // events functions\n  const onSubmit = async (values) => {\n    try {\n      //await addDevice(values);\n      updateMode\n        ? isFunction(onUpdate) && (await onUpdate(values))\n        : isFunction(onSave) && (await onSave(values));\n      isFunction(onClose) && onClose();\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  const testConnection = (e) => {\n    e.stopPropagation();\n    setFooterMessage(renderFooterMessage('connecting', 'Connecting ...'));\n    setTimeout(() => {\n      connectDevice(formRef.current.values)\n        .then((client) => {\n          setFooterMessage(renderFooterMessage('success', 'Connected'));\n          // TO DO : disconnect client\n        })\n        .catch((err) => {\n          setFooterMessage(\n            renderFooterMessage('error', `Connection Error: ${err.message}`),\n          );\n        });\n    }, 500);\n  };\n\n  useEffect(() => {\n    // clear footer when modal is closed\n    !isOpen && setTimeout(() => setFooterMessage(<div />), 500);\n  }, [isOpen]);\n\n  // helper function for testConnection event\n  const renderFooterMessage = (state, message) => {\n    switch (state) {\n      case 'connecting':\n        return (\n          <div className=\"mx-6 flex flex-row items-center text-sm text-left text-neutral-500\">\n            <Spinner className=\"w-6 h-6 mr-2\" />\n            <span>{message}</span>\n          </div>\n        );\n      case 'success':\n        return (\n          <div className=\"mx-4 flex flex-row items-center text-sm text-left text-success-500\">\n            <SvgOutlineCheck className=\"h-6 w-6 mr-4\" />\n            <span>{message}</span>\n          </div>\n        );\n      case 'error':\n        return (\n          <div className=\"mx-4 flex flex-row items-center text-sm text-left text-danger-500\">\n            <SvgOutlineX className=\"h-6 w-6 mr-4\" />\n            <span>{message}</span>\n          </div>\n        );\n      default:\n        return <div />;\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={onClose}\n      icon={<SvgOutlinePlus />}\n      iconColor=\"neutral\"\n      animated\n      hasCloseButton\n      requestCloseOnBackdrop\n      requestCloseOnEsc\n      fluid\n      wrapperComponent={Form}\n      wrapperProps={{\n        innerRef: formRef,\n        initialValues: _initialValues,\n        validationSchema,\n        onSubmit: onSubmit,\n        className: 'h-full',\n      }}\n    >\n      <Modal.Header>Connect New Device</Modal.Header>\n      <Modal.Body>\n        <div className=\"p-2 mt-2\">\n          <InputField\n            name=\"name\"\n            id=\"name\"\n            label=\"Custom name\"\n            placeholder=\"device_123\"\n            disabled={updateMode}\n            required\n            className=\"w-full\"\n            inputClassName=\"w-full\"\n          ></InputField>\n          <div className=\"flex flex-col sm:flex-row sm:justify-between mt-4 sm:mt-0 border-t border-neutral sm:border-0\">\n            <InputField\n              name=\"url\"\n              id=\"url\"\n              label=\"URL\"\n              placeholder=\"mqtt.domain.com\"\n              required\n              leadingInlineAddon={<SvgOutlineLink />}\n              className=\"mt-4 sm:mr-4 w-full sm:w-1/2\"\n              inputClassName=\"w-full\"\n            ></InputField>\n            <div className=\"flex flex-row justify-between items-start flex-1\">\n              <SelectField\n                name=\"protocol\"\n                id=\"protocol\"\n                label=\"Protocol\"\n                options={protocolOptions}\n                renderOption={(o) => `${o.label}`}\n                getValue={(o) => o.value}\n                className=\"mt-4 mr-4 w-1/2\"\n                inputClassName=\"w-full\"\n              ></SelectField>\n              <InputField\n                name=\"port\"\n                id=\"port\"\n                label=\"Port\"\n                className=\"mt-4 flex-1\"\n                inputClassName=\"w-full\"\n              ></InputField>\n            </div>\n          </div>\n          <div className=\"flex flex-row justify-between items-start\">\n            <SelectField\n              name=\"kind\"\n              id=\"kind\"\n              label=\"Device kind\"\n              options={kindOptions}\n              renderOption={(o) => `${o.label}`}\n              getValue={(o) => o.value}\n              required\n              className=\"mt-4 mr-4 w-1/3 \"\n              inputClassName=\"w-full bg-gray-500\"\n            ></SelectField>\n            <InputField\n              name=\"topic\"\n              id=\"topic\"\n              label=\"Topic\"\n              required\n              className=\"mt-4 flex-1\"\n              inputClassName=\"w-full\"\n            ></InputField>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row sm:justify-between mt-4 sm:mt-0 border-t border-neutral sm:border-0\">\n            <InputField\n              name=\"username\"\n              id=\"username\"\n              label=\"Username\"\n              placeholder=\"Username\"\n              required\n              leadingInlineAddon={<SvgOutlineUser />}\n              className=\"mt-4 w-full sm:mr-4 sm:w-1/2\"\n              inputClassName=\"w-full\"\n            ></InputField>\n            <InputField\n              name=\"password\"\n              id=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              placeholder=\"********\"\n              required\n              leadingInlineAddon={<SvgOutlineKey />}\n              className=\"mt-4 w-full sm:flex-1\"\n              inputClassName=\"w-full\"\n            ></InputField>\n          </div>\n        </div>\n        <FormError />\n      </Modal.Body>\n      <Modal.Footer>\n        <div className=\"flex flex-col sm:flex-row items-center\">\n          {footerMessage}\n          <button\n            onClick={testConnection}\n            type=\"button\"\n            className=\"w-full sm:w-max mt-2 sm:my-0 px-4 py-2 sm:mr-4 text-sm font-semibold text-neutral-700 border rounded-md shadow bg-neutral-200 focus:outline-none flex-1 sm:flex-none\"\n          >\n            Test connection\n          </button>\n          <SubmitButton className=\"w-full my-2 sm:my-0 sm:w-max \">\n            {updateMode ? 'Update' : 'Add'}\n          </SubmitButton>\n        </div>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default DeviceModal;\n","import { useState, useEffect } from 'react';\nimport { isFunction } from 'lodash';\nimport { Button } from '../components/tailwind-ui';\nimport DevicesList from '../components/DevicesList';\nimport DeviceModal from '../components/DeviceModal';\nimport {\n  addDevice,\n  updateDevice,\n  deleteDevice,\n  getSavedDevices,\n  connectDevice,\n} from '../services/deviceService';\nimport useNotification from '../hooks/useNotification';\n\nconst BroadcastDevices = ({ history, match }) => {\n  const [render, setRender] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [devicesList, setDevicesList] = useState([]);\n  const [onEditValues, setOnEditValues] = useState({});\n  const { addErrorNotification } = useNotification();\n\n  useEffect(() => {\n    // get saved devices from DB\n    getSavedDevices().then((list) => setDevicesList(list));\n  }, [render]);\n\n  const onOpenModal = () => {\n    setOnEditValues({});\n    setIsModalOpen(true);\n  };\n\n  const onCloseModal = () => {\n    setRender(!render); // refresh devices list\n    setIsModalOpen(false); // close modal\n  };\n\n  const onSelectItem = (device, e, callback) => {\n    setTimeout(async () => {\n      try {\n        await connectDevice(device);\n        isFunction(callback) && callback();\n        history.push(match.url + '/device/' + device._id);\n      } catch (e) {\n        addErrorNotification(e.name, e.message);\n        isFunction(callback) && callback();\n      }\n    }, 500);\n  };\n\n  const onEditItem = (device, e) => {\n    e.stopPropagation();\n    setOnEditValues(device);\n    setIsModalOpen(true);\n  };\n\n  const onDeleteItem = (device, e) => {\n    e.stopPropagation();\n    deleteDevice(device._id)\n      .then(() => setRender(!render))\n      .catch((e) => addErrorNotification(e.name, e.message));\n  };\n\n  return (\n    <div className=\"p-8\">\n      <h2 className=\"text-3xl font-semibold mb-12 lg:mb-16\">\n        Broadcast devices\n      </h2>\n      <div className=\"w-full flex justify-end mb-6 lg:mb-8\">\n        <Button onClick={onOpenModal}>Add device</Button>\n      </div>\n      <div>\n        <div className=\"w-full my-2 flex flex-row items-center \">\n          <h3 className=\"w-max ml-2 mr-4 text-neutral-600 text-sm whitespace-nowrap \">\n            Available devices\n          </h3>\n          <div className=\"w-full border-t border-neutral-300\" />\n        </div>\n        <DevicesList\n          data={devicesList}\n          onSelect={onSelectItem}\n          onEdit={onEditItem}\n          onDelete={onDeleteItem}\n        />\n      </div>\n\n      <DeviceModal\n        isOpen={isModalOpen}\n        onClose={onCloseModal}\n        initialValues={onEditValues}\n        onSave={addDevice}\n        onUpdate={updateDevice}\n      ></DeviceModal>\n    </div>\n  );\n};\n\nexport default BroadcastDevices;\n","import legoinoDeviceInformation from 'legoino-device-information';\n\n// Default Values\n\nexport const DEVICES_DB = 'BIOREACTOR_devices';\nexport const DEFAULT_PORT = '9001';\nexport const DEFAULT_PROTOCOL = 'tcp';\n\n// Static Values\n\nexport const DEVICE_TYPE = {\n  broadcast: 'broadcast',\n  interactive: 'interactive',\n  local: 'local',\n};\n\nexport const DEVICE_PROTOCOLS = ['tcp', 'http','wss'];\n\nexport const DEVICE_KINDS = Object.keys(legoinoDeviceInformation).map(\n  (key) => legoinoDeviceInformation[key].kind,\n);\n\nexport const DEVICE_STATUS = {\n  opening: 1,\n  opened: 2,\n  closed: 3,\n  missing: 9,\n  error: 10,\n};\n\nexport const COMMANDS = {\n  compactSettings: 'uc',\n  runExpirement: 'r',\n  kinetic: 'k',\n  reset: 'ur1234',\n  sleep: 'l',\n  setParameter: (label, value) => `${label}${value}`,\n};\n"],"sourceRoot":""}