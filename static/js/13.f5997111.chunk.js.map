{"version":3,"sources":["pages/LocalDevices/LocalDevicesList.jsx","pages/LocalDevices/index.jsx"],"names":["LocalDevicesList","data","onSelect","onEdit","onDelete","className","map","element","onClick","e","name","dot","rounded","label","connected","size","BadgeSize","SMALL","color","kind","id","LocalDevices","history","match","useState","isModalOpen","setIsModalOpen","devices","setDevices","deviceEdited","setDeviceEdited","addInfoNotification","useNotification","useEffect","refreshDevices","cleanUp","continuousUpdateDevices","changed","ids","d","_devices","includes","then","intervalId","clearInterval","getDevices","DEVICE_TYPE","local","onRequest","a","document","activeElement","blur","requestDevices","getConnectedDevices","newList","handleDevicesListChange","storedDevices","newDevices","diffDeviceLists","length","forEach","_device","addDevice","localDeviceInfo","onEditDevice","device","stopPropagation","onDeleteDevice","clearSavedData","_id","deleteDevice","onSaveDevice","updateDevice","push","url","LocalDeviceModal","isOpen","onClose","initialValues","onSave"],"mappings":"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","file":"static/js/13.f5997111.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Badge,\n  BadgeSize,\n  SvgOutlineChevronRight,\n  SvgSolidCog,\n  SvgSolidTrash,\n} from '../../components/tailwind-ui';\n\nconst LocalDevicesList = ({ data, onSelect, onEdit, onDelete }) => {\n  return (\n    <div className=\"overflow-hidden bg-white shadow sm:rounded-md\">\n      {data.map((element) => (\n        <li\n          key={element.id}\n          className=\"block transition duration-150 ease-in-out hover:bg-gray-50 focus:outline-none focus:bg-gray-50 cursor-pointer\"\n          onClick={(e) => onSelect(element, e)}\n        >\n          <div className=\"relative flex items-center px-4 py-4 sm:px-6\">\n            <div className=\"flex items-center flex-1 min-w-0\">\n              <div className=\"flex-1 min-w-0 px-4 sm:grid sm:grid-col-2 sm:gap-4\">\n                <div className=\"col-span-2 flex flex-row items-center flex-wrap\">\n                  <p className=\"mr-4 text-lg font-semibold truncate text-primary-700 \">\n                    {element.name}\n                  </p>\n                  <Badge\n                    dot\n                    rounded\n                    label={element.connected ? 'Active' : 'Inactive'}\n                    size={BadgeSize.SMALL}\n                    color={element.connected ? 'success' : 'neutral'}\n                    className=\"w-min h-min\"\n                  />\n                </div>\n                <div className=\"pt-2 sm:pt-0 flex flex-col text-xs font-italic text-neutral-600 justify-center\">\n                  <p className=\"truncate\">\n                    <span className=\"font-semibold\">{element?.kind?.name}</span>\n                  </p>\n                </div>\n                <div className=\"pt-2 sm:pt-0 flex justify-end items-center cursor-default\">\n                  <button\n                    className=\"mx-1 p-2 border rounded shadow-sm bg-neutral-100 focus:outline-none active:bg-neutral-200\"\n                    onClick={(e) => onEdit(element, e)}\n                  >\n                    <SvgSolidCog className=\"text-gray-700\" />\n                  </button>\n                  <button\n                    className=\"mx-1 p-2 border rounded shadow-sm bg-neutral-100 focus:outline-none active:bg-neutral-200\"\n                    onClick={(e) => onDelete(element, e)}\n                  >\n                    <SvgSolidTrash className=\"text-gray-700\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div>\n              <SvgOutlineChevronRight className=\"w-5 h-5 text-neutral-400\" />\n            </div>\n          </div>\n          <div className=\"w-full border-t border-neutral-100\" />\n        </li>\n      ))}\n    </div>\n  );\n};\n\nexport default LocalDevicesList;\n","import React, { useEffect, useState } from 'react';\nimport { Button } from '../../components/tailwind-ui';\n\nimport LocalDeviceModal from './LocalDeviceModal';\nimport LocalDevicesList from './LocalDevicesList';\nimport useNotification from '../../hooks/useNotification';\nimport { diffDeviceLists } from '../../services/util';\nimport { DEVICE_TYPE } from '../../services/devicesOptions';\nimport {\n  addDevice,\n  updateDevice,\n  getDevices,\n  deleteDevice,\n  clearSavedData,\n} from '../../services/devicesService';\nimport {\n  localDeviceInfo,\n  requestDevices,\n  getConnectedDevices,\n  continuousUpdateDevices,\n} from '../../services/localDeviceService';\n\nconst REFRESH_INTERVAL = 1000;\n\nconst LocalDevices = ({ history, match }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [devices, setDevices] = useState([]);\n  const [deviceEdited, setDeviceEdited] = useState({});\n  const { addInfoNotification } = useNotification();\n\n  useEffect(() => refreshDevices(), []);\n\n  // update devices status continuously\n  useEffect(() => {\n    const cleanUp = continuousUpdateDevices((connected) => {\n      let changed;\n      const ids = connected.map((d) => d.id);\n      const _devices = devices.map((d) => {\n        if (ids.includes(d.id) && !d.connected) {\n          d.connected = true;\n          changed = true;\n        } else if (!ids.includes(d.id) && d.connected) {\n          d.connected = false;\n          changed = true;\n        }\n        return d;\n      });\n      if (changed) setDevices(_devices);\n    }, REFRESH_INTERVAL);\n\n    return () => cleanUp.then((intervalId) => clearInterval(intervalId));\n  }, [devices]);\n\n  const refreshDevices = () => {\n    getDevices(DEVICE_TYPE.local).then(setDevices);\n  };\n\n  const onRequest = async () => {\n    document.activeElement.blur();\n    await requestDevices();\n    const newList = await getConnectedDevices();\n    handleDevicesListChange(newList);\n  };\n\n  const handleDevicesListChange = (_devices) => {\n    getDevices(DEVICE_TYPE.local).then((storedDevices) => {\n      const newDevices = diffDeviceLists(_devices, storedDevices);\n      if (newDevices.length > 0) {\n        addInfoNotification('New device connected');\n        newDevices.forEach((_device) => {\n          addDevice(localDeviceInfo(_device));\n        });\n        refreshDevices();\n      }\n    });\n  };\n\n  const onSelectDevice = (device, e) => {\n    history.push(match.url + '/' + device._id);\n  };\n\n  const onEditDevice = async (device, e) => {\n    e.stopPropagation();\n    setDeviceEdited(device);\n    setIsModalOpen(true);\n  };\n\n  const onDeleteDevice = async (device, e) => {\n    e.stopPropagation();\n    clearSavedData(device?._id);\n    deleteDevice(device?._id).then(() => refreshDevices());\n  };\n\n  const onCloseModal = () => {\n    setIsModalOpen(false);\n    setDeviceEdited({});\n  };\n\n  const onSaveDevice = async (device) => {\n    updateDevice(device).then(() => {\n      setDeviceEdited({});\n      setIsModalOpen(false);\n      refreshDevices();\n    });\n  };\n\n  return (\n    <div className=\"p-8\">\n      <h2 className=\"text-3xl font-semibold mb-10\">Local devices</h2>\n      <div className=\"w-full flex justify-end mb-4\">\n        <Button onClick={onRequest}>Request Device</Button>\n      </div>\n      <div>\n        <div className=\"w-full my-2 flex flex-row items-center \">\n          <h3 className=\"w-max ml-2 mr-4 text-neutral-600 text-sm whitespace-nowrap \">\n            Available devices\n          </h3>\n          <div className=\"w-full border-t border-neutral-300\" />\n        </div>\n\n        {devices.length > 0 ? (\n          <LocalDevicesList\n            data={devices}\n            onSelect={onSelectDevice}\n            onEdit={onEditDevice}\n            onDelete={onDeleteDevice}\n          />\n        ) : (\n          <div className=\"mx-5 mt-10 flex flex-col items-center\">\n            <h3 className=\"text-sm font-bold text-gray-300 leading-loose\">\n              No connected Devices\n            </h3>\n            <h3 className=\"text-xs font-base text-gray-300\">\n              Please plug your device into the computer\n            </h3>\n          </div>\n        )}\n      </div>\n\n      <LocalDeviceModal\n        isOpen={isModalOpen}\n        onClose={onCloseModal}\n        initialValues={deviceEdited}\n        onSave={onSaveDevice}\n      />\n    </div>\n  );\n};\n\nexport default LocalDevices;\n"],"sourceRoot":""}