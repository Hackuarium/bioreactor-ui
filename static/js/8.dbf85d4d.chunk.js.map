{"version":3,"sources":["hooks/useNotification.js","services/localDeviceService.js","pages/LocalDevices/SelectDeviceComponent.jsx","pages/LocalDevices/ValueCard.jsx","pages/LocalDevices/GeneralTab.jsx","pages/LocalDevices/EditTab.jsx","components/DividerCustom.jsx","pages/LocalDevices/ConfigTab.jsx","pages/LocalDevices/index.jsx","services/devicesOptions.js"],"names":["useNotification","notificationContext","useNotificationCenter","addNotification","title","message","textColor","Icon","timeout","className","clsx","content","icon","addErrorNotification","SvgSolidExclamation","addWarningNotification","addInfoNotification","SvgOutlineExclamationCircle","devicesManager","DevicesManager","navigator","serial","requestDevices","a","getConnectedDevices","updateDevices","getDevicesList","ready","connectedDevices","continuousUpdateDevices","callback","scanInterval","interval","setInterval","isFunction","sendCommand","deviceId","command","typeOptions","DEVICE_KINDS","map","type","label","SelectDeviceComponent","device","deviceType","filter","o","onSelectDevice","onSelectType","useState","devices","setDevices","useEffect","updateConnectedDevices","cleanUp","newList","handleDevicesListChange","then","intervalId","clearInterval","length","id","renderOptions","onRequest","document","activeElement","blur","list","options","onSelect","onClick","ValueCard","value","unit","placeholder","editable","onChange","name","event","target","GeneralTab","data","epoch","parametersArray","param","index","factor","EditTab","DividerCustom","justify","intervals","v","ConfigTab","refreshInterval","setRefreshInterval","writableParams","setWritableParams","_refreshInterval","_setRefreshInterval","render","setRender","showSpinner","setShowSpinner","parameters","values","Object","keys","key","writable","reRender","setTimeout","onReset","COMMANDS","reset","resultMsg","onSleep","sleep","onSave","saved","edited","console","log","setParameter","option","variant","p","description","newValue","newValues","onValueChanged","tabs","LocalDevices","selectedDevice","setSelectedDevice","selectedType","setSelectedType","selectedTab","setSelectedTab","setData","getData","compactSettings","compressedResults","results","parseCurrentSettings","kind","parameterInfo","newDevice","selected","tab","renderTabContent","DEVICES_DB","DEFAULT_PORT","DEFAULT_PROTOCOL","DEVICE_PROTOCOLS","legoinoDeviceInformation"],"mappings":"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","file":"static/js/8.dbf85d4d.chunk.js","sourcesContent":["import clsx from 'clsx';\nimport {\n  SvgOutlineExclamationCircle,\n  SvgSolidExclamation,\n  useNotificationCenter,\n} from '../components/tailwind-ui';\n\nexport default function useNotification() {\n  const notificationContext = useNotificationCenter();\n\n  const addNotification = (title, message, { textColor, Icon, timeout }) => {\n    notificationContext.addNotification(\n      {\n        title: (\n          <span className={clsx('text-base font-semibold', textColor + '500')}>\n            {title}\n          </span>\n        ),\n        content: <span className=\"text-sm text-neutral-500\">{message}</span>,\n        icon: <Icon className={clsx('w-8 h-8', textColor + '600')} />,\n      },\n      timeout,\n    );\n  };\n\n  const addInfoNotification = (title, message) => {\n    addNotification(title, message, {\n      textColor: 'text-primary-',\n      Icon: SvgOutlineExclamationCircle,\n      timeout: 1000,\n    });\n  };\n\n  const addWarningNotification = (title, message) => {\n    addNotification(title, message, {\n      textColor: 'text-warning-',\n      Icon: SvgSolidExclamation,\n      timeout: 2500,\n    });\n  };\n\n  const addErrorNotification = (title, message) => {\n    addNotification(title, message, {\n      textColor: 'text-danger-',\n      Icon: SvgSolidExclamation,\n      timeout: 5000,\n    });\n  };\n\n  return { addErrorNotification, addWarningNotification, addInfoNotification };\n}\n","import { isFunction } from 'lodash';\nimport { DevicesManager } from 'legoino-navigator-serial';\n\nconst SCAN_INTERVAL = 3000;\n\nconst devicesManager = new DevicesManager(navigator.serial);\n\n/**\n * By calling this method from a click you give users the possibility to allow access to some devices\n */\nconst requestDevices = async () => {\n  await devicesManager.requestDevices();\n};\n\n/**\n * @returns {Array<object>}\n */\nconst getConnectedDevices = async () => {\n  await devicesManager.updateDevices();\n  const connectedDevices = await devicesManager.getDevicesList({\n    ready: true, // If ready==`true` returns only currently connected device, else returns all devices ever connected.\n  });\n  return connectedDevices;\n};\n\n/**\n * Update updated devices list every `scanInterval` [ms].\n * @param {Function} callback(devicesList): Callback to execute on each update\n * @param {number} scanInterval Delay between calls\n */\nconst continuousUpdateDevices = async (\n  callback,\n  scanInterval = SCAN_INTERVAL,\n) => {\n  const interval = setInterval(async () => {\n    const connectedDevices = await getConnectedDevices();\n    isFunction(callback) && callback(connectedDevices);\n  }, scanInterval);\n  return interval;\n};\n\n/**\n * Send a serial command to a device.\n * @param {number} id ID of the device\n * @param {string} command Command to send\n * @returns ??????\n */\nconst sendCommand = async (deviceId, command) => {\n  return await devicesManager.sendCommand(deviceId, command);\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  requestDevices,\n  getConnectedDevices,\n  continuousUpdateDevices,\n  sendCommand,\n};\n","import { useEffect, useState } from 'react';\n\nimport devicesManager from '../../services/localDeviceService';\nimport { DEVICE_KINDS } from '../../services/devicesOptions';\nimport { Dropdown, Button } from '../../components/tailwind-ui';\nimport useNotification from '../../hooks/useNotification';\n\nconst typeOptions = DEVICE_KINDS.map((type) => ({\n  label: type,\n  type: 'option',\n}));\n\nconst SelectDeviceComponent = ({\n  device = { label: '--' },\n  deviceType = typeOptions.filter((o) => o.label === 'SimpleSpectro')[0],\n  onSelectDevice,\n  onSelectType,\n}) => {\n  const { addInfoNotification, addWarningNotification } = useNotification();\n  const [devices, setDevices] = useState([]);\n\n  useEffect(() => {\n    onSelectType(deviceType);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // continuous update of devices list\n  useEffect(() => {\n    updateConnectedDevices();\n    const cleanUp = devicesManager.continuousUpdateDevices((newList) => {\n      handleDevicesListChange(newList);\n    });\n    return () => cleanUp.then((intervalId) => clearInterval(intervalId));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [devices.length]);\n\n  const updateConnectedDevices = async () => {\n    const newList = await devicesManager.getConnectedDevices();\n    if (newList.length > 0) {\n      if (!device?.id) onSelectDevice(renderOptions(newList)[0]);\n      setDevices(newList);\n    }\n  };\n\n  // When connected devices are changed : show notification + set selected + set devicesList\n  const handleDevicesListChange = (newList) => {\n    if (newList.length > devices.length) {\n      addInfoNotification('New device connected');\n      if (!device?.id) onSelectDevice(renderOptions(newList)[0]);\n    } else if (newList.length < devices.length) {\n      addWarningNotification('Device disconnected');\n      if (newList.length === 0) onSelectDevice({ label: '--' });\n    }\n    setDevices(newList);\n  };\n\n  const onRequest = async () => {\n    document.activeElement.blur();\n    await devicesManager.requestDevices();\n    const newList = await devicesManager.getConnectedDevices();\n    handleDevicesListChange(newList);\n  };\n\n  const renderOptions = (list) =>\n    list.map((device) => ({\n      id: device.id,\n      label: 'Device-' + device.id,\n      type: 'option',\n    }));\n\n  return (\n    <div className=\"m-4 py-3 px-4 flex flex-col-reverse sm:flex-row sm:justify-between sm:items-center rounded-md bg-white shadow \">\n      <div className=\"flex flex-row flex-wrap justify-between\">\n        <div className=\"my-1 mx-2 w-full sm:w-max flex items-center justify-end flex-nowrap\">\n          <h3 className=\"mr-2 text-base font-medium text-neutral-800 \">\n            Device Type :\n          </h3>\n          <Dropdown\n            title={deviceType.label}\n            options={[typeOptions]}\n            onSelect={onSelectType}\n          />\n        </div>\n        <div className=\"my-1 mx-2 w-full sm:w-max flex items-center justify-end flex-nowrap\">\n          <h3 className=\"mr-2 text-base font-medium text-neutral-800\">\n            Select device :\n          </h3>\n          <Dropdown\n            title={device.label}\n            options={[renderOptions(devices)]}\n            onSelect={onSelectDevice}\n          />\n        </div>\n      </div>\n      <Button className=\"mb-3 sm:mb-0\" onClick={onRequest}>\n        Request device\n      </Button>\n    </div>\n  );\n};\n\nexport default SelectDeviceComponent;\n","import clsx from 'clsx';\n\nconst ValueCard = ({\n  title,\n  value,\n  unit,\n  placeholder,\n  type = 'text',\n  editable,\n  onChange,\n  className,\n}) => {\n  return (\n    <div className={clsx('flex', className)}>\n      <div className=\"w-full m-1 p-2 flex flex-col justify-between items-center sm:items-start rounded-md bg-white shadow\">\n        <h3 className=\"py-1 text-sm font-medium text-gray-500\">{title}</h3>\n        <div className=\"w-full mt-2 flex flex-row justify-center sm:justify-end items-center\">\n          {editable ? (\n            <input\n              className=\"w-full p-1 bg-neutral-50 border-neutral-200 text-right text-black text-sm font-bold placeholder-neutral-500 placeholder-opacity-30 rounded  focus:outline-none focus:ring-0 leading-none\"\n              id={title}\n              name={title}\n              type={type}\n              placeholder={placeholder}\n              value={value}\n              onChange={(event) => onChange(event.target.value)}\n            />\n          ) : (\n            <p className=\"text-xl font-bold text-black\">{value}</p>\n          )}\n          <p className=\"ml-1 text-sm font-medium text-gray-400\">{unit}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ValueCard;\n","import ValueCard from './ValueCard';\n\nconst GeneralTab = ({ data }) => {\n  return (\n    <div className=\"flex flex-col\">\n      {data?.epoch && (\n        <p className=\"m-2 text-base font-medium text-black self-end\">\n          Awake time:\n          <span className=\"mx-1 text-sm text-neutral-500\">\n            {data?.epoch / 1000 + 's'}\n          </span>\n        </p>\n      )}\n      <div className=\" flex flex-row justify-around flex-wrap\">\n        {data?.parametersArray?.map((param, index) => (\n          <ValueCard\n            key={index}\n            title={param.name || param.label}\n            value={param.value * param.factor}\n            unit={param.unit}\n            className=\"w-full sm:w-1/2  md:w-1/3 lg:w-1/4 flex\"\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default GeneralTab;\n","import React from 'react';\n\nconst EditTab = () => {\n  return <div></div>;\n};\n\nexport default EditTab;\n","import React from 'react';\nimport { Divider } from './tailwind-ui';\n\nconst DividerCustom = ({ title }) => {\n  return (\n    <div className=\"my-4\">\n      <Divider justify=\"start\">\n        <span className=\"px-2 bg-white text-xs font-medium text-neutral-400\">\n          {title}\n        </span>\n      </Divider>\n    </div>\n  );\n};\n\nexport default DividerCustom;\n","import { useState, useEffect } from 'react';\n\nimport { Button, Spinner, Dropdown } from '../../components/tailwind-ui';\nimport DividerCustom from '../../components/DividerCustom';\nimport useNotification from '../../hooks/useNotification';\nimport devicesManager from '../../services/localDeviceService';\nimport { COMMANDS } from './../../services/devicesOptions';\nimport ValueCard from './ValueCard';\n\nconst intervals = [1, 2, 5, 10].map((v) => ({\n  label: `${v} s`,\n  value: v * 1000,\n  type: 'option',\n}));\n\nconst ConfigTab = ({\n  device,\n  data,\n  refreshInterval = 1000,\n  setRefreshInterval,\n}) => {\n  const { addInfoNotification, addErrorNotification } = useNotification();\n  const [writableParams, setWritableParams] = useState([]);\n  const [_refreshInterval, _setRefreshInterval] = useState({\n    label: refreshInterval / 1000 + ' s',\n    value: refreshInterval,\n    type: 'option',\n  });\n  const [render, setRender] = useState(false);\n  const [showSpinner, setShowSpinner] = useState(false);\n\n  useEffect(() => {\n    const parameters = data?.parameters;\n    const values =\n      parameters &&\n      Object.keys(parameters)\n        .filter((key) => parameters[key].writable)\n        .map((key) => ({ ...parameters[key], key }));\n    setWritableParams(values);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [render]);\n\n  const reRender = () => {\n    setTimeout(() => {\n      setRender(!render);\n    }, 1000);\n  };\n\n  const OnRefreshIntervalChanged = (option) => {\n    _setRefreshInterval(option);\n    setRefreshInterval(option.value);\n    document.activeElement.blur();\n  };\n\n  const onReset = async () => {\n    try {\n      const resultMsg = await devicesManager.sendCommand(\n        device.id,\n        COMMANDS.reset,\n      );\n      addInfoNotification(resultMsg);\n      reRender();\n    } catch (e) {\n      addErrorNotification(e.message);\n    }\n    document.activeElement.blur();\n  };\n\n  const onSleep = async () => {\n    try {\n      await devicesManager.sendCommand(device.id, COMMANDS.sleep);\n    } catch (e) {\n      addErrorNotification(e.message);\n    }\n    document.activeElement.blur();\n  };\n\n  const onValueChanged = (label, value) => {\n    const newValues = writableParams.map((v) =>\n      v.label === label ? { ...v, value: value / v.factor, edited: true } : v,\n    );\n    setWritableParams(newValues);\n  };\n\n  const onSave = async () => {\n    setShowSpinner(true);\n    let saved = false;\n    try {\n      for (let v of writableParams) {\n        if (v.edited) {\n          console.log(v.key + v.value);\n          await devicesManager.sendCommand(\n            device.id,\n            COMMANDS.setParameter(v.key, v.value),\n          );\n          saved = true;\n        }\n      }\n      saved\n        ? addInfoNotification('Saved')\n        : addInfoNotification('No changes to save');\n      reRender();\n    } catch (e) {\n      addErrorNotification(e.message);\n    }\n    setShowSpinner(false);\n    document.activeElement.blur();\n  };\n\n  return (\n    <div className=\"w-full flex flex-col \">\n      <div className=\"mt-2 flex flex-col sm:flex-row justify-between\">\n        <div className=\"my-1 mx-2 flex flex-row items-center justify-end\">\n          <p className=\"mx-1 text-sm font-medium text-neutral-700\">\n            Refresh inreval :\n          </p>\n          <Dropdown\n            title={_refreshInterval.label}\n            options={[intervals]}\n            onSelect={OnRefreshIntervalChanged}\n          />\n        </div>\n        <div className=\"my-1 flex flex-row justify-end\">\n          <Button className=\"mx-2\" variant=\"white\" onClick={onSleep}>\n            Sleep\n          </Button>\n          <Button className=\"mx-2 \" variant=\"white\" onClick={onReset}>\n            Reset Device\n          </Button>\n        </div>\n      </div>\n\n      {writableParams?.length > 0 && (\n        <>\n          <DividerCustom title=\"Edit parameters\" />\n          <div className=\"flex flex-row justify-start flex-wrap\">\n            {writableParams.map((p, index) => (\n              <ValueCard\n                key={index}\n                title={p.name || p.label}\n                value={p.value * p.factor}\n                placeholder={p.description}\n                unit={p.unit}\n                editable={true}\n                onChange={(newValue) => onValueChanged(p.label, newValue)}\n                className=\"w-full sm:w-1/2  md:w-1/3 lg:w-1/4 flex\"\n              />\n            ))}\n          </div>\n\n          <Button\n            className=\"mx-2 mt-2 flex self-end\"\n            variant=\"white\"\n            onClick={onSave}\n          >\n            {showSpinner && (\n              <Spinner className=\"text-primary-600 w-5 mr-2\"></Spinner>\n            )}\n            Save\n          </Button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ConfigTab;\n","import { useState, useEffect } from 'react';\nimport { parseCurrentSettings } from 'legoino-util';\n\nimport { HorizontalNavigation } from '../../components/tailwind-ui';\nimport useNotification from '../../hooks/useNotification';\nimport devicesManager from '../../services/localDeviceService';\nimport { COMMANDS } from './../../services/devicesOptions';\nimport SelectDeviceComponent from './SelectDeviceComponent';\nimport GeneralTab from './GeneralTab';\nimport EditTab from './EditTab';\nimport ConfigTab from './ConfigTab';\n\nconst tabs = ['General', 'History', 'Configuration'].map((v) => ({\n  value: v,\n  label: v,\n}));\n\nconst LocalDevices = () => {\n  const [selectedDevice, setSelectedDevice] = useState();\n  const [selectedType, setSelectedType] = useState();\n  const [selectedTab, setSelectedTab] = useState(tabs[0]);\n  const [data, setData] = useState({});\n  const [refreshInterval, setRefreshInterval] = useState(1000);\n  const { addErrorNotification } = useNotification();\n\n  useEffect(() => {\n    if (selectedDevice?.id) {\n      const interval = setInterval(\n        () => getData(selectedDevice?.id),\n        refreshInterval,\n      );\n      return () => {\n        clearInterval(interval);\n      };\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [refreshInterval, selectedDevice?.id, selectedType?.label]);\n\n  const getData = async (deviceId) => {\n    if (deviceId) {\n      try {\n        const compressedResults = await devicesManager.sendCommand(\n          deviceId,\n          COMMANDS.compactSettings,\n        );\n        const results = parseCurrentSettings(compressedResults, {\n          kind: selectedType?.label, // parameterLabel: true,\n          parameterInfo: true,\n          parametersArray: true,\n        });\n        setData(results);\n      } catch (e) {\n        addErrorNotification(e.message);\n      }\n    } else {\n      setData({});\n    }\n  };\n\n  const renderTabContent = (tab) => {\n    switch (tab.value) {\n      case 'General':\n        return <GeneralTab data={data} />;\n      case 'History':\n        return <EditTab device={selectedDevice} />;\n      case 'Configuration':\n        return (\n          <ConfigTab\n            device={selectedDevice}\n            data={data}\n            refreshInterval={refreshInterval}\n            setRefreshInterval={setRefreshInterval}\n          />\n        );\n      default:\n        return <div />;\n    }\n  };\n\n  return (\n    <>\n      <SelectDeviceComponent\n        deviceType={selectedType}\n        onSelectType={setSelectedType}\n        device={selectedDevice}\n        onSelectDevice={(newDevice) => {\n          setSelectedDevice(newDevice);\n          getData(newDevice?.id);\n        }}\n      />\n      {selectedDevice?.id ? (\n        <div className=\"mx-4 pb-4\">\n          <HorizontalNavigation\n            onSelect={setSelectedTab}\n            selected={selectedTab}\n            options={tabs}\n          />\n          <div className=\"p-3 mt-4 sm:m-0 flex flex-col items-center rounded-md sm:rounded-t-none bg-white shadow \">\n            {renderTabContent(selectedTab)}\n          </div>\n        </div>\n      ) : (\n        <div className=\"mx-5 mt-16 flex flex-col items-center\">\n          <h3 className=\"text-base font-bold text-gray-300 leading-loose\">\n            No connected Device\n          </h3>\n          <h3 className=\"text-sm font-base text-gray-300\">\n            Please plug your device into the computer\n          </h3>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default LocalDevices;\n","import legoinoDeviceInformation from 'legoino-device-information';\n\n// Default Values\n\nexport const DEVICES_DB = 'BIOREACTOR_devices';\nexport const DEFAULT_PORT = '9001';\nexport const DEFAULT_PROTOCOL = 'tcp';\n\n// Static Values\n\nexport const DEVICE_TYPE = {\n  broadcast: 'broadcast',\n  interactive: 'interactive',\n  local: 'local',\n};\n\nexport const DEVICE_PROTOCOLS = ['tcp', 'http'];\n\nexport const DEVICE_KINDS = Object.keys(legoinoDeviceInformation).map(\n  (key) => legoinoDeviceInformation[key].kind,\n);\n\nexport const DEVICE_STATUS = {\n  opening: 1,\n  opened: 2,\n  closed: 3,\n  missing: 9,\n  error: 10,\n};\n\nexport const COMMANDS = {\n  compactSettings: 'uc',\n  reset: 'ur1234',\n  sleep: 'l',\n  setParameter: (label, value) => `${label}${value}`,\n};\n"],"sourceRoot":""}